<?php

/**
 * @file
 * Install, update, and uninstall hooks for multisite_settings_core.
 */

/**
 * Add the tags vocabulary.
 */
function multisite_settings_core_install() {
  $tags_vocab = taxonomy_vocabulary_machine_name_load('tags');
  multisite_settings_core_taxonomy_vocabulary_insert($tags_vocab);
}

/**
 * Add and configure the context workbench.
 */
function multisite_settings_core_update_7121() {
  // Add the vocabulary tags to the taxonomy browser settings.
  $tags_vocab = taxonomy_vocabulary_machine_name_load('tags');
  $vids = variable_get('taxonomy_browser_vocabulary');
  $vids[$tags_vocab->vid] = $tags_vocab->vid;
  variable_set('taxonomy_browser_vocabulary', $vids);

  $context = new stdClass();
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->api_version = 3;
  $context->name = 'workbench_moderate_all';
  $context->description = '';
  $context->tag = 'workbench';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        'admin/workbench/moderate-all*' => 'admin/workbench/moderate-all*',
      ),
    ),
  );
  $context->reactions = array(
    'block' => array(
      'blocks' => array(
        'taxonomy_browser-taxonomy_browser_vocabulary_' . $tags_vocab->vid => array(
          'module' => 'taxonomy_browser',
          'delta' => 'taxonomy_browser_vocabulary_' . $tags_vocab->vid,
          'region' => 'sidebar_left',
          'weight' => '-10',
        ),
      ),
    ),
  );
  $context->condition_mode = 0;

  context_save($context);
}

/**
 * Disable cookie language.
 */
function multisite_settings_core_update_7122() {
  $lang = variable_get('language_negotiation_language');
  if (isset($lang['language_cookie'])) {
    unset($lang['language_cookie']);
    variable_set('language_negotiation_language', $lang);
  }
}

/**
 * Regenerate the language negotiation URL.
 */
function multisite_settings_core_update_7123() {
  // The custom modules have moved to a new location. The callback that
  // generates the language negotiation URL is stored in a variable for
  // performance reasons, but this includes a hardcoded path that points to the
  // location of the callback before the modules were relocated.
  // This callback is already invoked before Drupal is fully bootstrapped. If
  // you find that you cannot execute database updates because Drupal cannot be
  // bootstrapped, please execute the following database queries to clear the
  // hardcoded path from the variables table, and the various cache layers:
  //
  // @code
  // DELETE FROM variable WHERE name = 'language_negotiation_language_url';
  // DELETE FROM cache_variable;
  // DELETE FROM cache_bootstrap WHERE cid = 'variables';
  // @endcode
  include_once DRUPAL_ROOT . '/includes/language.inc';
  language_types_set();
}

/**
 * Enable "Administration language negotiation" with the platform settings.
 */
function multisite_settings_core_update_7124() {
  // Ensure that the module is enabled.
  if (!module_exists('administration_language_negotiation')) {
    // If not, enable it UNLESS if its alternative "admin_language" is enabled
    // like on the REPS sites.
    if (module_exists('admin_language')) {
      return t('administration_language_negotiation is not enabled because "admin_language" already is.');
    }

    module_enable(array('administration_language_negotiation'));
  }

  // Ensure that the 'language-administration' provider is enabled.
  $enabled_providers_interface = variable_get('language_negotiation_' . LANGUAGE_TYPE_INTERFACE, FALSE);
  if (empty($enabled_providers_interface['language-administration'])) {
    $language_admin_provider = array(
      'language-administration' => array(
        'callbacks' => array(
          'language' => 'administration_language_negotiation_admin_language',
        ),
        'file' => drupal_get_path('module', 'administration_language_negotiation') . '/administration_language_negotiation.module',
        'cache' => 0,
      ),
    );
    language_negotiation_set(LANGUAGE_TYPE_INTERFACE, $enabled_providers_interface + $language_admin_provider);
  }

  // Ensure that the "admin" language is set.
  // If not, set to English.
  if (empty(variable_get('administration_language_negotiation_default', FALSE))) {
    $admin_language = 'en';
    // In case, a site has not enabled "english".
    $language_list = language_list();
    if (isset($language_list['en']) || !$language_list['en']->status) {
      $admin_language = language_default('language');
    }
    variable_set('administration_language_negotiation_default', $admin_language);
  }

  // Ensure that the paths that are considered as admin page are set.
  // If not, set the default platform list.
  if (empty(variable_get('administration_language_negotiation_paths', FALSE))) {
    variable_set(
      'administration_language_negotiation_paths',
      array(
        '*admin',
        '*admin/*',
        '*node/*/edit*',
        '*node/*/translate*',
        '*admin_menu/*',
        '/*/admin/*',
        '/*/node/*/edit',
        '/*/node/*/translate',
        '/*/admin_menu/*',
      )
    );
  }

}
