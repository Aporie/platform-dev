<?php

/**
 * @file
 * Code for the multisite_notifications_core feature.
 */

include_once 'multisite_notifications_core.features.inc';


/**
 * Implements hook_subscriptions_queue_alter().
 */
function multisite_notifications_core_subscriptions_queue_alter(&$event) {

  // No notification for nodes from workbench_moderation_store
  // (=updating_live_revision).
  if (isset($event['node']->workbench_moderation['updating_live_revision']) && $event['node']->workbench_moderation['updating_live_revision']) {
    $event = NULL;
  }

  // Only send notification if the state of the content is published.
  if (isset($event['node']->workbench_moderation_state_new)) {
    // Content has a worbench moderation workflow.
    if ($event['node']->workbench_moderation_state_new != workbench_moderation_state_published()) {
      $event = NULL;
    }
  }
  else {
    // No workbench moderation workflow.
    if ($event['node']->status != 1) {
      $event = NULL;
    }
  }
}

/**
 * Implements hook_menu().
 */
function multisite_notifications_core_menu() {
  $items = array();

  $items['subscribe'] = array(
    'title' => 'Subscribe',
    'description' => 'Confirmation for subscribing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_notifications_core_subscribe_form'),
    'access callback' => TRUE,
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );

  $items['unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'description' => 'Confirmation for unsubscribing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_notifications_core_unsubscribe_form'),
    'access callback' => TRUE,
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/subscriptions/subscription-block'] = array(
    'title' => 'Subscription Block',
    'description' => 'Configure the subscription block settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_notifications_core_general_settings'),
    'access arguments' => array('administer user subscriptions'),
    // See subscriptions module.
    'weight' => -10,
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'file' => 'includes/multisite_notifications_core.settings.inc',
  );
  return $items;
}

/**
 * Implements hook_form_validate().
 */
function multisite_notifications_core_form_validate($form, &$form_state) {

  $email_to_check = $form_state['values']['mail'];
  $is_valid_email = valid_email_address($email_to_check);

  if (!$is_valid_email) {
    form_set_error('mail', t('The e-mail address you supplied is not valid.'));
  }
  // Check if the email already exists in dB.
  $is_email_saved = (bool) db_query_range('SELECT 1 FROM {users} WHERE mail = :mail', 0, 1, array(':mail' => $email_to_check))->fetchField();
  switch ($form_state['values']['op']) {
    case t('Subscribe'):
      if ($is_email_saved >= 1) {
        form_set_error('mail', t('You are already a subscriber!'));
      }

      break;

    case t('Unsubscribe'):
      if ($is_email_saved < 1) {
        form_set_error('mail', t('You are not yet a subscriber.'));
      }

      break;

    default:
      break;
  }
}

/**
 * Implements hook_mail().
 *
 * Now when drupal_mail() is called and passed $key and $module,
 * the appropriate body and subject will be filled in before the mail is sent.
 */
function multisite_notifications_core_mail($key, &$message, $params) {
  global $language;
  global $base_url;

  switch ($key) {
    case 'subscription':
      $message['subject'] = variable_get('subscribe_subject_' . $language->language, 'Please confirm your subscription');
      $message['body'][] = variable_get('subscribe_message_' . $language->language, 'Please confirm your subscription by clicking the link provided by this mail.');
      // @todo integrate with tokens.
      // @todo make $params an associative array.
      $message['body'][] = $base_url . '/subscribe/' . $params[1];
      break;

    case 'unsubscription':
      $message['subject'] = variable_get('unsubscribe_subject_' . $language->language, 'Please confirm your unsubscription');
      $message['body'][] = variable_get('unsubscribe_message_' . $language->language, 'Please confirm your unsubscription by clicking the link provided by this mail.');
      $message['body'][] = $base_url . '/unsubscribe/' . $params[1];
      break;

  }
}
/**
 * Helper function to delete the account.
 *
 * @param string|int|object $mail
 *   User mail.
 * @param string|int|object $waiting_confirmation
 *   Waiting confirmation.
 * @param int $uid
 *   User id.
 */
function _multisite_notifications_core_delete_anonymous_account($mail, $waiting_confirmation = NULL, $uid = NULL) {
  // Block user until user confirms.
  if ($waiting_confirmation) {
    $blocked = db_update('users')
            ->fields(array('status' => 0))
            ->condition('mail', $mail, '=')
            ->execute();
  }
  else {
    $user_deleted = db_delete('users')
            ->condition('uid', $uid, '=')
            ->execute();
    if ($user_deleted > 0) {
      drupal_set_message(t('You have confirmed your unsubscription.'), 'status');
    }
    else {
      drupal_set_message(t('An error occurred during while unsubscribing your account.'), 'error');
    }
    drupal_goto();
  }
  if ($waiting_confirmation) {
    return $blocked;
  }
}

/**
 * Form constructor for the notification subscription form.
 *
 * @see multisite_notifications_core_subscribe_form_submit()
 *
 * @ingroup forms
 */
function multisite_notifications_core_subscribe_form($form, &$form_states) {

  $form = array();
  $form['subscribe']['confirmation_text'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>',
    '#suffix' => '</h3>',
    '#markup' => t('Please confirm your subscription'),
  );

  $form['subscribe']['subscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#weight' => 30,
  );

  $form['#submit'][] = 'multisite_notifications_core_subscribe_form_submit';

  return $form;
}

/**
 * User who filled in the form is entitled to receive the updates.
 */
function _multisite_notifications_core_insert_notification_defaults($uid) {
  // Provide default settings values for subscriptions.
  db_update('subscriptions_user')
    ->fields(array(
      'digest' => 0,
      'send_interval' => 1,
      'send_updates' => 1,
      'send_comments' => 1,
      'send_interval_visible' => 1,
      'send_updates_visible' => 1,
      'send_comments_visible' => 1,
      'autosub_on_post' => 0,
      'autosub_on_update' => 0,
      'autosub_on_comment' => 0,
      'send_self' => 1,
      'suspended' => 0,
    ))
    ->condition('uid', $uid)
    ->execute();
}
