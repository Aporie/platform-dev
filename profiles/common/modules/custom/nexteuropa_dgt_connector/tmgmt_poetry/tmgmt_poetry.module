<?php

/**
 * @file
 * Module file of the translation management Poetry .
 */

use Drupal\tmgmt_poetry\Notification;

/**
 * Log message severity -- Emergency: system is unusable.
 */
define('TMGMT_POETRY_STATUS_MSG_PEN', t('Pending'));
define('TMGMT_POETRY_STATUS_MSG_SUS', t('Suspended'));
define('TMGMT_POETRY_STATUS_MSG_ONG', t('Ongoing'));
define('TMGMT_POETRY_STATUS_MSG_LCK', t('Acceptance in Progress'));
define('TMGMT_POETRY_STATUS_MSG_EXE', t('Executed'));
define('TMGMT_POETRY_STATUS_MSG_REF', t('Refused'));
define('TMGMT_POETRY_STATUS_MSG_CNL', t('Canceled'));

module_load_include('inc', 'tmgmt_poetry', 'inc/tmgmt_poetry');
module_load_include('inc', 'tmgmt_poetry', 'inc/tmgmt_poetry.webservice');

/**
 * Implements hook_entity_info_alter().
 */
function tmgmt_poetry_entity_info_alter(&$entity_info) {
  $entity_info['tmgmt_job']['controller class'] = 'TMGMTPoetryJobController';
  $entity_info['tmgmt_job']['entity class'] = 'TMGMTPoetryJob';
  $entity_info['tmgmt_translator']['access callback'] = '_tmgmt_poetry_translator_access';
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_poetry_tmgmt_translator_plugin_info() {
  return array(
    'poetry' => array(
      'label' => t('DGT Connector'),
      'description' => t('DGT Translation service.'),
      'plugin controller class' => 'TMGMTPoetryTranslatorPluginController',
      'ui controller class' => 'TMGMTPoetryTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_entity_type_delete().
 *
 * When main translation job is removed,
 * delete also the sub translation if the translator is poetry.
 *
 * @TODO remove this deletion.
 */
function tmgmt_poetry_tmgmt_job_delete($job) {
  if ($job->hasPoetryTranslator() && isset($job->settings['languages']) && (strpos($job->reference, 'MAIN_' . $job->tjid) !== FALSE)) {
    $related_jobs = tmgmt_poetry_obtain_related_translation_jobs($job->settings['languages'], 'SUB_' . $job->tjid);
    foreach ($related_jobs as $related_job) {
      entity_get_controller('tmgmt_job')->delete(array($related_job->tjid));
      entity_get_controller('tmgmt_job_item')->delete(array($related_job->tjiid));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a button to send a feedback to DGT.
 */
function tmgmt_poetry_form_tmgmt_ui_workbench_moderation_translation_review_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['item'])) {
    $job = $form_state['item'];

    if ($job->state == 2) {
      $translator_feedback_contacts = $job->getTranslator()
        ->getSetting('feedback_contacts');
      $mailto = format_string('mailto:@mail?subject=@subject&cc=@cc',
        array(
          '@mail' => $translator_feedback_contacts['to'],
          '@subject' => 'Issue with ' . $job->tjid,
          '@cc' => $translator_feedback_contacts['cc'],
        ));
      $form['actions']['feedback'] = array(
        '#type' => 'link',
        '#title' => 'Feedback to DGT',
        '#href' => $mailto,
        '#weight' => -1,
        '#attributes' => array('class' => array('button')),
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_poetry_form_tmgmt_translator_form_alter(&$form, &$form_state) {
  $translator = $form_state['tmgmt_translator'];
  if (_tmgmt_poetry_has_poetry_plugin($translator->plugin)) {
    array_unshift($form['#submit'], '_tmgmt_poetry_process_translator_contacts');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_poetry_form_tmgmt_job_form_alter(&$form, &$form_state, $form_id) {
  $translator = FALSE;
  // Reference to the translation job object.
  $job = &$form_state['tmgmt_job'];

  drupal_set_title(t("Translation Request - Job ID: @id", array('@id' => $form_state['tmgmt_job']->tjid)));

  // Add extra submit function that will force the contacts to be lowercase.
  array_unshift($form['#submit'], '_tmgmt_poetry_process_translator_contacts');

  // Hiding some parts of the 'info' fieldset.
  $form['info']['source_language']['#access'] = FALSE;
  $form['info']['target_language']['#access'] = FALSE;
  $form['info']['word_count']['#access'] = FALSE;
  // Setting up the 'translator_wrapper' fieldset properties.
  $form['translator_wrapper']['settings']['#collapsible'] = TRUE;
  $form['translator_wrapper']['settings']['#collapsed'] = FALSE;
  // Changing fieldsets labels.
  $form['translator_wrapper']['#title'] = t('Translation request details');

  // If job form was never submitted load default translator settings.
  if (!isset($form_state['values'])) {

    // Setting up default value for the 'Translator' field.
    if (isset($form['translator_wrapper']['translator']['#options'])) {
      $translators = $form['translator_wrapper']['translator']['#options'];

      // If tmgmt_poetry_mock is enabled set up mock translator as a default.
      if (in_array('tmgmt_poetry_test_translator', array_keys($translators))) {
        $job->translator = 'tmgmt_poetry_test_translator';
        $form['translator_wrapper']['translator']['#default_value'] = 'tmgmt_poetry_test_translator';
        _tmgmt_poetry_form_load_translator_settings($form_state, $form, $job);
      }
      // Otherwise use the default 'poetry'.
      elseif (in_array('poetry', array_keys($translators))
      ) {
        $form['translator_wrapper']['translator']['#default_value'] = 'poetry';
        $job->translator = 'poetry';
        _tmgmt_poetry_form_load_translator_settings($form_state, $form, $job);
      }

    }
  }

  // If job form was submitted, check translator and load settings.
  if (isset($form_state['values']['translator'])) {
    $job->translator = $form_state['values']['translator'];
    _tmgmt_poetry_form_load_translator_settings($form_state, $form, $job);
  }

  if ($job->isSubmittable()) {
    // Don't show job items fieldset.
    $form['job_items_wrapper']['#access'] = FALSE;

    // Avoid user from leaving page without further actions.
    $form['#attached']['js'][] = drupal_get_path('module', 'tmgmt_poetry') . '/js/tmgmt_poetry_translator_disable.js';
    drupal_set_message(t('Please remember to either send or delete the job before leaving this page.'), 'warning');
  }

  // Overwriting details which are coming from tmgmt_ui.pages.inc.
  // Details about job items for give job and sub jobs related to that job.
  unset($form['job_items_wrapper']['items']);
  // Inject details only when job was submitted.
  if (($view = views_get_view('tmgmt_poetry_translation_job_items')) && !$job->isSubmittable()) {
    $form['job_items_wrapper']['items'] = array(
      '#type' => 'markup',
      '#markup' => $view->preview('block', array($job->tjid)),
      '#prefix' => '<div class="tmgmt-ui-job-items tmgmt-ui-job-manage">',
      '#suffix' => '</div>',
    );
  }

  // If translator values has been changed.
  if (isset($form_state['values']['translator'])) {
    $translator_name = $form_state['values']['translator'];
    // Obtain current translation job translator.
    $translator = tmgmt_translator_load($translator_name);
  }
  elseif (isset($job->translator)) {
    $translator = $job->getTranslator();
  }

  $form['translator_wrapper']['#id'] = "tmgmt-ui-translator-wrapper";

  if ($translator && ($translator->plugin == 'poetry' || $job->hasPoetryTranslator())) {
    // Putting custom form submit as a first one on the list.
    array_unshift($form['#submit'], '_tmgmt_poetry_form_tmgmt_job_submit');
    array_unshift($form['#validate'], '_tmgmt_poetry_validate_job_mandatory_fields');

    if (strpos($job->reference, 'SUB_') !== FALSE) {
      $form['actions']['abort_job']['#access'] = FALSE;
      $form['actions']['submit']['#access'] = FALSE;
      $form['actions']['delete']['#access'] = FALSE;
      $form['translator_wrapper']['#access'] = FALSE;
    }

    if ($job->state != TMGMT_JOB_STATE_UNPROCESSED) {
      $form['translator_wrapper']['#collapsed'] = TRUE;
    }
  }

  // User should not cancel neither save the job,
  // it should only send translation request or delete the job.
  unset($form['actions']['submit']);
  unset($form['actions']['cancel']);
  foreach ($form['actions'] as $key => $action) {
    if (is_array($action)) {
      $form['actions'][$key]['#attributes'] = array(
        'onClick' => 'window.needToConfirm = false;',
      );
    }
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function tmgmt_poetry_views_default_views_alter(&$views) {
  if (isset($views['tmgmt_ui_job_overview'])) {
    $handler =& $views['tmgmt_ui_job_overview']->display['default']->handler;
    /* Filter criterion: Translation Management Job: Reference. */
    $handler->display->display_options['filters']['reference']['id'] = 'reference';
    $handler->display->display_options['filters']['reference']['table'] = 'tmgmt_job';
    $handler->display->display_options['filters']['reference']['field'] = 'reference';
    $handler->display->display_options['filters']['reference']['operator'] = 'contains';
    $handler->display->display_options['filters']['reference']['group'] = 1;
    $handler->display->display_options['filters']['reference']['exposed'] = TRUE;
    $handler->display->display_options['filters']['reference']['expose']['operator_id'] = 'reference_op';
    $handler->display->display_options['filters']['reference']['expose']['label'] = 'Reference';
    $handler->display->display_options['filters']['reference']['expose']['operator'] = 'reference_op';
    $handler->display->display_options['filters']['reference']['expose']['identifier'] = 'reference';
    $handler->display->display_options['filters']['reference']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      4 => 0,
      3 => 0,
      5 => 0,
      6 => 0,
      7 => 0,
    );

    /* Place reference filter & bulk op in first position. */
    $filter_ref = $handler->display->display_options['filters']['reference'];
    unset($handler->display->display_options['filters']['reference']);
    array_unshift($handler->display->display_options['filters'], $filter_ref);

    /* Group filters */
    $handler->display->display_options['filters']['state']['group'] = 1;
    $handler->display->display_options['filters']['source_language']['group'] = 1;
    $handler->display->display_options['filters']['target_language']['group'] = 1;
    $handler->display->display_options['filters']['translator']['group'] = 1;

    /* Field: Translation Management Job: Reference */
    $handler->display->display_options['fields']['reference']['id'] = 'reference';
    $handler->display->display_options['fields']['reference']['table'] = 'tmgmt_job';
    $handler->display->display_options['fields']['reference']['field'] = 'reference';

    /* Place reference field in first position */
    $ref = $handler->display->display_options['fields']['reference'];
    unset($handler->display->display_options['fields']['reference'], $handler->display->display_options['fields']['views_bulk_operations']);
    array_unshift($handler->display->display_options['fields'], $ref);
  }
}

/**
 * Loads an array with the word and status statistics of a job.
 *
 * @param array $tjids
 *   An array of job ids.
 *
 * @return array
 *   An array of objects with the keys word_count, count_pending,
 *   count_accepted, count_reviewed and count_translated.
 */
function tmgmt_poetry_job_statistics_load(array $tjids) {
  $statistics = &drupal_static(__FUNCTION__, array());
  // First try to get the values from the cache.
  $return = array();
  $tjids_to_load = array();

  foreach ($tjids as $tjid) {
    if (isset($statistics[$tjid])) {
      // Info exists in cache, get it from there.
      $return[$tjid] = $statistics[$tjid];
    }
    else {
      // Info doesn't exist in cache, add job to the list that needs to be
      // fetched.
      $tjids_to_load[] = $tjid;
    }
  }

  // If there are remaining jobs, build a query to fetch them.
  if (!empty($tjids_to_load)) {
    foreach ($tjids_to_load as $tjid_to_load) {
      // Build the query to fetch the statistics.
      $query = db_select('tmgmt_job_item', 'tji_item');
      $query->join('tmgmt_job', 'tji_job', 'tji_item.tjid = tji_job.tjid');
      $query->addExpression($tjid_to_load, 'tjid');
      $query->addExpression('SUM(word_count)', 'word_count');
      $query->addExpression('SUM(count_accepted)', 'count_accepted');
      $query->addExpression('SUM(count_reviewed)', 'count_reviewed');
      $query->addExpression('SUM(count_pending)', 'count_pending');
      $query->addExpression('SUM(count_translated)', 'count_translated');
      $query->condition('reference', "^(MAIN|SUB)_" . $tjid_to_load . "_", "REGEXP");

      $result = $query->execute();

      foreach ($result as $row) {
        $return[$row->tjid] = $statistics[$row->tjid] = $row;
      }
    }
  }

  return $return;
}

/**
 * Returns a specific statistic of a task.
 *
 * @param TMGMTJob $job
 *   The translation task entity.
 * @param string $key
 *   One of word_count, loop_count, count_pending, count_accepted and
 *   count_translated.
 *
 * @return int
 *   The requested information as an integer.
 */
function tmgmt_poetry_job_statistics(TMGMTJob $job, $key) {
  $statistics = tmgmt_poetry_job_statistics_load(array($job->tjid));

  if (isset($statistics[$job->tjid]->$key)) {
    return $statistics[$job->tjid]->$key;
  }

  return 0;
}

/**
 * Implements hook_theme().
 */
function tmgmt_poetry_theme($existing, $type, $theme, $path) {
  // Setting up templates path.
  $templates_path = drupal_get_path('module', 'tmgmt_poetry') . '/templates';

  return array(
    'tmgmt_poetry_progress_field' => array(
      'variables' => array(
        'stats' => NULL,
        'title' => NULL,
      ),
      'template' => 'tmgmt-poetry-progress-field',
      'path' => $templates_path,
    ),
  );
}

/**
 * Preprocess theme function for the progress field.
 *
 * It adds specific CSS styles for the progress field.
 */
function tmgmt_poetry_preprocess_tmgmt_poetry_progress_field(&$variables) {
  drupal_add_css(drupal_get_path('module', 'tmgmt_poetry') . '/css/tmgmt_poetry.css');
}

/**
 * Implements hook_views_api().
 */
function tmgmt_poetry_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tmgmt_poetry') . '/views',
  );
}

/**
 * Implements hook_page_alter().
 */
function tmgmt_poetry_page_alter(&$page) {
  // Removing empty workbench block from request translation page.
  if (in_array('node', arg()) && in_array('translate', arg())) {
    unset($page['content']['workbench_block']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change the form on the 'Translate' tab to provide the tmgmt_poetry module
 * functionalities.
 */
function tmgmt_poetry_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state) {
  // Disable default translate buttons (request and cart).
  unset($form['actions']['request']);

  if (!module_exists('tmgmt_dgt_connector')) {
    // Remove add to cart button.
    unset($form['top_actions']);
  }

  $entity_type = $form_state['entity_type'];

  // Current tmgmt_poetry implementation for the 'Translate' tab form works
  // only with the nodes.
  if ($entity_type == 'node') {
    $node = $form_state['entity'];

    // Current tmgmt_poetry implementation works only for the content types
    // which are moderated via the workbench moderation module functionality.
    if (workbench_moderation_node_moderated($node)) {

      // Getting information about existing job items. This part is duplicated
      // in the tmgmt_workbench to avoid the second call to the helper function
      // which returns existing_jobs variable.
      if (!isset($form_state['tmgmt_workbench']['existing_jobs'])) {
        $form_state['tmgmt_workbench']['existing_jobs'] = _tmgmt_workbench_get_existing_jobs($node);
      }

      $existing_jobs = $form_state['tmgmt_workbench']['existing_jobs'];

      // Custom header for the 'last change' column.
      $form['languages']['#header'][TMGMT_WORKBENCH_REQUEST_LAST_CHANGE_INDEX] = t('Last change');

      // Setting up an array with language codes based on the available options.
      $lang_codes = array_keys($form['languages']['#options']);

      // Iterating through the languages to generate content of the custom
      // 'Last change' column.
      foreach ($lang_codes as $lang_code) {
        // The 'last change' custom column by default is empty.
        $form['languages']['#options'][$lang_code][TMGMT_WORKBENCH_REQUEST_LAST_CHANGE_INDEX] = '';

        if (isset($existing_jobs[$lang_code])) {
          $item = $existing_jobs[$lang_code];
          $wrapper = entity_metadata_wrapper('tmgmt_job_item', $item);
          // Getting and putting in the column the 'changed' property value
          // from the job item.
          $form['languages']['#options'][$lang_code][TMGMT_WORKBENCH_REQUEST_LAST_CHANGE_INDEX]
            = format_date($wrapper->changed->value(), 'short');
        }
      }

      // Checking if there are existing jobs.
      if (!empty($existing_jobs)) {
        // Checking if you can request translation for the existing jobs.
        if (_tmgmt_poetry_check_jobs_translatability($existing_jobs)) {
          // If yes, inject form elements which are allowing to sent an update
          // translation request.
          _tmgmt_poetry_inject_request_update_elements($form);
        }
        else {
          // If no, disable action elements and provide the message box.
          _tmgmt_poetry_disable_form_elements($form);
          $form['languages_description'] = array(
            '#type' => 'item',
            '#prefix' => '<div class="messages warning">',
            '#markup' => t('Please wait for the translation request to be accepted before further update options.'),
            '#suffix' => '</div>',
          );
        }

        // If there are languages for which translations were not requested
        // inject elements of the 'additional languages requests' functionality.
        if (_tmgmt_poetry_check_translatability($form_state['tmgmt_cart']['item_id'])) {
          // Checking and getting additional translatable languages.
          if (!empty($trans_langs = _tmgmt_poetry_get_translatable_languages($existing_jobs, $form, $form_state))) {
            // Injecting 'request additional languages' functionality form
            // elements.
            _tmgmt_poetry_inject_add_new_languages_elements($form, $trans_langs);
          }
        }
      }
      // Case if there aren't any of the existing jobs.
      else {
        $translations_possible = _tmgmt_poetry_translations_possible($form_state);
        if (in_array('regular', $translations_possible)) {
          $form['actions']['#type'] = 'actions';
          $form['actions']['request'] = array(
            '#type' => 'submit',
            '#value' => t('Request translation'),
            '#submit' => array('_tmgmt_poetry_workbench_translate_form_submit'),
            '#validate' => array('_tmgmt_poetry_workbench_translate_form_validate'),
          );
        }
        // If not, unset actions and disable checkboxes for available languages.
        elseif (empty($translations_possible)) {
          foreach ($lang_codes as $lang_code) {
            $form['languages'][$lang_code] = array(
              '#type' => 'checkbox',
              '#disabled' => TRUE,
            );
          }
        }
      }

      // Allow to select multiple languages.
      $form['languages']['#multiple'] = TRUE;
    }
  }
}

/**
 * Injects to the form 'Request translation update' functionality.
 *
 * @param array $form
 *   A form passed as a reference.
 */
function _tmgmt_poetry_inject_request_update_elements(&$form) {
  // Add the new submit button.
  $form['actions']['request'] = array(
    '#type' => 'submit',
    '#value' => t('Request translation update'),
    '#submit' => array('_tmgmt_poetry_workbench_translate_form_submit'),
    '#validate' => array('_tmgmt_poetry_workbench_translate_form_validate'),
    '#limit_validation_errors' => array(
      array('languages'),
    ),
  );
}

/**
 * The custom form submit handler.
 */
function _tmgmt_poetry_workbench_translate_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];

  // Store chosen languages in session because there is no other more elegant
  // way to move them between requests (passing data to tmgmt job form).
  $langcode = _tmgmt_poetry_workbench_store_request_languages($form_state['values']['languages']);

  $jobs = array();
  // Create the job object.
  $job = tmgmt_job_create(entity_language('node', $entity), $langcode,
    $GLOBALS['user']->uid);

  try {
    // Add the job item.
    $job->addItem('workbench_moderation', 'node', $entity->nid);
    // Append this job to the array of created jobs so we can redirect the
    // user to a multistep checkout form if necessary.
    $jobs[$job->tjid] = $job;
  }
  catch (TMGMTException $e) {
    watchdog_exception('tmgmt workbench', $e);
    $languages = language_list();
    $target_lang_name = $languages[$langcode]->language;
    drupal_set_message(t('Unable to add job item for target language %name (Using translate tab). Make sure the source content is not empty. Error : %error',
      array(
        '%name' => $target_lang_name,
        '%error' => $e->getMessage(),
      )),
      'error');
  }

  tmgmt_ui_job_checkout_and_redirect($form_state, $jobs);
}

/**
 * Validation callback for the entity translation overview form.
 */
function _tmgmt_poetry_workbench_translate_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['languages'])) {
    form_set_error('languages', t('You have to select a language for requesting a translation.'));
  }
  else {
    $validated = FALSE;

    foreach ($form_state['values']['languages'] as $language) {
      if (!empty($language)) {
        $validated = TRUE;
      }
    }

    if (!$validated) {
      form_set_error('languages', t('You have to select a language for requesting a translation.'));
    }
  }
}

/**
 * Implements hook_menu().
 */
function tmgmt_poetry_menu() {
  $items = array();
  $items['tmgmt_poetry/service_callback'] = array(
    'page callback' => '_tmgmt_poetry_service_callback',
    'access callback' => TRUE,
  );

  // @depecrated in favor of poetry/wsdl provided bu nexteuropa_poetry.
  $items[drupal_get_path("module", "tmgmt_poetry") . "/wsdl/PoetryIntegration.wsdl"] = array(
    'page callback' => 'nexteuropa_poetry_wsdl_callback',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tmgmt_poetry_permission() {
  return array(
    'manage feature dgt connector' => array(
      'title' => t('Configure DGT connector'),
    ),
  );
}

/**
 * Implements hook_nexteuropa_poetry_notification_translation_received().
 */
function tmgmt_poetry_nexteuropa_poetry_notification_translation_received($message) {
  $subscriber = new Notification();
  $subscriber->translationReceived($message);
}

/**
 * Implements hook_nexteuropa_poetry_notification_status_updated().
 */
function tmgmt_poetry_nexteuropa_poetry_notification_status_updated($message) {
  $subscriber = new Notification();
  $subscriber->statusUpdated($message);
}
