<?php
/**
 * Implements hook_node_access().
 */

/*
function multisite_drupal_access_node_access($node, $op, $account) {
  if (is_string($node)) {
    return NODE_ACCESS_IGNORE;
  }
  
  if($node->type == "community") {
    return NODE_ACCESS_ALLOW; // allow any users to view a community node
  }
 
  return NODE_ACCESS_IGNORE;
}
*/

/**
 * Implements hook_node_grants().
 */
/*
function multisite_drupal_access_node_grants($account, $op) {
  $grants = array();
  
  // allow tempopary any users to view private communities on specific url
  if(arg(0) == 'communities_directory') {
    $group_type = 'node';   
    $query = new EntityFieldQuery();
    $return = $query
      ->entityCondition('entity_type', $group_type)
      ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
      ->addMetaData('account', user_load(1))
      ->execute();
      
    if(!$return)
      return;
      
    $groups = array_keys($return[$group_type]);

    if ($op == 'view' && $groups) {
      foreach ($groups as $gid) {
        $realm = OG_ACCESS_REALM . ':' . $group_type;
        $grants[$realm][] = $gid;
      }
    }
  }
  return $grants;
}
*/


/**
 * Implements hook_node_access_records().
 */
function multisite_drupal_access_node_access_records($node) {
  $grants = array();

  // Give the right for any users to view community type.
  if ($node->type == 'community') {
    $group_type = 'node';
    $grants[] = array(
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

  // Allow users to see their own unpublished contents in OG group.
  if ($node->uid && (empty($node->status) && $groups = og_get_entity_groups('node', $node))) {
    foreach ($groups['node'] as $gid) {
      $grants[] = array(
        'realm' => "multisite_drupal_access_og_view_own_unpublished_" . $node->uid,
        'gid' => $gid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 10,
      );
    }
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function multisite_drupal_access_node_grants($account, $op) {
  $grants = array();
  // Get all OG Group IDs the user is allowed to view unpublished nodes in.
  $entities = og_get_entity_groups();
  foreach ($entities['node'] as $entity_id) {
    if ($account->uid && og_user_access('node', $entity_id, 'view own unpublished content') || og_user_access('node', $entity_id, 'view all unpublished content')) {
      $grants['multisite_drupal_access_og_view_own_unpublished_' . $account->uid][] = $entity_id;
    }
  }

  return $grants;
}

/**
 * Implements hook_og_permission().
 */
function multisite_drupal_access_og_permission() {
  // Add OG permission to view unpublished nodes.
  return array(
    'view own unpublished content' => array(
      'title' => t('View own unpublished content'),
      'description' => t("Allow user to see unpublished content within the group."),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}
