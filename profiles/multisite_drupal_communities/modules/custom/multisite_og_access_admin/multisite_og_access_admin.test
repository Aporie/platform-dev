<?php

/**
 * Tests the functionality of the OG Button module.
 */
class OGAccessAdminTestCase extends DrupalWebTestCase {
  protected $users;
  protected $groups;
  protected $content;
  
  public static function getInfo() {
    return array(
      'name' => 'Multisite organic groups access admin',
      'description' => 'Ensure that the organic groups access admin module functions properly.',
      'group' => 'Organic groups',
    );
  }

  public function setUp() {
    parent::setUp(array(
    	'multisite_og_access_admin', 
    	'og'
    ));
    
    // Create a group type and add the og fields
    $this->drupalCreateContentType(array(
    	'type' => 'groups',
      'name' => 'groups', 
    ));
    og_create_field(OG_GROUP_FIELD, 'node', 'groups');
    og_create_field(OG_ACCESS_FIELD, 'node', 'groups');
    og_create_field(OG_ACCESS_ADMIN_FIELD, 'node', 'groups');        
        
    // Create some group content types and add the og fields
    $this->drupalCreateContentType(array(
    	'type' => 'group_content_a',
      'name' => 'group_content_a', 
    ));
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'group_content_a');
    og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', 'group_content_a');        

    $this->drupalCreateContentType(array(
    	'type' => 'group_content_b',
      'name' => 'group_content_b', 
    ));
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'group_content_b');
    og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', 'group_content_b');
        
    $this->drupalCreateContentType(array(
    	'type' => 'group_content_c',
      'name' => 'group_content_c', 
    ));
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'group_content_c');
    og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', 'group_content_c');
        
    // Create a user who can edit groups.
    $this->users['admin'] = $this->drupalCreateUser(array(
      'access content',
      'administer blocks',
      'administer nodes',
      'administer users',
			'administer content types',
      'edit any groups content',
      'create groups content',
      'edit any group_content_a content',                 
      'edit any group_content_b content',                  
			'create group_content_a content',
			'create group_content_b content',                  
      'administer group',
    ));
    $this->drupalLogin($this->users['admin']);    
    
    // Create some groups 
    $settings = array();
    $settings['type'] = 'groups';
    $settings['title'] = 'Group A';
    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $settings[OG_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_DEFAULT;
    $settings[OG_ACCESS_ADMIN_FIELD][LANGUAGE_NONE][0]['value'] = OG_ACCESS_ADMIN_FIELD_ADMINS;   
    $this->groups['groupa'] = $this->drupalCreateNode($settings);
    
    $settings = array();
    $settings['type'] = 'groups';
    $settings['title'] = 'Group B';
    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $settings[OG_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_DEFAULT;
    $settings[OG_ACCESS_ADMIN_FIELD][LANGUAGE_NONE][0]['value'] = OG_ACCESS_ADMIN_FIELD_ADMINS;   
    $this->groups['groupb'] = $this->drupalCreateNode($settings);

    // Create a user who can edit group_content_a and group_content_b
    $this->users['usera'] = $this->drupalCreateUser(array(
      'access content',
      'edit own group_content_a content',                 
      'edit own group_content_b content',
      'create group_content_a content',
			'create group_content_b content',   	
    ));
    
    // Associate usera to the groupa.
    $group = og_get_group('node',  $this->groups['groupa']->nid);
    og_group($group->gid, array(
    	'entity' => $this->users['usera']
    ));

    // Change permissions for authenticated member.
    $roles = array_flip(og_get_global_roles());
    $rid = $roles[OG_AUTHENTICATED_ROLE];
    $permissions = array(
    	'update own group_content_a content' => 1,
      'delete own group_content_a content' => 1,    	
    );
    og_role_change_permissions($rid, $permissions);    
    
    $this->drupalLogout();
  }

  /**
   * This test will test if:
   * - the access admin field is available within the node object
   * - test the value can be changed and saved
   */
  public function testOGAccessAdminTest1Module() {
    global $user;
    
    // Login as admin
    $this->drupalLogin($this->users['admin']);
    
    // Test if we can pick it on group creation  
    $node = node_load($this->groups['groupa']->nid);
    $this->verbose(print_r($node, true));
    $value = $node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value'];
    $this->assertEqual($value, OG_ACCESS_ADMIN_FIELD_ADMINS, t('The field "OG_ACCESS_ADMIN_FIELD_ADMINS" is available in the group node object and set to '.$value. ' Expected:'.OG_ACCESS_ADMIN_FIELD_ADMINS));

    // Change its value
    $node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value'] = OG_ACCESS_ADMIN_FIELD_USERS;
    node_save($node);
    
    // Test if the value is changed
    $node = node_load($this->groups['groupa']->nid);
    $value = $node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value'];
    $this->assertEqual($value, OG_ACCESS_ADMIN_FIELD_USERS, t('The value is set to '.$value.' Expected: '.OG_ACCESS_ADMIN_FIELD_USERS));
    // Change its value back to the original
    $node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value'] = OG_ACCESS_ADMIN_FIELD_ADMINS;
    node_save($node);    
  }
  
  /**
   * This test will verify:
   * - the field and its options are available on group node creation
   * - the field and its options are available on group node editing
   */
  public function testOGAccessAdminTest2Module() {
    global $user;
  
    // Login as admin user
    $this->drupalLogin($this->users['admin']);
  
    // Test if we can pick it on group creation
    $this->drupalGet('node/add/groups');
    $this->assertText(t('Group admin audience/visibility'), t('Found the \'Group admin audience/visibility\' field'));
    $this->assertText(t('Any author/editor of the group.'), t('Found the \'Any author/editor of the group.\' option'));
    $this->assertText(t('This group administrators only.'), t('Found the \'This group administrators only\' option'));
  
    // Test if we can pick it on group edit
    $this->drupalGet('node/'.$this->groups['groupa']->nid.'/edit');
    $this->assertText(t('Group admin audience/visibility'), t('Found the \'Group admin audience/visibility\' field'));
    $this->assertText(t('Any author/editor of the group.'), t('Found the \'Any author/editor of the group.\' option'));
    $this->assertText(t('This group administrators only.'), t('Found the \'This group administrators only\' option'));
  }
  
  /**
   * This test will verify:
   * - if the access/visibility fields are not hidden when an admin user edits a group content item
   */
  public function testOGAccessAdminTest3Module() {
    global $user;
    
    // Login as admin
    $this->drupalLogin($this->users['admin']);
    
    // Tests if the access/visibility fields are not hidden when an admin user edits a group content item
    $this->drupalGet('node/add/group-content-a', array(
   		'query'=>array(
     		'gids_node[]' => $this->groups['groupa']->nid
      )
    ));    
    $this->assertField('edit-group-audience-und', t('Audience field was found'));
    $this->assertField('edit-group-content-access-und', t('Content access (visibility) field was found'));

    // Create some content
    $edit = array (
        	'title' => 'A new content by admin',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Check the node was created succesfully
    $node = $this->drupalGetNodeByTitle('A new content by admin');
    $this->assertTrue($node, t('Group content was created and saved by admin user'));
    if($node){
      $value = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, $this->groups['groupa']->nid, t('The value of the group audience is set to '.$value.' Expected: '.$this->groups['groupa']->nid));
     
    if($node){
      $value = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, OG_CONTENT_ACCESS_DEFAULT, t('The value of the visibility is set to '.$value.' Expected: '.OG_CONTENT_ACCESS_DEFAULT));
    
    // Edit the content, the settings should remain the same
    $this->drupalGet('node/'.$node->nid.'/edit');
    $edit = array (
            	'body[und][0][value]' => 'Some altered body text',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Check the node was created succesfully
    $node = $this->drupalGetNodeByTitle('A new content by admin');
    if($node){
      $value = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, $this->groups['groupa']->nid, t('The value of the group audience is unchanged and set to '.$value.' Expected: '.$this->groups['groupa']->nid));
     
    if($node){
      $value = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, OG_CONTENT_ACCESS_DEFAULT, t('The value of the visibility is unchanged and set to '.$value.' Expected: '.OG_CONTENT_ACCESS_DEFAULT));
    
  
  }

  /**
   * This test verifies:
   * - the fields are hidden when a non admin users edits a group content
   * - when content is created by this user, the audience is set to the group context that was given.
   */
  public function testOGAccessAdminTest4Module() {
    global $user;
    
    // Login as non-admin
    $this->drupalLogin($this->users['usera']);
  
    // Tests if the access/visibility fields are hidden when a non admin user edits a group content item
    $this->drupalGet('node/add/group-content-a', array(
   		'query'=>array(
     		'gids_node[]' => $this->groups['groupa']->nid
    )
    ));
  
    $this->assertNoField('edit-group-audience-und', t('Audience field is not visible on the edit page'));
    $this->assertNoField('edit-group-content-access-und', t('Content access (visibility) field is not visible on the edit page'));
        
    // Create some content
    $edit = array (
    	'title' => 'A new content by usera',
    );
    $this->drupalPost(NULL, $edit, t('Save'));   
    
    // Check the node was created succesfully
    $node = $this->drupalGetNodeByTitle('A new content by usera');
    $this->assertTrue($node, t('Group content was created and saved by usera'));
    if($node){
      $value = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, $this->groups['groupa']->nid, t('The value of the group audience is set to '.$value.' Expected: '.$this->groups['groupa']->nid));
       
    if($node){
      $value = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];      
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, OG_CONTENT_ACCESS_DEFAULT, t('The value of the visibility is set to '.$value.' Expected: '.OG_CONTENT_ACCESS_DEFAULT));
    
    // Edit the content, the settings should remain the same
    $this->drupalGet('node/'.$node->nid.'/edit');        
    $edit = array (
        	'body[und][0][value]' => 'Some altered body text',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Check the node was created succesfully
    $node = $this->drupalGetNodeByTitle('A new content by usera');
    if($node){
      $value = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, $this->groups['groupa']->nid, t('The value of the group audience is unchanged and set to '.$value.' Expected: '.$this->groups['groupa']->nid));
     
    if($node){
      $value = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];
    } else {
      $value = 'node not found';
    }
    $this->assertEqual($value, OG_CONTENT_ACCESS_DEFAULT, t('The value of the visibility is unchanged and set to '.$value.' Expected: '.OG_CONTENT_ACCESS_DEFAULT));
  }
 
}