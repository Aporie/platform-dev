<?php

/**
 * @file
 * Tests for communities.module.
 */

/**
 * Defines a base class for testing the "communities" module.
 */
class survey_ogWebTestCase extends DrupalWebTestCase {

  protected $privileged_user;

  protected $profile = 'multisite_drupal_communities';

  public static function getInfo() {
    return array(
        'name' => 'survey_og',
        'description' => 'Test the communities feature.',
        'group' => 'Multisite - Communities',
    );
  }

  function setUp() {
    $this->privileged_user = new stdClass();
    // Enable modules
    parent::setUp();

    // Login a user that has access to the content sync server admin settings
    $this->privileged_user = $this->drupalCreateUserWithRole("administrator");
    $this->drupalLogin($this->privileged_user);
  }

  function testCommunitiesLink() {

    // check the communities directory URL
    $this->drupalGet('communities_directory');
    //OK code 200
    $this->assertResponse(200);
    //Check the presence of HTML class: view-communities-directory
    $this->assertRaw('view-communities-directory', 'Communities enabled and accessible.');


    // COMUNITY CREATION

    //Create content of community type
    $settings = array(
      'type' => 'community',
      'title' => 'Sample Community',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('community/sample-community');
    $this->assertRaw('Sample Community', t('Community created.'));


    // LINK CREATION in the created community

    module_enable(array("survey_og"));
    $this->drupalGet('community/sample-community');
    $this->assertTrue(module_exists('survey_og'), t('survey_og feature enabled.'));
    $this->assertRaw('node/add/webform', t('Link to create survey available'));
    $this->assertRaw('community/Sample-Community/survey', t('Link to the survey page available.'));

    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $node->nid;

    $settings = array(
      'type' => 'webform',
      'title' => 'Survey Title',
      'body' => array(LANGUAGE_NONE => array(array('Link body'))),
      'og_group_ref' => $field,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('survey Node created: ' . '</pre>'.print_r($node, TRUE).'</pre>');
    $this->verbose('survey Node created: ' . '</pre>'.print_r($settings['title'], TRUE).'</pre>');
/*
    $this->drupalGet("community/sample-community/{$node->nid}/webform");
    $this->assertResponse(200);
    $this->assertRaw('page-node-webform', 'Webform is accesible to current user.');
    $this->assertRaw(t('Add'), 'Add more fields button is present.');
    $edit = array();
    $edit['add-name'] = $this->randomName(8);

    $this->drupalPost("node/{$node->nid}/webform/components", $edit, t('Add'));
    $this->drupalPost("node/{$node->nid}/webform/components/new/textfield", $edit, t('Save component'));
    $this->drupalPost("node/{$node->nid}/webform/components", $edit, t('Save'));
*/
    //Access Link Page was displayed
    $this->drupalGet('community/sample-community/survey/survey-title');
    $this->assertResponse(200);
    //Chech the presence of h1
    $elements = $this->xpath("//h1");
    $this->assertTrue(isset($elements[0]), t('The survey page contains a h1 title'));
    //$this->assertRaw('survey Title', t('Title found.'));
    $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title");
    $this->assertRaw('Webform', t('Link to Webform found.'));

  }

  /**
   * Creates a user with the give role.
   * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}
