<?php
/**
 * @file
 * Code for the communities feature.
 */

include_once('communities.features.inc');
include_once('communities_moderation.inc');

/*
* hook_views_pre_render
*/
function communities_views_pre_render(&$view) {
  global $user;
  
  if($view->name == 'communities_directory' || $view->name == 'communities_directory_my') {
    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');
    $output = '';
    
    $i = 0;
    $len = count($alphabet);
    foreach($alphabet as $letter) {
      if(count(arg()) > 1)
        $url = arg(0)."/".arg(1)."/".$user->uid."/".$letter;
      else
        $url = arg(0)."/".$letter;
      
      if ($i == 0) { // first
        $output .= l($letter,$url,array('attributes' => array('type' => 'small', 'action_bar' => 'first', 'btn_group' => 'first')));
      } else if ($i == $len - 1) { // last
        $output .= l($letter,$url,array('attributes' => array('type' => 'small', 'btn_group' => 'last')));
      } else {
        $output .= l($letter,$url,array('attributes' => array('type' => 'small')));
      }
      $i++;
    }
    
    if(user_access('create community content'))  {
      $output.= l(t('Create a new community'),'node/add/community',array('attributes' => array('type' => 'add', 'action_bar' => 'last', 'btn_group' => 'single')));
    }
    
    $view->header['area']->options['content'] = $output;
  }
}



/*
* hook_init
*/
function communities_init() {
  drupal_add_css(drupal_get_path('module', 'communities') . '/communities.css');
  
  /*
  // set og context on comunities views
  if(arg(0) == 'community') {
    $alias = drupal_get_normal_path("community/".str_replace(" ","-",arg(1)));
    $param = explode("/", $alias);
    $group = og_get_group('node', $param[1]);
    og_context($group);
  }
  // set og context on surveys results analysis
  if(arg(0) == 'survey_analysis') { 
    $node = node_load(arg(1));
    $gid = $node->group_audience['und'][0]['gid'];
    og_context(og_load($gid));    
  }
  
  if(arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'group' || arg(2) == 'moderation')) {
    $group = og_get_group('node', arg(1));
    if(isset($group))
      og_context($group);
  }
  
  if(arg(0) == 'group' && arg(1) == 'node' && is_numeric(arg(2))) {
    $group = og_get_group('node', arg(2));
    if(isset($group))
      og_context($group);
  }
  */
 
}


  
/*
* _to_arg function
*/


function group_name_to_arg($arg=null) {
  $context = og_context();
  if(isset($context['gid'])) {
    $node = node_load($context['gid']);
    return str_replace(" ","-",$node->title);
  }
  else
    return 'none';
}



/*
* _load function
*/
function group_name_load($arg) {
  if($arg == 'none')
    return 0;
  $alias = drupal_get_normal_path("community/".str_replace(" ","-",$arg)); // get real path to get node id
  $param = explode("/", $alias);
  $group = og_get_group('node', $param[1]); // load community
    
  //og_context($group);
  
  return $group->gid;
}





/*
* hook_menu
*/
function communities_menu() {
  $items['community/%group_name/view'] = array(
    //'title arguments' => array(1),
  //'title callback' => '_communities_title_item',
    'title' => t('Home page'),
    'page arguments' => array(1),
    'access callback' => TRUE,
    'page callback' => '_redirection',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => -10,
  );
  return $items;
}

/*
* redirection to a community page with the gid $arg
*/
function _redirection($arg) {
  drupal_goto('community/'.$arg);
}
  
/*
* dynalically change menu item title
*/

function _communities_title_item($arg) {
  $n = db_select('og', 'og')
    ->fields('og', array('etid'))
    ->condition('gid', $arg, '=')
    ->condition('entity_type', 'node', '=')
    ->execute()
    ->fetchAssoc();
  if(isset($n['etid']))  {
    $node = node_load($n['etid']);
    return $node->title." homepage";
  }
  else
    return null;
}



/*
* hook_block_view_alter
*/
function communities_block_view_alter(&$data, $block) {
  if($block->delta == 'menu-communities-menu') {
    $context  = og_context();
    if(isset($context['gid'])) {
      $node = node_load($context['gid']);
      $data['subject'] = $node->title;
    }
  }
}


/*
* hook_node_view
* 
* when a user request a membership to a community, he's request is in state 'pending'. Since he's request is still in pending state, when he's view the homepage 
* of this community a message is display to inform him.
*/
/*
function communities_node_view($node, $view_mode, $langcode) {
  if($node->type == 'community') {
    $group = og_get_group('node', $node->nid);
    $check_pending_state = og_is_member($group->gid, 'user', NULL, array(OG_STATE_PENDING));
    if($check_pending_state) {
      drupal_set_message(t("Your membership to this group is pending and waiting for community manager's approval"));
    }
  }
}
*/
