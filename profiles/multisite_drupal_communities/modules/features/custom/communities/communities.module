<?php
/**
 * @file
 * Code for the communities feature.
 */

include_once('communities.features.inc');
include_once('communities_moderation.inc');

/*
* hook_views_pre_render
*/
function communities_views_pre_render(&$view) {
  global $user;

  if ($view->name == 'communities_directory' || $view->name == 'communities_directory_my') {
    // add alphabetical index
    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
    $output = '';

    $i = 0;
    $len = count($alphabet);
    foreach ($alphabet as $letter) {
      if(arg(1) == 'my')
        $url = arg(0)."/my/".$letter;
      else
        $url = arg(0)."/".$letter;

      if ($i == 0) { // first
        $output .= l($letter, $url, array('attributes' => array('type' => 'small', 'action_bar' => 'first', 'btn_group' => 'first', 'class' => array('hidden-phone'))));
      }
      elseif ($i == $len - 1) { // last
        $output .= l($letter, $url, array('attributes' => array('type' => 'small', 'btn_group' => 'last', 'class' => array('hidden-phone'))));
      }
      else {
        $output .= l($letter, $url, array('attributes' => array('type' => 'small', 'class' => array('hidden-phone'))));
      }
      $i++;
    }

    // add create community button
    if (user_access('create community content')) {
      $output .= l(t('Create a new community'), 'node/add/community', array('attributes' => array('type' => 'add', 'action_bar' => 'last', 'btn_group' => 'single')));
    }

    // update view header
    $view->header['area']->options['content'] = $output;

    // add picture for private communities
    foreach ($view->result as $row) {

      if (isset($row->field_group_access[0]['raw']['value']) && $row->field_group_access[0]['raw']['value'] == 1) { // private commmunity
        $row->field_body[0]['rendered']['#markup'] = '<i class="icon-lock"></i> ' . $row->field_body[0]['rendered']['#markup'];
      }
    }
  }
}

/*
* hook_init
*/
function communities_init() {
  drupal_add_css(drupal_get_path('module', 'communities') . '/communities.css');

  // set og context on comunities views
  if (arg(0) == 'community') {
    $alias = drupal_get_normal_path("community/" . str_replace(" ", "-", arg(1)), 'en');
    $param = explode("/", $alias);
    $group = node_load($param[1]);
    if (og_is_group('node', $group->nid))
      og_context('node', $group);
  }

  /*
  // set og context on surveys results analysis
  if(arg(0) == 'survey_analysis') {
    $node = node_load(arg(1));
    $gid = $node->group_audience['und'][0]['gid'];
    og_context(og_load($gid));
  }

  if(arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'group' || arg(2) == 'moderation')) {
    $group = og_get_group('node', arg(1));
    if(isset($group))
      og_context($group);
  }

  if(arg(0) == 'group' && arg(1) == 'node' && is_numeric(arg(2))) {
    $group = og_get_group('node', arg(2));
    if(isset($group))
      og_context($group);
  }
  */

}



/*
* _to_arg function
*/


function group_name_to_arg($arg=NULL) {
  $context = og_context();
  if (isset($context['gid'])) {
    $node = node_load($context['gid']);
    return str_replace(" ", "-", $node->title);
  }
  else
    return 'none';
}


/*
* _load function
*/
function group_name_load($arg) {
  if ($arg == 'none') {
    return 0;
  }
  
  // get real path to get node id
  $alias = drupal_get_normal_path("community/" . str_replace(" ", "-", $arg), 'en'); 
  
  $param = explode("/", $alias);
  $group = node_load($param[1]); // load community

  //og_context($group);

  return $group->nid;
}



/*
* hook_menu
*/
function communities_menu() {
  $items['community/%group_name/view'] = array(
    //'title arguments' => array(1),
    //'title callback' => '_communities_title_item',
    'title' => 'Home page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'page callback' => '_redirection',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => -10,
  );

  $items['community/%group_name/article'] = array(
    'title' => 'Articles',
    'page callback' => 'views_page',
    'page arguments' => array('articles_list', 'page', 1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );

  return $items;
}

/*
* redirection to a community page with the gid $arg
*/
function _redirection($arg) {

  drupal_goto('community/' . group_name_to_arg($arg));

}

/*
* dynalically change menu item title
*/

function _communities_title_item($arg) {
  $n = db_select('og', 'og')
    ->fields('og', array('etid'))
    ->condition('gid', $arg, '=')
    ->condition('entity_type', 'node', '=')
    ->execute()
    ->fetchAssoc();
  if (isset($n['etid']))  {
    $node = node_load($n['etid']);
    return $node->title . " homepage";
  }
  else
    return NULL;
}


/*
* hook_block_view_alter
*/
function communities_block_view_alter(&$data, $block) {
  if ($block->delta == 'menu-communities-menu') {
    $context  = og_context();
    if (isset($context['gid'])) {
      $node = node_load($context['gid']);
      $data['subject'] = $node->title;
    }
    else
      $data['content'] = array();
  }
}

/*
* hook_node_view
*
* when a user request a membership to a community, he's request is in state 'pending'. Since he's request is still in pending state, when he's view the homepage
* of this community a message is display to inform him.
*/
function communities_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'community') {
    $context = og_context();
    $check_pending_state = og_is_member('node', $context['gid'], 'user', NULL, array(OG_STATE_PENDING));
    if ($check_pending_state) {
      drupal_set_message(t("Your membership to this group is pending and waiting for community manager's approval"));
    }
  }
}

