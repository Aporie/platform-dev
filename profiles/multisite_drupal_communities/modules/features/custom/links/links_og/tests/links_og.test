<?php

/**
 * @file
 * Tests for PROJECTFEATURE_links_og.module.
 * ECWeb MULTISITE QA
 */

/**
 * Test OG Links
 */
class Multisite_links_ogQAWebTestCase extends DrupalWebTestCase {

  protected $community_user;
  protected $admin_user;
  protected $contributor_user;
  protected $profile = 'multisite_drupal_communities';

  public static function getInfo() {
    return array(
        'name' => 'links OG',
        'description' => 'Test the links_og features to ensure it follows QA requirements.',
        'group' => 'Multisite - Communities',
    );
  }

  function setUp() {
    parent::setUp(array(
    ));
   $this->admin_user = $this->drupalCreateUserWithRole("administrator");
    $this->contributor_user = $this->drupalCreateUserWithRole("contributor");
  }

  function testCommunitiesInstall() {

    // check the communities directory URL
    $this->drupalGet('communities_directory');
    //OK code 200
    $this->assertResponse(200);
    //Check the presence of HTML class: view-communities-directory
    $this->assertRaw('view-communities-directory', 'Communities enabled and accessible.');


    // COMUNITY CREATION
    //Login as admin
    $this->drupalLogin($this->admin_user);
    //Create content of community type
    $sampleCommunity = array(
      'type' => 'community',
      'title' => 'Sample Community',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($sampleCommunity);
    //Logout
    //Login as group member
    //$this->drupalLogout();
    //$this->drupalLogin($this->contributor_user);

    //Create a link
    $sampleLink = array(
      'type' => 'link',
      'title' => 'A Sample Link',
      'link' => 'http://www.my.url.com',
      'body' => array(LANGUAGE_NONE => array(array('Link body'))),
    );
    $oglink_created = $this->drupalCreateNode($sampleLink);

    //Access Link
    $this->drupalGet('community/sample-community/links/sample-link');
    $this->assertResponse(200);
    $this->assertRaw('Sample Community', t('Community created found in my communities.'));

    //This if we have a valid link inside
    $this->clickLink(t('http://www.my.url.com'));
    $this->assertResponse(200);
    //$this->assertRaw('Sample Community', t('Community created found in my communities.'));
  }





  /**
  * Creates a user with the give role.
  **/
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }






}


