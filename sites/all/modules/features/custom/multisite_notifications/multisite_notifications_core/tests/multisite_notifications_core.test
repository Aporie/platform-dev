<?php
/**
 * @file
 * Test case for testing the block example module.
 */
class anonymousNotitication extends DrupalWebTestCase {
  protected $administrator;

  public static function getInfo() {
    return array(
      'name' => 'Anonymous Notification',
      'description' => 'Test the configuration options and block created by Notifications module.',
      'group' => 'AAA',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('multisite_notifications_core');
    $this->administrator = $this->drupalCreateUser(array(
        'access administration pages',
        'access all views',
        'access content',
        'administer user subscriptions',
        'bulk-administer user subscriptions',
        'administer site configuration',
        'create article content',
        'administer blocks',
        ));
    $this->drupalLogin($this->administrator);
  }

  /**
   * Login user, create an example node, and test block functionality through
   * the admin and user interfaces.
   */
  function testSubscriptionBlockBasic() {
    // Login the admin user.

    // Verify that new content is shown


    // Create a new block and make sure it gets uppercased.
    $post = array(
      'title' => t('Subscribe to new articles'),
      'info' => t('configurable block to be uppercased'),
      'body[value]' => drupal_render(drupal_get_form('multisite_notifications_core_form')),
      'regions[bartik]' => 'sidebar_first',
    );
    $this->drupalPost('admin/structure/block/add', $post, t('Save block'));

    // Enable the search block on top of sidebar_first.
    $block_options = array(
      'blocks[multisite_notifications_core_notification_block][region]' => 'sidebar_first',
      'blocks[multisite_notifications_core_notification_block][weight]' => -9,
    );
    $this->drupalPost('admin/structure/block', $block_options, t('Save blocks'));
    $this->assertRaw(t('The block settings have been updated.'), 'The block settings have been updated.');

    $this->assertFieldByName('mail', 'sidebar_first', 'Subscription block is enabled in the first sidebar successfully verified.');
  }

 function testValidationFields() {
   $this->drupalGet('<front>');
    //Test validation against wrong email address
    $wrong_data = array('search_block_form' => 'InvalidMailwrongserver.com');
    $this->drupalPost('node', $wrong_data, t('Subscribe'));
    $this->assertRaw(t(''), '');

    //Test anonymous subscription
    $correct_data = array('search_block_form' => 'Ovidiu.FARCAS@ext.ec.europa.eu');
    $this->drupalPost('node', $correct_data, t('Subscribe'));
    $this->assertRaw(t(''), '');

    //Test the fill in of an existing address
    $correct_data = array('search_block_form' => 'Ovidiu.FARCAS@ext.ec.europa.eu');
    $this->drupalPost('node', $correct_data, t('Subscribe'));
    $this->assertRaw(t('You are already a subscriber!'), 'Validation against subscription with an existing email OK');

    $wrong_data = array('search_block_form' => '');
    $this->drupalPost('node', $wrong_data, t('Unsubscribe'));
    $this->assertRaw(t('You are not yet a subscriber.'), 'Unsubscribe on empty field');

 }
}

class multisiteNotification extends DrupalWebTestCase {

  protected $administrator;
  protected $anonymous;

  public static function getInfo() {
    return array(
        'name' => 'Notification',
        'description' => 'Notification Feature. 1.0',
        'group' => 'AAA',
        );
  }

  function setUp() {
    parent::setUp(array(
        'multisite_notifications_core',
    ));

    $this->visitor = $this->drupalCreateUser(array(
        'access content',
        'subscribe to all content types',
        'subscribe to content',
        'subscribe to content types',
        'subscribe to taxonomy terms',
        'suspend own subscriptions',
    ));

    $this->administrator = $this->drupalCreateUser(array(
        'access administration pages',
        'administer user subscriptions',
        'access content',
        'bulk-administer user subscriptions',
        'administer site configuration',
    ));
    $this->drupalLogin($this->administrator);
  }

  function testNotifications() {

    //access notifications page
    $node1 = $this->drupalCreateNode(array('type' => 'page', 'title' => 'page to for node 1'));
    $node2 = $this->drupalCreateNode(array('type' => 'page', 'title' => 'page to for node 2'));

    $edit['url'] = 'admin/config/system/subscriptions';
    $this->drupalGet($edit['url']);
    $this->assertResponse(array(200), format_string('Settings Page: !url is accessible', array('!url' => $edit['url'])));
    $this->assertRaw('subscriptions-settings-form', 'Settings Form is present');
    $settings = array(
        'subscriptions_blocked_nodes' => '1',
    );
    $this->drupalPost(NULL, $settings, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), 'Forms setttings saved: Node 1 should be blocked.');


    $this->drupalGet('node/'.$node1->nid);
    $this->assertNoRaw('subscriptions[1]', 'Option to subscribe to the page is not available');
    $this->assertNoRaw('subscriptions[2]', 'Option to subscribe to the page content type is not available');

    $this->drupalGet('node/'.$node2->nid);
    $this->assertRaw('subscriptions[1]', 'Option to subscribe to the page is present');
    $this->assertRaw('subscriptions[2]', 'Option to subscribe to the page content type is present');

    $settings = array(
        'subscriptions[2]' => 'checked',
    );
    $this->drupalPost(NULL, $settings, t('Save'));
    $this->drupalLogout();

    $this->drupalGet('node/'.$node2->nid);
    $this->assertNoRaw('subscriptions[1]', 'Option to subscribe to the page is not available to anonymous users.');
    $this->assertNoRaw('subscriptions[2]', 'Option to subscribe to the page content type is not available to anonymous users.');

    $this->drupalLogin($this->visitor);
    $this->drupalGet('node/'.$node2->nid);

    $this->assertNoFieldChecked('edit-subscriptions-1', 'The user has not subscribed to this content.');
    $this->assertNoFieldChecked('edit-subscriptions-2', 'The user has not subscribed to this content type.');
  }

}

/**
 * Defines a base class for testing the "Splash screen" module.
 */
class Multisite_multisite_notifications_QAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
        'name' => 'multisite_notifications QA tests',
        'description' => 'Test the multisite_notifications features to ensure it follows QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}