<?php

/**
 * @file
 * Tests for multisite Notifications.module.
 * ECWeb MULTISITE QA
 */
class multisiteNotification extends DrupalWebTestCase {

  protected $administrator;
  protected $anonymous;

  public static function getInfo() {
    return array(
        'name' => 'Multisite notification Functional Test tests',
        'description' => 'Multisite notification Functional Test. 1.0',
        'group' => 'Multisite - User feedback',
        );
  }

  function setUp() {
    parent::setUp(array(
        'multisite_notifications_core',
    ));

    $this->anonymous = $this->drupalCreateUser(array(
        'access content',
        'subscribe to all content types',
        'subscribe to content',
        'subscribe to content types',
        'subscribe to taxonomy terms',
        'suspend own subscriptions',
    ));

    $this->administrator = $this->drupalCreateUser(array(
        'access administration pages',
        'administer user subscriptions',
        'access content',
        'bulk-administer user subscriptions',
        'administer site configuration',
    ));
    $this->drupalLogin($this->administrator);
  }

  function testNotifications() {

    //access notifications page

    $edit['url'] = 'admin/config/system/subscriptions';
    $this->drupalGet($edit['url']);
    $this->assertResponse(array(200), format_string('Settings Page: !url is accessible', array('!url' => $edit['url'])));
    $this->assertRaw('subscriptions-settings-form', 'Settings Form is present');
  }


}

/**
 * Defines a base class for testing the "Splash screen" module.
 */
class Multisite_multisite_notifications_QAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
        'name' => 'multisite_notifications QA tests',
        'description' => 'Test the multisite_notifications features to ensure it follows QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}
