<?php

/**
 * @file
 * readspeaker_hl Tests
 */
class ReadSpeakerTestCase extends DrupalWebTestCase {
  // $admin_user is a user with permission to administer blocks.
  protected $admin_user;
  protected $default_user;

  public static function getInfo() {
    return array(
      'name' => 'ReadSpeaker administration',
      'description' => 'Multisite readspeaker tests',
      'group' => 'ReadSpeaker',
    );
  }

  public function setUp() {
    parent::setUp(array('multisite_readspeaker'));
    // Create users.
    $this->admin_user   = $this->drupalCreateUser(array('administer blocks', 'administer multisite_readspeaker'));
    $this->default_user = $this->drupalCreateUser(array('display multisite_readspeaker'));
  }

  public function testPermission() {
    $data = module_invoke('multisite_readspeaker', 'permission');
    $this->assertTrue(is_array($data), t('Permission hook returns array.'));
    $this->assertTrue(array_key_exists('administer multisite_readspeaker', $data), t('Permission is as expected.'));
    $this->assertTrue(array_key_exists('display multisite_readspeaker', $data), t('Permission is as expected.'));
  }

  /**
   * Tests the functionality of the readspeaker_hl.
   */
  public function testReadSpeakerBlock() {
    $this->drupalLogin($this->admin_user);
    $testnode = $this->drupalCreateNode(array('type' => 'page'));
    $edit = array(
      'readspeaker_accountid' => '12345',
      'readspeaker_readid' => 'block-system-main',
      'readspeaker_langid' => 'en',
      'readspeaker_prefer_uk' => TRUE,
      'readspeaker_nodes' => array('page'),
    );
    $this->drupalPost('admin/config/content/multisite_readspeaker', $edit, t('Save configuration'));

    $edit_blocks = array('blocks[readspeaker_player][region]' => 'content', 'blocks[system_main][region]' => 'content');
    $this->drupalPost('admin/structure/block', $edit_blocks, t('Save blocks'));

    $this->drupalGet('node/' . $testnode->nid);
    $this->assertRaw('block-readspeaker-hl-readspeaker-player');
    $this->assertRaw('class="rsbtn_text"');
    $this->assertRaw('12345');
  }
}
