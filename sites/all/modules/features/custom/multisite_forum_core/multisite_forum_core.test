<?php

/**
 * Test Multisite Forum features to ensure it follows QA requirements.
 */
class MultisiteForumCoreQAWebTestCase extends DrupalWebTestCase {

  protected $profile = 'multisite_drupal_standard';
  var $public_files_directory = NULL;

  public static function getInfo() {
    return array(
        'name' => 'Multisite Forum Core QA tests',
        'description' => 'Test Multisite Forum Core feature to ensure it follows QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  function testTaxonomyForum() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(MULTISITE_FORUM_TAXO_NAME);
    $status = isset($vocabulary) && $vocabulary !== NULL;
    $this->assert($status, 'Taxonomy "forum" correctly added');
  }

  function testContentTypeDiscussion() {
    $types = node_type_get_types();
    $status = isset($types[MULTISITE_FORUM_CT_NAME]);
    $this->assert($status, 'Content type "discussion" corretly added');

    $field = field_info_field('taxonomy_forum');

    $status = isset($field['bundles']['node']) && in_array(MULTISITE_FORUM_CT_NAME, $field['bundles']['node']);
    $this->assert($status, 'Field taxonomy_forum correctly added to Discussion content type');

    $field = field_info_field('group_content_access');
    $status = isset($field['bundles']['node']) && in_array('forum', $field['bundles']['node']);
    $this->assert($status, 'Field group_content_access correctly added to Forum topic content type');
  }

  function testForumTopicCreation() {

    $this->user1 = $this->drupalCreateUser();
    $this->drupalLogin($this->user1);

    $vocabulary = taxonomy_vocabulary_machine_name_load(MULTISITE_FORUM_TAXO_NAME);

    $term = (object) array(
                'vid' => $vocabulary->vid,
                'name' => st('General discussion'),
                'description' => st('Test forum'),
    );
    taxonomy_term_save($term);



    // TODO : crÃ©er le term
    $term = array_shift(taxonomy_get_term_by_name('General discussion'));
    // User can post a forum topic.
    $title = $this->randomName();
    $edit = array(
        'title' => $title,
        'taxonomy_forums[und]' => $term->tid,
    );
    $this->drupalPost('node/add/discussion', $edit, t('Save'));

    // Check that the node exists in the database.
    $node = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($node, t('Node found in database.'));

    // Check user can edit and delete his own post.
    $this->clickLink(t('Edit'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->drupalPost(NULL, array(), t('Delete'));

    $this->user2 = $this->drupalCreateUser();
    $this->drupalLogin($this->user2);

    $term = array_shift(taxonomy_get_term_by_name('General discussion'));
    // User can post a forum topic.
    $title = $this->randomName();
    $edit = array(
        'title' => $title,
        'taxonomy_forums[und]' => $term->tid,
    );
    $this->drupalPost('node/add/discussion', $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($edit['title']);

    $this->drupalLogin($this->user1);
    $this->drupalGet("node/{$node->nid}");

    // Check if user cannot edit post of another user.
    $this->drupalGet("node/{$node->nid}/edit");
    $this->assertResponse('403', 'User cannot edit post of another user.');
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {

    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      // $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}
