<?php

/**
 * @file
 * Code for the newsletters feature.
 */
include_once('newsletters.features.inc');

/*
 * hook_enable
 */

function newsletters_init() {
    
}

function newsletters_enable() {
    db_insert('custom_breadcrumb')
            ->fields(array(
                'titles' => '[Breadcrumb_newsletter:newsletter_title]', // titles of the elements to display in the breadcrumb
                'paths' => '[newsletter-breadcrump:path]', // path of the elements to display in the breadcrumb
                'visibility_php ' => '',
                'node_type' => 'simplenews', //the content type targeted by this rule
            ))
            ->execute();

    //Activation message
    drupal_set_message('Newsletters feature is now active on your site.');
}

/*
 * hook_disable
 */

function newsletters_disable() {
    // remove simplenews block to the site_wide context
    _remove_block_context('site_wide', '0');

    // disable the content type simplenews
    _disable_content_type('simplenews');
    //remove the breadcrump relative to newsletter
    db_delete('custom_breadcrumb')
            ->condition('node_type', 'simplenews')
            ->execute();


    //Activation message
    drupal_set_message('Newsletters feature is now disabled on your site.');
}

/*
 * hook_menu
 */

function newsletters_menu() {
    $items['my_subscriptions'] = array(
        'title' => t('Newsletters'),
        'access callback' => TRUE,
        'page callback' => '_my_subscriptions',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
        'weight' => 20,
    );
    return $items;
}

/*
 * display the subcriptions management page
 */

function _my_subscriptions() {
    $block = module_invoke('simplenews', 'block_view', '0');
    return $block['content'];
}

/*
 *  allow to link all content types to the related_content field of the simplenews content
 */

function newsletters_field_create_field($field) {
    if ($field["field_name"] == 'field_related_contents') {
        $types = node_type_get_types();

        foreach ($types as $type => $value) {
            if ($type != 'simplenews')
                simplenews_related_content_type($type, 'add');
        }
    }
}

/**
 * Implementation of hook_token_info().
 */
function newsletters_token_info() {

    $info['types']['newsletter-breadcrumb'] = array(
        'name' => 'newsletter breadcrumb',
        'description' => 'Tokens related to breadcrumb of newsletter.',
    );

    $info['tokens']['newsletter-breadcrumb']['path'] = array(
        'name' => t('newsletter breadcrumb path'),
        'description' => t("The breadcrumb path of the newsletter."),
    );

    $info['types']['Breadcrumb_newsletter'] = array(
        'name' => 'Breadcrumb_newsletter',
        'description' => 'Tokens related to Breadcrumb.',
    );
    $info['tokens']['Breadcrumb_newsletter']["newsletter_title"] = array(
        'name' => t("newsletter Breadcrumb title"),
        'description' => t("The Breadcrumb title of the newsletter."),
    );
    return $info;
}

/**
 * Implements hook_tokens().
 *
 */
function newsletters_tokens($type, $tokens, $data = array(), $options = array()) {
    $replacements = array();
    global $language;
    

    $sanitize = !empty($options['sanitize']);
    // tokens for newsletter breadcrumb
    if ($type == 'newsletter-breadcrump' && !empty($data['node'])) {
        //get the current node
        //var_dump($node);
        $node = $data['node'];
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'path':
                    //get the id of taxonomy
                    $tid = $node->field_simplenews_term[$language->language][0]["tid"];
                    //create a taxonomy path
                    $tax_path = "taxonomy/term/$tid";
                    //create a aliased path from taxonomy
                    $path = drupal_get_path_alias($tax_path);
                    //ready to return path
                    $replacements[$original] = $path;
                    break;
            }
        }
    }

    if ($type == 'Breadcrumb_newsletter') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'newsletter_title':
                    $replacements[$original] = t("newsletter");
                    break;
            }
        }
    }
    return $replacements;
}
