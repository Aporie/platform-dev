<?php
/**
 * @file
 * Code for the News feature.
 */

include_once('news_core.features.inc');
/**
 * Implementation of hook_token_info().
 */
function news_core_token_info() {
    $info['types']['Breadcrumb_news'] = array(
        'name' => 'Breadcrumb_news',
        'description' => 'Tokens related to Breadcrumb.',
    );
    $info['tokens']['Breadcrumb_news']["news_title"] = array(
        'name' => t("news Breadcrumb title"),
        'description' => t("The Breadcrumb title of the news."),
    );
    return $info;
}

/**
 * Implements hook_tokens().
 *
 */
function news_core_tokens($type, $tokens, $data = array(), $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    // tokens for e_libray_core Breadcrumb
    if ($type == 'Breadcrumb_news') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'news_title':
                    $replacements[$original] = t("news");
                    break;
            }
        }
    }
    return $replacements;
}



function news_core_form_news_node_form_alter(&$form, &$form_state, $form_id) {
   
    $form['#validate'][] = 'custom_valid';  //news_core_news_node_form_validate
  
}

function custom_valid(&$form, &$form_state) {
  if (isset($form['field_link']['und'][0]['url']['#value']) && (bool)$form['field_link']['und'][0]['url']['#value'] ) {
    $result_scan = linkit_scan_url($form['field_link']['und'][0]['url']['#value']);
  }
}

/**
 * Retrieve relevant information about a URL. Specifically this function is
 * usable for internal (absolute) URL:s, but it also works for external URL:s.
 *
 * @param $url
 *   The url that should be scanned.
 *
 * @return $path_info
 *   An associative array containing:
 *   - url: The same as the argument $url, untouched.
 *   - target: Either "internal" or "external".
 *   - requested_path: If internal, the path requested relative to Drupal root.
 *     The only exception is when frontpage is referred directly, then it will
 *     be whatever the frontpage is set to.
 *   - system_path: If internal and the path is valid, the Drupal system path,
 *     e.g. "node/23".
 *   - query_fragment: If internal, the query and fragment of the url.
 *     Typically it is not needed for searching and is just reappended back
 *     when processing of the path is done. It could e.g. look like
 *     "?foo=bar#anchor".
 *   - safe_url: If external, and the protocol is http or https, this will be
 *     the original url, stripped from everything that could potentially be
 *     dangerous. E.g. "http://user:pass@example.org/settings?evilaction=true"
 *     will become "http://example.org/settings".
 */
function linkit_scan_url($url) {
//Note this function has been heavily modified: To see original see linkit.module. 
  global $base_url; 
  // We will not use the drupal wrapper function 'drupal_pasre_url' as that
  // function should only be used for URLs that have been generated by the
  // system, and we cant be sure that this is the case here.
  $parts['path'] = '';
  $parts = parse_url(trim($url, '/'));
  
  if (!isset($parts['scheme']) || !isset($parts['host'])) {
    // Not an absolute URL.
    form_set_error('field_link', 'Please insert a complete url. ex: http://www.myurl.com');
    return FALSE;
  }

  // Make a new array, this will hold the components from parse_url() and our
  // own "Linkit" components.
  $path_info = array();

  // Append the original components from parse_url() to our array.
  $path_info += $parts;

  // Save the whole URL.
  $path_info['url'] = $url;

  if (!isset($path_info['query'])) {
    $path_info['query'] ='';
  }

  // Convert the query string to an array as Drupal can only handle querys as
  // arrays.
  // @see http://api.drupal.org/drupal_http_build_query
  parse_str($path_info['query'], $path_info['query']);

  // The 'q' parameter contains the path of the current page if clean URLs are
  // disabled. It overrides the 'path' of the URL when present, even if clean
  // URLs are enabled, due to how Apache rewriting rules work.
  if (isset($path_info['query']['q'])) {
    $path_info['path'] = $path_info['query']['q'];
    unset($path_info['query']['q']);
  }

  // Internal URL.
  // @TODO: Handle https and other schemes here?
  if (trim($path_info['scheme'] . '://' . $path_info['host'] . base_path(), '/') == $base_url) {
    $path_info['target'] = 'internal';

    //mct:Handle Multilingual internal urls
    $langs = array();
    $lang_list = language_list();
    foreach ($lang_list as $key => $value) {
      $langs[] = '/' . $key . '/';
    }
    $path_info['path'] = str_replace($langs, '/', $path_info['path']);
  
    // Remove the subdirectory name from the path if the site is installed in
    // subdirectory. It will be added again by the url() function.
    if (base_path() != "/") {
      $path_info['path'] = trim(preg_replace(base_path(), '', $path_info['path'], 1), '/');
    }

    // Trim the path from slashes.
    $path_info['path'] = trim($path_info['path'], '/');

    // If we have an empty path, and an internal target, we can assume that the
    // URL should go the the frontpage.
    if (empty($path_info['path'])) {
      $path_info['frontpage'] = TRUE;
      $path_info['path'] = variable_get('site_frontpage', 'node');
    }

     // Check if the path already is an alias.
    if (!$processed_path = drupal_lookup_path('source', $path_info['path'])) {
      // Not an alias, so keep the original value. //FALSE
      //test url path alias then:
      
      $query = db_select('menu_router', 'mrt');
      $result = $query
          ->condition('path', '%' . $path_info['path'] . '%','LIKE')
          ->fields('mrt', array('path'))
          ->execute()
          ->fetchAll();
          
      if (isset($result[0])) {
        $processed_path = $path_info['path'];
      } 
      else {
        form_set_error('field_link', 'Not a valid internal url');
      }
    }

    // Add the "real" system path (not the alias) if the current user have
    // access to the URL.
    $path_info['system_path'] = drupal_valid_path($processed_path) ? $processed_path : FALSE;
    //If no path returned it's an invalid SYSTEM PATH (Remark: if it's not a system path (an alias) then we cannot determine if its valid or not.
    if (!$path_info['system_path']) {
      form_set_error('field_link', 'Not a valid internal url');
      return FALSE;
    }
  }
  // External URL
  else {
    //$hey = drupal_http_request($url); //try to see if link is valid
    //drupal_set_message(print_r($hey,true), 'warning');
    //Clean external url: NOT used because it make youtube video or other impossible to use.
    // $path_info['target'] = 'external';
    // if (preg_match('~^https?$~', $parts['scheme'])) {
      // $path_info['safe_url'] = $parts['scheme'] . '://' . $parts['host'] . $path_info['path'];
    // }
  }

  return $path_info;
}
