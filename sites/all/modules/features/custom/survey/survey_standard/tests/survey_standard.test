<?php

/**
 * @file
 * Tests for PROJECTFEATURE_survey_standard.module.
 * ECWeb MULTISITE QA
 */

class surveyStandard extends DrupalWebTestCase {
  protected $privileged_user;
  protected $contributor_user;



    public static function getInfo() {
    return array(
        'name' => 'survey_standard tests',
        'description' => 'Test the survey_standard features functionality.',
        'group' => 'Multisite Standard',
    );
  }


  public function setUp() {
    parent::setUp(array('survey_core', 'survey_standard'));
    $this->privileged_user = $this->drupalCreateUserWithRole("administrator");
    $this->contributor_user = $this->drupalCreateUserWithRole("contributor");
    $this->drupalLogin($this->privileged_user);


   }

  function testSurveyStandard() {
    //init
    $this->feature_name = 'survey_standard';
    $feature_name = $this->feature_name;

    //Check the presence of module
    $this->assertTrue(module_exists($feature_name), t('%feature_name feature enabled.', array('%feature_name' => $this->feature_name)));
    $this->drupalGet('survey');
    $this->assertResponse(200 , 'User is allowed to access the page');

    //Content type creation
    $settings = array(
      'type' => 'webform',
      'title' => $this->randomName(8),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(128)))),
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);


    $this->verbose('Survey Node created: ' . '</pre>' . print_r($node, TRUE) . '</pre>');
    $this->verbose('Survey Node created: ' . '</pre>' . print_r($settings['title'], TRUE) . '</pre>');

    //Permission to access the created content
    $this->drupalGet('survey');
    $this->assertResponse(200 , 'User is allowed to access the page');
    $this->assertRaw('node/add/webform', t('Link to create %feature_name available', array('%feature_name' => $this->feature_name)));
    $this->assertRaw(t('Create a new survey'), t('Button to create a new %feature_name is available',array('%feature_name' => $this->feature_name)));
    $this->clickLink(t('Create a new survey'));
    $this->drupalGet("node/{$node->nid}/webform");
    $this->assertResponse(200, 'Webform is accesible to user');
    $this->assertText(t("@title", array('@title' => $settings['title'])), 'Title is present and accesible to contributor user.');
    $this->assertRaw(t('Add'), 'Add more fields button is present.');
    $this->drupalLogin($this->contributor_user);
    //Access Link Page was displayed
    $this->drupalGet('survey/survey-title');
    $this->assertResponse(200, 'Contributor is allowed to access the survey');
    //Chech the presence of h1
    $elements = $this->xpath("//h1");
    $this->assertTrue(isset($elements[0]), t('The survey page contains a h1 title'));
    $this->assertRaw(t('Results'), t('%feature_name results are available to contributor.', array('%feature_name' => $this->feature_name)));
    //$this->drupalPost('admin/structure/block/add', $post, t('Submit'));

  }

    /**
   * Creates a user with the give role.
   * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}


/**
 * Defines a base class for testing the "multisite_translations" module.
 */
class Multisite_survey_standardQAWebTestCase extends DrupalWebTestCase {


  public static function getInfo() {
    return array(
        'name' => 'survey_standard QA tests',
        'description' => 'Test the survey_standard BASIC QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}
