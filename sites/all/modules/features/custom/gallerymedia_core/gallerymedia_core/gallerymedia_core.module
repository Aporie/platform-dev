<?php
/**
 * @file
 * Code for the gallerymedia_core feature.
 */

include_once 'gallerymedia_core.features.inc';


/**
 * Implementation of hook_token_info().
 */
function gallerymedia_core_token_info() {
    $info['types']['Breadcrumb_gallery'] = array(
        'name' => 'Breadcrumb_gallery',
        'description' => 'Tokens related to Breadcrumb.',
    );
    $info['tokens']['Breadcrumb_gallery']["gallerymedia_title"] = array(
        'name' => t("gallerymedia Breadcrumb title"),
        'description' => t("The Breadcrumb title of the gallerymedia."),
    );
    return $info;
}

/**
 * Implements hook_tokens().
 */
function gallerymedia_core_tokens($type, $tokens, $data = array(), $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    // tokens for e_libray_core Breadcrumb
    if ($type == 'Breadcrumb_gallery') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'gallerymedia_title':
                    $replacements[$original] = t("gallerymedia");
                    break;
            }
        }
    }
    return $replacements;
}

/**
 * Implementation of hook_preprocess_node().
*/
function gallerymedia_core_preprocess_node(&$variables) {


  //init
  global $base_url;
  $output = '';
  $pager_size = 8;

if ('gallerymedia' == $variables['type']) {
    //merge photos and videos
    if (isset($variables['field_picture_upload']) && isset($variables['field_video_upload'])) {
      $media_items = array_merge($variables['field_picture_upload'], $variables['field_video_upload']);
    }
    elseif (isset($variables['field_picture_upload'])) {
      $media_items = $variables['field_picture_upload'];
    }
    elseif (isset($variables['field_video_upload'])) {
      $media_items = $variables['field_video_upload'];
    }
    else {
      $media_items = array();
    }


//for the rest of content types
//REMOVED as the field name is variable. It is depending on how the user decide to name it.


   //sort media items by fid
    $sorted_media_items = array();
    if ($media_items) {
      foreach ($media_items as $value) {
        $sorted_media_items[$value['fid']]= $value;
      }
      ksort($sorted_media_items);
    }

    //manage pager
    pager_default_initialize(count($sorted_media_items), $pager_size);
    $pager_page = pager_find_page();
    $sorted_media_items = array_slice($sorted_media_items, $pager_page * $pager_size, $pager_size);

    //if no pictures display empty_pic
    if (!isset($sorted_media_items) || count($sorted_media_items) == 0) {
      global $base_url;
      $empty_pic = array(
        'type' => 'empty',
        'uri' => $base_url . '/' . path_to_theme() . '/images/empty_gallery.png',
        'filename' => t('empty gallery')
      );

      $sorted_media_items[0] = $empty_pic;
    }

    //display media items
    foreach ($sorted_media_items as $key => $item) {
      if (($key % 4) == 0) {
        $output .= '<div class="media_gallery row-fluid">';
        $output .= '<ul class="thumbnails">';
      }

      //variable alias
      if (isset($item['type']) && $item['type'] == 'empty') {
        $local_data = $item;
      }
      else {
        $local_data = $sorted_media_items[$key];
      }
      $short_name = (strlen(filter_xss($local_data['filename'])) > 35) ? substr(filter_xss($local_data['filename']), 0, 30) . '[...]' : filter_xss($local_data['filename']);

      //Get tags if any provided
      if (isset($local_data['field_tags']['und'][0])) {
        $cop = $local_data['field_tags']['und'];
        $mytag = '';
        foreach ($cop as $buif => $tid_array) {
          $mytag[] = taxonomy_term_load($tid_array['tid'])->name;
        }
        $tags = 'Tags: ' . implode(', ' , $mytag) . '.';
      }

      if (isset($local_data['filemime'])) {
        $type = explode('/', $local_data['filemime']);
      }
      else {
        $type[0] = 'undefined';
      }

      switch ($type[0]) {
        case 'image':
          if(!empty($local_data['uri'])) {
          $picture_square_thumbnail = image_style_url('square_thumbnail', $local_data['uri']);
          $picture_preview = image_style_url('preview', $local_data['uri']);
          $picture_original = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . str_replace('public://', '/', $local_data['uri']);
          }
          $alt_text = (!empty($local_data['field_file_image_alt_text']['und'][0]['safe_value']) ? $local_data['field_file_image_alt_text']['und'][0]['safe_value'] : filter_xss($local_data['filename']));
          $title_texte = (!empty($local_data['field_file_image_title_text']['und'][0]['safe_value']) ? $local_data['field_file_image_title_text']['und'][0]['safe_value'] : '');

          $output .= '<li class="span3">';
          $output .= '<div id="lightbox' . $key . '" class="lightbox" style="display: none;">';
          $output .= '<img src="' . $picture_preview . '" alt="' . $alt_text . '" title="' . $title_texte . '"/>';

          if (isset($local_data['field_picture_description']['und'][0]['value'])) {
            $output .= '<p>' . filter_xss($local_data['field_picture_description']['und'][0]['value']) . '</p>';
          }

          if (!empty($tags)) {
            $output .= '<p>' . $tags . '</p>';
          }

          $output .= '<p><a href="' . $base_url . '/' . $picture_original . '" title="' . filter_xss($local_data['filename']) . '" target="_blank">' . t('View full size picture') . '</a></p>';
          $output .= '</div>';
          $output .= '<a href="#lightbox' . $key . '" class="fancybox thumbnail" rel="gallery" title="' . filter_xss($local_data['filename']) . '">';
          $output .= '<img src="' . $picture_square_thumbnail . '" alt="' . $alt_text . '" title="' . $title_texte . '" />';
          $output .= '<p class="carousel-caption">' . $short_name . '</p>';
          $output .= '</a>';
          $output .= '</li>';
        break;

        case 'video':
          //$video_path = $base_url . '/' . variable_get('file_directory_path', $default = 'sites/default/files') . '/videos/original/' . $local_data['filename'];

          $converted_fid = db_select('video_output', 'vd')
            ->fields('vd', array('output_fid'))
            ->condition('original_fid', $local_data['fid'], '=')
            ->execute()
            ->fetchAssoc();

          if (isset($converted_fid) && $converted_fid != NULL) {
            $converted_video = file_load($converted_fid['output_fid']);
            $video_path = $base_url . '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . str_replace('public://', '/', $converted_video->uri);
          }
          else {
            $video_path = $base_url . '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/videos/original/' . $local_data['filename'];
          }
          $thumb = file_load($local_data['thumbnail']);
          if(!empty($thumb)) {
          $video_square_thumbnail = image_style_url('square_thumbnail', $thumb->uri);
          $video_preview = image_style_url('preview', $thumb->uri);
          }
          $watermark = $base_url . '/' . path_to_theme() . '/images/video_icon.png';

          $output .= '<li class="span3">';
          $output .= '<div id="video_lightbox' . $key . '" class="lightbox" style="display: none;">';
          $output .= '<embed name="player' . $key . '" id="player' . $key . '"
            type="application/x-shockwave-flash"
            pluginspage="http://www.macromedia.com/go/getflashplayer"
            width="800" height="600"
            src="http://ec.europa.eu/wel/players/jwflvplayer/player.swf"
            allowfullscreen="true"
            allowscriptaccess="always"
            flashvars="file=' . $video_path . '&fullscreen=true&image=' . $video_preview . '&skin=http://ec.europa.eu/wel/players/jwflvplayer/skins/mainley.swf">
            </embed>';
          $output .= '</div>';
          $output .= '<a href="#video_lightbox' . $key . '" class="fancybox thumbnail" rel="gallery" title="' . $local_data['filename'] . '">';
          $output .= '<img class="watermark" src="' . $watermark . '" alt="' . $local_data['filename'] . '" title="" />';
          $output .= '<img src="' . $video_square_thumbnail . '" alt="' . $local_data['filename'] . '" title="" />';
          $output .= '<p class="carousel-caption">' . $short_name . '</p>';
          $output .= '</a>';
          $output .= '</li>';
        break;

        case 'empty':
          $output .= '<div class="span3 media_item">';
          $output .= '<img src="' . $local_data['uri'] . '" alt="' . $local_data['filename'] . '" />';
          $output .= '</div>';
        break;

        default:
        break;
      }

      if ((($key+1) % 4) == 0 || !isset($sorted_media_items[$key+1])) {
        $output .= '</ul>';
        $output .= '</div>';
      }
    }

    $htmlpager = theme('pager',
      array(
        'tags' => array(),
        'element' => 0,
      )
    );

    $output .= $htmlpager;

    $variables['gallerymedia_items'] = $output;
}//if gallerymedia.
}
