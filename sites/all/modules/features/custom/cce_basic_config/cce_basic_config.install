<?php

/**
 * @file
 * Install the feature contact_form
 */

/**
* Implements hook_install().
*/
function cce_basic_config_install() {
  // create a vocabulary dedicated to the classification
  $vocabulary = (object) array(
    'name' => st('classification'),
    'machine_name' => 'classification',
    'module' => 'cce_basic_config',
  );
  taxonomy_vocabulary_save($vocabulary);

  // add default categories
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('01000'),
    'description' => st('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('02000'),
    'description' => st('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('03000'),
    'description' => st('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('04000'),
    'description' => st('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('05000'),
    'description' => st('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('06000'),
    'description' => st('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

     $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('07000'),
    'description' => st('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('08000'),
    'description' => st('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('09000'),
    'description' => st('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('10000'),
    'description' => st('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('11000'),
    'description' => st('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('12000'),
    'description' => st('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('13000'),
    'description' => st('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('14000'),
    'description' => st('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('15000'),
    'description' => st('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('16000'),
    'description' => st('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('17000'),
    'description' => st('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('18000'),
    'description' => st('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('19000'),
    'description' => st('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('20000'),
    'description' => st('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('21000'),
    'description' => st('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('22000'),
    'description' => st('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('23000'),
    'description' => st('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('24000'),
    'description' => st('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('25000'),
    'description' => st('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('26000'),
    'description' => st('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('27000'),
    'description' => st('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('28000'),
    'description' => st('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('29000'),
    'description' => st('Transport'),
  );
  taxonomy_term_save($term);

     $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('30000'),
    'description' => st('Economic and monetary union, euro, single currency'),
  );
   taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('31000'),
    'description' => st('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('32000'),
    'description' => st('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('33000'),
    'description' => st('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // manually save file document displays in database
  // the feature settings are not properly injected in database
  // this process must be temporary
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_insert('file_display')
        ->fields(array(
          'name' => $id_export,
          'weight' => 0,
          'status' => ($settings_export->status)?1:0,
          'settings' => serialize($settings_export->settings),
        ))
        ->execute();
    }
  }


  // add a fivestar rate widget
  // check if rate widget already exists
  $rate_widgets = variable_get("rate_widgets");
  if(!$rate_widgets || count($rate_widgets) == 0) {
    $rate_widgets = array();
  }
  else {
    foreach($rate_widgets as $rate_widget) {
      if($rate_widget->name == 'rate_fivestar') { // the widget fivestar already exists
        return;
      }
    }
  }
  $rate_widgets[1] = (object) array(
      'name' => 'rate_fivestar',
      'tag' => 'vote',
      'title' => 'rate_fivestar',
      'node_types' => array(),
      'comment_types' => array(),
      'options' => array(
        0 => array(
          0 => '0',
          1 => '1',
        ),
        1 => array(
          0 => '25',
          1 => '2',
        ),
        2 => array(
          0 => '50',
          1 => '3',
        ),
        3 => array(
          0 => '75',
          1 => '4',
        ),
        4 => array(
          0 => '100',
          1 => '5',
        ),
      ),
      'template' => 'fivestar',
      'node_display' => '2',
      'teaser_display' => FALSE,
      'comment_display' => '2',
      'node_display_mode' => '1',
      'teaser_display_mode' => '1',
      'comment_display_mode' => '1',
      'roles' => array(
        2 => '2',
        3 => 0,
        1 => 0,
        4 => 0,
        5 => 0,
      ),
      'allow_voting_by_author' => 1,
      'noperm_behaviour' => '1',
      'displayed' => '1',
      'displayed_just_voted' => '2',
      'description' => '',
      'description_in_compact' => TRUE,
      'delete_vote_on_second_click' => '0',
      'use_source_translation' => TRUE,
      'value_type' => 'percent',
      'theme' => 'rate_template_fivestar',
      'css' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.css',
      'js' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.js',
      'translate' => TRUE,
    );
    variable_set("rate_widgets", $rate_widgets);

    //force home and myworkbench menu items at left in main menu
    db_update('menu_links')
      ->fields(array(
        'weight' => '-30',
        'menu_name' => 'user-menu',
        )
      )
      ->condition('link_title', 'My workbench', '=')
      ->condition('menu_name', 'main-menu', '=')
      ->execute();

    db_update('menu_links')
      ->fields(array('weight' => '-50'))
      ->condition('link_title', 'Home', '=')
      ->condition('menu_name', 'main-menu', '=')
      ->execute();

}

/**
* Implements hook_uninstall().
*/
function cce_basic_config_uninstall() {
  // manually remove config for file document display
  // this process must be temporary
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_delete('file_display')
        ->condition('name', $id_export)
        ->execute();
    }
  }
}

/**
* Implements hook_enable().
*/
function cce_basic_config_enable() {
  include_once DRUPAL_ROOT . '/includes/password.inc';

  // add users acccounts -----------------------------------------------------------------------------------------------------------------------------------------------------
  $account = new stdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;
  $account->name = 'user_administrator';
  $account->pass = user_hash_password('pass');
  $account->mail = 'administrator@test.com';
  $account->init = 'administrator@test.com';
  $account->roles[3] = 'administrator';
  $account->field_firstname['und'][0]['value'] = 'John';
  $account->field_lastname['und'][0]['value'] = 'Smith';
  user_save($account);

  $account1 = new stdClass();
  $account1->is_new = TRUE;
  $account1->status = TRUE;
  $account1->name = 'user_contributor';
  $account1->pass = user_hash_password('pass');
  $account1->mail = 'contributor@test.com';
  $account1->init = 'contributor@test.com';
  $account1->roles[4] = 'contributor';
  $account1->field_firstname['und'][0]['value'] = 'John';
  $account1->field_lastname['und'][0]['value'] = 'Doe';
  user_save($account1);

  $account2 = new stdClass();
  $account2->is_new = TRUE;
  $account2->status = TRUE;
  $account2->name = 'user_editor';
  $account2->pass = user_hash_password('pass');
  $account2->mail = 'editor@test.com';
  $account2->init = 'editor@test.com';
  $account2->roles[5] = 'editor';
  $account2->field_firstname['und'][0]['value'] = 'John';
  $account2->field_lastname['und'][0]['value'] = 'Blake';
  user_save($account2);


  // affect dummy contents to the user 'administrator' ---------------------------------------------------------------------------------------------------------------
  $query = db_select('node', 'n');
  $query->condition('n.type', 'article', '=')
    ->fields('n', array('nid', 'title', 'uid'));
  $results = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($results as $result) {
    $node = node_load($result['nid']);
    $node->uid = $account->uid;
    node_save($node);
  }


  // add 2 blocks in site-wide context -------------------------------------------------------------------------------
  $context=module_invoke('context', 'load', 'site_wide');
  $block_to_add1 = array(
    'module' => 'system',
    'delta' =>  'user-menu',
    'region' => 'tools',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['user-menu']=$block_to_add1;

  $block_to_add2 = array(
    'module' => 'search',
    'delta' =>  'form',
    'region' => 'header_right',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['form']=$block_to_add2;

  module_invoke('context', 'save', $context);

  // multisite_drupal_toolbox_add_block_context('communities','multisite_og_button-og-contextual-links','multisite_og_button','og-contextual-links', 'sidebar_first','-9');
  // multisite_drupal_toolbox_add_block_context('site_wide','locale-language','locale','language','highlighted');
  // multisite_drupal_toolbox_add_block_context('site_wide','system-main-menu','system','main-menu','featured');

  // set the main-menu as multilingual --------------------------------------------------------------------------------
  //db_update('menu_custom')
  //  ->fields(array('i18n_mode' => 5))
  //  ->condition('menu_name', 'main-menu')
  //  ->execute();

  // db_query("INSERT INTO {ckeditor_input_format} (name, format) VALUES(:name, :format)", array(':name' => 'Basic', ':format' => 'basic_html'));

   // $html_update = db_insert('ckeditor_input_format') // Table name no longer needs {}
// ->fields(array(
  // 'name' => 'Basic',
  // 'format' => 'basic_html',
// ))
// ->execute();

}

/**
 * Remove block from the context
 */
function cce_basic_config_disable() {
}



/**
 * add classification vocabulary, add file diplays settings
 */
function cce_basic_config_update_7140() {
  // create a vocabulary dedicated to the classification
  // add default categories
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('01'),
    'description' => st('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('02'),
    'description' => st('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('03'),
    'description' => st('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('04'),
    'description' => st('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('05'),
    'description' => st('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('06'),
    'description' => st('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

     $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('07'),
    'description' => st('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('08'),
    'description' => st('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('09'),
    'description' => st('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('10'),
    'description' => st('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('11'),
    'description' => st('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('12'),
    'description' => st('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('13'),
    'description' => st('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('14'),
    'description' => st('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('15'),
    'description' => st('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('16'),
    'description' => st('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('17'),
    'description' => st('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('18'),
    'description' => st('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('19'),
    'description' => st('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('20'),
    'description' => st('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('21'),
    'description' => st('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('22'),
    'description' => st('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('23'),
    'description' => st('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('24'),
    'description' => st('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('25'),
    'description' => st('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('26'),
    'description' => st('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('27'),
    'description' => st('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('28'),
    'description' => st('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('29'),
    'description' => st('Transport'),
  );
  taxonomy_term_save($term);

     $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('30'),
    'description' => st('Economic and monetary union, euro, single currency'),
  );
   taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('31'),
    'description' => st('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('32'),
    'description' => st('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('33'),
    'description' => st('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // manually save file document displays in database
  // the feature settings are not properly injected in database
  // this process must be temporary
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    db_insert('file_display')
      ->fields(array(
        'name' => $id_export,
        'weight' => 0,
        'status' => ($settings_export->status)?1:0,
        'settings' => serialize($settings_export->settings),
      ))
      ->execute();
  }

  // remove the mail address to the update modules notification
  variable_del('update_notify_emails');

  // disable update management module permissions for administrator role
  $adm_rid = multisite_drupal_toolbox_get_rid('administrator');
  user_role_revoke_permissions($adm_rid, array(
    'administer software updates',
  ));

}

/**
 * add password_policy rules and handle password_policy 2.x upgrade
 */
function cce_basic_config_update_7150() {
  // manually insert the password policy in database
  // this process is temporary since the module password_policy
  $exports = cce_basic_config_default_password_policy();
  //db_delete('password_policy')->execute();

  $schema = password_policy_schema();
  db_drop_table('password_policy');
  db_drop_table('password_policy_expiration');
  db_drop_table('password_policy_force_change');
  db_drop_table('password_policy_history');
  db_drop_table('password_policy_role');

  if (!db_table_exists('password_policy'))
    db_create_table('password_policy', $schema['password_policy']);
  if (!db_table_exists('password_policy_history'))
    db_create_table('password_policy_history', $schema['password_policy_history']);
  if (!db_table_exists('password_policy_notice_history'))
    db_create_table('password_policy_notice_history', $schema['password_policy_notice_history']);

  db_insert('password_policy')
    ->fields(array(
      'name' => 'Example policy',
      'config' => $exports['Example policy']->config,
    ))
    ->execute();
}

/**
 * add search block
 */
function cce_basic_config_update_7160() {
  // add block site-wide context -------------------------------------------------------------------------------
  $context=module_invoke('context', 'load', 'site_wide');

  $block_to_add = array(
    'module' => 'search',
    'delta' =>  'form',
    'region' => 'header_right',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['form']=$block_to_add;

  module_invoke('context', 'save', $context);
}


/**
 * update classification vocabulary ids
 */
function cce_basic_config_update_7170() {

  //Get the "classification" vid
  $classification=NULL;

  //http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.module/function/taxonomy_get_vocabularies/7
  $vocabularies = taxonomy_get_vocabularies(NULL);
  foreach ($vocabularies as $vocab_object) {
    if ($vocab_object->name == "classification") {
      $classification= $vocab_object->vid;
      //$results = db_query("update  `taxonomy_term_data`  set name=concat(name, '000') WHERE vid=".$classification);
      if($classification) {
        $results = db_query("UPDATE {taxonomy_term_data} SET NAME=concat(name, :name) WHERE vid=:vid", array(':name' => '000', ':vid' => $classification));
      }
      return;
    }
  }
}



/**
 * add rate widget fivestar
 */
function cce_basic_config_update_7180() {
  // check if rate widget fivestar already exists
  $rate_widgets = variable_get("rate_widgets");
  if(!$rate_widgets || count($rate_widgets) == 0) {
    $rate_widgets = array();
  }
  else {
    foreach($rate_widgets as $rate_widget) {
      if($rate_widget->name == 'rate_fivestar') { // the widget fivestar already exists
        return;
      }
    }
  }
  $rate_widgets[1] = (object) array(
      'name' => 'rate_fivestar',
      'tag' => 'vote',
      'title' => 'rate_fivestar',
      'node_types' => array(),
      'comment_types' => array(),
      'options' => array(
        0 => array(
          0 => '0',
          1 => '1',
        ),
        1 => array(
          0 => '25',
          1 => '2',
        ),
        2 => array(
          0 => '50',
          1 => '3',
        ),
        3 => array(
          0 => '75',
          1 => '4',
        ),
        4 => array(
          0 => '100',
          1 => '5',
        ),
      ),
      'template' => 'fivestar',
      'node_display' => '2',
      'teaser_display' => FALSE,
      'comment_display' => '2',
      'node_display_mode' => '1',
      'teaser_display_mode' => '1',
      'comment_display_mode' => '1',
      'roles' => array(
        2 => '2',
        3 => 0,
        1 => 0,
        4 => 0,
        5 => 0,
      ),
      'allow_voting_by_author' => 1,
      'noperm_behaviour' => '1',
      'displayed' => '1',
      'displayed_just_voted' => '2',
      'description' => '',
      'description_in_compact' => TRUE,
      'delete_vote_on_second_click' => '0',
      'use_source_translation' => TRUE,
      'value_type' => 'percent',
      'theme' => 'rate_template_fivestar',
      'css' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.css',
      'js' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.js',
      'translate' => TRUE,
    );
    variable_set("rate_widgets", $rate_widgets);
}


/**
 * force home and myworkbench menu items at left in main menu
 */
function cce_basic_config_update_7190() {
  db_update('menu_links')
    ->fields(array('weight' => '-30'))
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();

  db_update('menu_links')
    ->fields(array('weight' => '-50'))
    ->condition('link_title', 'Home', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}

/**
 * move menu item myworkbench from main menu to user menu
 */
function cce_basic_config_update_7191() {
  db_update('menu_links')
    ->fields(array(
      'weight' => '-30',
      'menu_name' => 'user-menu',
      )
     )
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}
/**
 * MIGRATION OF DATE FIELD [TO UNIX TIMESTAMP]
 * ==================================================================================
 */
/**
 * Add a new temporary date field to schema for safely date conversion to unix stamp.
 * todo Uninstall these field
 * @param type $schema
 */

//function cce_basic_config_schema_alter(&$schema) {
//
//
//$tables = _cce_basic_config_get_date_tables();
//for ($i = 0; $i < count($tables); $i++) {
////build temporary table fields for storing unix timestamp
//    if (isset($schema[$tables[$i]['table']])) {
//      $schema[$tables[$i]['table']]['fields'][$tables[$i]['field'] . '_temp'] = array(
//          'type' => 'int',
//          'not null' => TRUE,
//          'default' => 0,
//      );
//    }
//  }
//}
/**
 * A structured array of date fields to be converted to UNIX timestamp format
 * @return array
 */
//function _cce_basic_config_get_date_tables() {
//
//    $date_tables = array (
//      '0' => array(
//          'table' => 'field_data_field_article_publication_date',
//          'field' => 'field_article_publication_date_value',
//      ),
//      '1' => array(
//          'table' => 'field_revision_field_article_publication_date',
//          'field' => 'field_article_publication_date_value',
//      ),
//     '2' => array(
//          'table' => 'field_data_field_article_unpublish_on',
//          'field' => 'field_article_unpublish_on_value',
//      ),
//     '3' => array(
//          'table' => 'field_revision_field_article_unpublish_on',
//          'field' => 'field_article_unpublish_on_value',
//      ),
//
//  );
//
//  return $date_tables;
//}

/**
 * DATE FIELD MIGRATION SCRIPT.
 * Content types using date fields should be using timestamp instead datetime.
 * No need to update schema in hook_install().
 * On a clean installation the date fields are already set up.
 *
 */
//function cce_basic_config_update_7219() {
//  $schema['field_data_field_article_publication_date'] = array();
//  $schema['field_revision_field_article_publication_date'] = array();
//  $schema['field_data_field_article_unpublish_on'] = array();
//  $schema['field_revision_field_article_unpublish_on'] = array();
//
//  $schema['field_data_field_article_publication_date'] = drupal_get_schema('field_data_field_article_publication_date');
//  $schema['field_revision_field_article_publication_date'] = drupal_get_schema('field_revision_field_article_publication_date');
//  $schema['field_data_field_article_unpublish_on'] = drupal_get_schema('field_data_field_article_unpublish_on');
//  $schema['field_revision_field_article_unpublish_on'] = drupal_get_schema('field_revision_field_article_unpublish_on');
//
//
//
//  cce_basic_config_schema_alter($schema);
//
//  $tables = _cce_basic_config_get_date_tables();
//  //clear schema cache to avoid wrong checking
//
//  cache_clear_all('schema:', 'cache', TRUE);
//
//
//  foreach ($tables as $key => $value) {
//
//    $table = $value['table'];
//    $field = $value['field'];
//
//
//    //don't run script if the conversion has been already done
//    if ($schema[$table]['fields'][$field]['type'] == 'int') {
//      watchdog('system', t('Field has been already converted to UNIX timestamp: "@field"', array('@field' => $field)), NULL, WATCHDOG_WARNING);
//      drupal_set_message(t('Field @field has been already converted to UNIX timestamp.'), array('@field' => $field), 'warning');
//      if (db_field_exists($table, $field . '_temp')) {db_drop_field($table, $field . '_temp');
//
//      }
//    } else {
//
//      // we'll create a temp field, drop it if already exists
//      if (db_field_exists($table, $field . '_temp')) {
//        db_drop_field($table, $field . '_temp');
//        watchdog('system', t('UPDATE: The  field: "@field", already exists therefore was deleted and recreated.', array('@field' => $field)), NULL, WATCHDOG_WARNING);
//        drupal_set_message('Field already exists therefore deleted', 'status');
//      }
//      // create a temporary date field
//      $added = db_add_field($table, $field . '_temp', $schema[$table]['fields'][$field . '_temp']);
//      //dpm($field . '_temp');
//      // proceed on date conversion
//      if (db_field_exists($table, $field . '_temp') && db_field_exists($table, $field)) {
//
//        db_update($table)
//                ->expression($field . '_temp', "UNIX_TIMESTAMP($field)")
//                ->execute();
//        // delete old column
//        db_drop_field($table, $field);
//        db_change_field($table, $field . '_temp', $field, array('type' => 'int'));
//      } else {
//        watchdog('system', t('UPDATE: There is no such a field: "@field", attempt to create.', array('@field' => $field)), NULL, WATCHDOG_WARNING);
//        drupal_set_message('No temporary field(s)', 'error');
//      }
//    }//if !int
//  }//foreach
//}

//update_N

/**
 *
 * END MIGRATION
 * ==================================================================================
 */
