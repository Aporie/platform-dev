<?php
/**
 * @file
 * Code for the CCE_basic_config feature.
 */

include_once('cce_basic_config.features.inc');
include_once('cce_basic_config.file_default_displays.inc');
include_once('cce_basic_config.default_password_policy.inc');

function cce_basic_config_menu_alter(&$items) {
  // hide default search tab ---------------------------------------------------------------------------------------------
  $items['search/node']['access callback'] = FALSE;
}

function cce_basic_config_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
  //Get Taxonomy classification vid
  $vid_classification = db_select('taxonomy_vocabulary', 't')
           -> fields('t')
           -> condition('machine_name', 'classification', '=')
           -> execute()
           ->fetchAll();
  //Get Taxonomy tree
  $classification = taxonomy_get_tree($vid_classification[0]->vid);

  foreach ($classification as $key => $obj_term) {
   $list[$obj_term->name] = $obj_term->name . ' - ' . strip_tags($obj_term->description);
  }

  //Create fieldset 'META Data'
  $form['meta'] = array(
    '#type' => 'fieldset',
    '#title' => t('META data'),
    '#weight' => 10,
    '#collapsible' => FALSE
  );

  //Create select field
  $form['meta']['classification'] = array(
    '#type' => 'select',
    '#title' => t('IPG Classification'),
    '#options' => $list,
    '#required' => TRUE,
    '#empty_option' => 'none',
    '#default_value' => variable_get('meta_configuration', 'none'),
    '#description' => t('Choose the classification for your website. This classification respects the ' . l(t('IPG guidelines'), 'http://ec.europa.eu/ipg/content/optimise/metadata/annex2_en.htm')),
  );

  //Get the 'code' and set meta_configuration variable
  if (isset($form_state['input']['op']) && $form_state['input']['op'] == 'Save configuration') {
    if (isset($form_state['input']['classification'])) {
      $pattern = '@(^[0-9]+).*@';
      $subject = $form_state['input']['classification'];
      $result = preg_match($pattern, $subject, $matches);
      if (isset($matches[1])) {
        variable_set('meta_configuration', $matches[1]);
      }
    }
  }

}

function cce_basic_config_form_media_format_form_alter(&$form) {
  // when putting a media in content with wysiwyg we just allow the default view mode for media document
  if($form['#media']->type == 'document') {
    unset($form['options']['format']['#options']['teaser']);
    unset($form['options']['format']['#options']['preview']);
    unset($form['#formats']['preview']);
    unset($form['#formats']['teaser']);
  }

}

/**
 *
 * @param type $variables
 * @param type $hook
 */

function cce_basic_config_preprocess_field(&$variables) {

  //echopre($variables);
  $fields = $variables['items'];


  //LOOP VIDEO FIELDS
foreach ($fields as $delta => $item) {

  if (isset($fields[$delta]['#item']['filemime'])) {
    $video = $fields[$delta]['#item'];
    $type = explode('/', $video['filemime']);
    if ($type[0] == 'video') {
          $converted_fid = db_select('video_output', 'vd')
            ->fields('vd', array('output_fid'))
            ->condition('original_fid', $video['fid'], '=')
            ->execute()
            ->fetchAssoc();

          if (isset($converted_fid) && $converted_fid != NULL) {
            $converted_video = file_load($converted_fid['output_fid']);
            $video_path = $base_url . '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . str_replace('public://', '/', $converted_video->uri);
          }
          else {
            $video_path = $base_url . '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/videos/original/' . $video['filename'];
          }


          $thumb = file_load($video['thumbnail']);

          if(!empty($thumb)) {
          $video_square_thumbnail = image_style_url('square_thumbnail', $thumb->uri);
          $video_preview = image_style_url('preview', $thumb->uri);
          }

          $watermark = $base_url . '/' . path_to_theme() . '/images/video_icon.png';

          $output .= '<li class="span3">';
          $output .= '<div id="video_lightbox' . $delta . '" class="lightbox" style="display: none;">';
          $output .= '<embed name="player' . $delta . '" id="player' . $delta . '"
            type="application/x-shockwave-flash"
            pluginspage="http://www.macromedia.com/go/getflashplayer"
            width="800" height="600"
            src="http://ec.europa.eu/wel/players/jwflvplayer/player.swf"
            allowfullscreen="true"
            allowscriptaccess="always"
            flashvars="file=' . $video_path . '&fullscreen=true&image=' . $video_preview . '&skin=http://ec.europa.eu/wel/players/jwflvplayer/skins/mainley.swf">
            </embed>';
          $output .= '</div>';

          $output .= '<a href="#video_lightbox' . $delta . '" class="fancybox thumbnail" rel="gallery" title="' . $video['filename'] . '">';
          $output .= '<img class="watermark" src="' . $watermark . '" alt="' . $video['filename'] . '" title="" />';
          $output .= '<img src="' . $video_square_thumbnail . '" alt="' . $video['filename'] . '" title="" />';
          $output .= '<p class="carousel-caption">' . $short_name . '</p>';
          $output .= '</a>';
          $output .= '</li>';


    }
  }

}

$variables['videos'] = $output;
  //LOOP

}