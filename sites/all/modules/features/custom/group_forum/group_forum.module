<?php

/**
 * @file
 * Code for the Group Forum feature.
 */

include_once('group_forum.features.inc');
include_once('group_forum_extra.inc');

include_once( 'sites/all/modules/contributed/devel/krumo/class.krumo.php' );

/**
 * ==========================================================================
 * Start of development
 * ==========================================================================
 */

/*
* hook_menu
*/
function group_forum_menu() {
  $items = array();
 
  $items['community/%group_name/forum'] = array(
    'title' => 'Forum',
    //'page callback' => 'views_page',
    'page callback' => '_group_forum_get_rooms',
    //'page arguments' => array('forum_rooms_list', 'page_forum_rooms', 1),
    'page arguments' => array( 1 ),
    'access callback' => TRUE,//Checker que l'utilisateur est membre
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
 
  $items['community/%group_name/forum/%room_alias/thread'] = array(
    'title' => 'Forum',
    'page callback' => 'views_page',
    'page arguments' => array('forum_thread_list', 'page_forum_threads', 3 ),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Implementation of hook_node_delete
 * This method works on the 
 * @var $node the node to be deleted
 */
function group_forum_node_delete( $node ) {
  if ( $node->type != 'forum_room' ) return;
  
  //get all node id from the forum_room id
  $request = "SELECT entity_id AS nid, title, type 
    FROM {field_data_field_forum_room} AS field_room
      INNER JOIN {node} AS thread ON field_room.entity_id = thread.nid
    WHERE field_forum_room_nid = :room_id AND entity_type = 'node'";
  
  $data_result = db_query( $request, array( ':room_id' => $node->nid ) );
  
  if ( count($data_result) == 0 ) return;
  
  $nids = array();
  foreach ( $data_result as $data_row ) {
    //I define the text from the standard drupal mode
    watchdog('content', '@type: deleted %title.', array('@type' => $data_row->type, '%title' => $data_row->title));
    drupal_set_message(t('@type %title has been deleted.', array('@type' => node_type_get_name($data_row), '%title' => $data_row->title)));
    $nids[] = $data_row->nid;
  }
  
  //if we want further to unpublish the nodes, we can use the method node_unpublish_action( $node, $context) 
  // @see http://api.drupal.org/api/drupal/modules!node!node.module/function/node_unpublish_action/7
  node_delete_multiple($nids);
}

/**
 * Implementation of hook_form_alter 
 */
function group_forum_form_alter(&$form, &$form_state, $form_id) {
  switch( $form_id ) {
    // I set the default field_room if the id is set
    case 'forum_thread_node_form':
      if ( !isset($_GET['field_forum_room']) ) return;
      $form['field_forum_room']['und']['#default_value'] = $_GET['field_forum_room'];
      break;
      
    case 'node_delete_confirm':
      if ( $form['#node']->type != 'forum_room' ) break;
      
      $form['description'] = array('#markup' => t( 'This action cannot be undone and will remove the associated thread(s).' ) );
      break;
      
    default:
      return;
    }
}

/**
 * Internal function in order to get the contextual link to create a thread
 * in a room
 * @return type 
 */
function _group_forum_get_link_from_room() {
    $group = og_context();
    $group_id = $group ? $group->etid : '';
    
    $room_id = room_alias_load( room_alias_to_arg( '' ) );
    
    $attributes = array( 
      'attributes' => array(
        'type' => 'add',
        ),
      );
    
    $options = array( 
      'query' => array( 
        'gids_node[]' => $group_id,
        'field_forum_room' => $room_id 
        ),
      'absolute' => TRUE,
      );
    
    $url = url( 'node/add/'.CT_THREAD, $options );
    
    return l( t('Add a new thread'), 
      $url, 
      $attributes );
}

/**
 * Internal function in order to get the contextual link to create a room 
 * in a group
 * @return type 
 */
function _group_forum_get_link_from_group() {
  $group = og_context();
  $group_id = isset($group) ? $group->etid : '';
  
  if ( !isset( $group ) || !$group ) return;
  
  //we show the link only if the user has the rights to create a new forum room
  if ( !og_user_access( $group->gid, 'create forum_room content' ) ) return;
  
  $attributes = array( 
    'attributes' => array(
      'type' => 'add',
      ),
    );
  
  $options = array( 
    'query' => array( 
      'gids_node[]' => $group_id,
      ),
    'absolute' => TRUE,
    );
  
  $url = url( 'node/add/'.CT_ROOM, $options );
  
  return l( t('Add a new Room'), 
    $url, 
    $attributes );
}

/**
 * Add a buttons in the views associated with this feature
 * @param type $view 
 */
function group_forum_views_pre_render(&$view) {
  switch( $view->name ) {
    case 'forum_thread_list':
      //og_user_access($group_type, $gid, $string, $account = NULL, $skip_alter = FALSE)
      $group = og_context();
      if( og_user_access( $group->gid, 'create forum_thread content' ) ) {
        $view->header['area']->options['content'] = _group_forum_get_link_from_room();
      }
      break;
    default:
      break;
  }  
}

function _group_forum_get_rooms( $gid ) {
  if( empty( $gid ) ){
    //get context
    $context = og_context();
    if ( !empty( $context ) ) $gid = $context['gid'];
    
    //If we don't have any context, we just return the page
    else return;
  }
  
  drupal_set_title( t('List rooms') );
  $explanation = variable_get( 'group_forum_room_texts', t('Below you can find rooms or thematic embedding discussion topics') );
  $output = "<h2>{$explanation}</h2>";
  $output .= _group_forum_get_link_from_group();
  
  
  //building of the header
  $header = array( 
    'Title' => array( 
      'data' => 'Title',
      'field' => 'node_title' ,
      ),
    'Threads' => array( 
      'data' => 'Threads',
      'field' => 'num_topics',
      'sort' => 'asc',
      ),
    'Messages' => array( 
      'data' => 'Messages',
      'field' => 'num_messages' ,
      ),
    'Last Message' => array( 
      'data' => 'Last Message' ,
      'field' => 'last_comment_timestamp',
      ),
    );
    
  $order = '';
  if ( isset( $_GET['sort'] ) && preg_match( '/[asc|desc]/', $_GET['sort'] )  && isset( $_GET['order'] ) ) {
    $order = ' ORDER BY '. $header[$_GET['order']]['field'].' '.$_GET['sort'];
  }
  
  //I put the order directly in the request because the :order didn't function
  $request = "SELECT node.nid AS node_nid, node.title AS node_title, node_body.body_value, COALESCE( COUNT(thread.nid), 0 ) AS num_topics, COALESCE( (SUM( comment_count) + COUNT(thread.nid)), 0 ) AS  num_messages,   last_comment_timestamp, last_comment_uid
    -- Titre, body, nombre de topics, nombre de messages, dernier message (date et utilisateur), 
    FROM {node} node
    LEFT OUTER JOIN {field_data_body} node_body ON node_body.entity_id = node.nid
    INNER JOIN {og_membership} og_membership_node ON node.nid = og_membership_node.etid AND og_membership_node.entity_type = 'node'
    LEFT OUTER JOIN {field_data_field_forum_room} field_forum_room ON field_forum_room.field_forum_room_nid = node.nid
    LEFT OUTER JOIN {node thread} ON thread.nid = field_forum_room.entity_id
    LEFT OUTER JOIN {node_comment_statistics} stats ON stats.nid = thread.nid
    WHERE (( (node.status = '1') AND (node.type IN  ('forum_room')) AND (og_membership_node.gid = :gid ) ))
    GROUP BY node.nid {$order};";
  
  $data_result = db_query( $request, array( ':gid' => $gid ) );
  
  $rows = array();
  foreach ( $data_result as $data_row ) {
    $cell_title = l( $data_row->node_title, "node/{$data_row->node_nid}" ) . '<br />';
    $cell_title .= $data_row->body_value;
    
    $cell_date = '';
    if ( !empty( $data_row->last_comment_timestamp) ) {
      $account = user_load( $data_row->last_comment_uid );
      
      //I put the date first and then the user
      $cell_date = format_date( $data_row->last_comment_timestamp ) . '<br />' ;
      $cell_date .= theme( 'username', array( 'account' => $account ) );
    }
    $rows[] = array( 
      'data' => array( 
        $cell_title, 
        $data_row->num_topics, 
        $data_row->num_messages, 
        $cell_date,
      )
    );
  }
  $output .= count($rows) > 0 ? theme( 'table', array( 'header' => $header, 'rows' => $rows ) ) : 
	t('There are not yet any room.');
  
  return $output;
}

/*
* _to_arg function
*/
function room_alias_to_arg($arg) {
  if (arg(0) == 'node') {
    if ( arg(1) == 'add' ) return;
    $nid = arg(1);
    $node = node_load($nid);
    switch( $node->type ) {
        case 'forum_room':
        case 'forum_thread':
            $alias = drupal_lookup_path( 'alias', $_GET['q'] );
            //In case of edit mode
            if ( $alias == FALSE ) return 0; 
            $alias = explode( '/', $alias );
            return $alias[3];
        case 'community':
        case FALSE:
            //nothing
            break;
        default:
            krumo( $node );
            break;
    }
  }
  else {
      if( preg_match( "/.*forum\/([^\/]*)(\/.*)+/", $_GET['q'], $matches ) ) {
        return $matches[1];
      } 
  }
  return;
}

/*
* _load function
*/
function room_alias_load($arg) {
  if( empty($arg) ) return 0;
  
  if( preg_match( '/node\/(.*)/', $_GET['q'], $matches ) ) {
    return $matches[1];
  }
  
  if ( preg_match( "/(.*$arg).*/", $_GET['q'], $matches ) ) {
    $source = drupal_lookup_path( 'source', $matches[1] );
    $source = explode("/", $source);
    if ( count($source) != 2 ) return 0;
    return $source[1];  
  }
  
  return 0;
}