<?php
/**
 * @file
 * Code for the Group forum feature test file.
 */
    // member = 2
    // administrator member = 3
    // community_manager = 4


/**
 * Tests the functionality of the OG Button module.
 */
class GroupForumTest extends DrupalWebTestCase {
  protected $users;
  protected $community;
  //protected $profile = 'subsite_communities';

  public static function getInfo() {
    return array(
      'name' => 'Feature Forum Group Tests',
      'description' => 'Ensure that the feature forum group runs as expected.',
      'group' => 'DEC_Features',
    );
  }

  public function setUp() {
    //global $user;
    // Enable any modules required for the test
    $modules = array(
      // 'context',
      // 'og',
      // 'og_access',
      // 'og_create_perms',
      // 'views',
      // 'views_ui',
      // 'node_reference',
      // 'token',
      // 'pathauto',
      // 'communities',
      'ec_profiles',
      'group_forum',
      );

    features_install_modules( $modules );

    parent::setUp( $modules );

    // Grant the permissions for the forums
    _group_forum_grant_roles();

    // Define the theme
    theme_enable( array( 'ec_default' ) );
    variable_set('theme_default', 'ec_default' );

    // Specific feature set
    drupal_flush_all_caches();

    // Create a group
    $data = array(
      'type' => 'community',
      'title' => 'simpletest community',
      'workbench_moderation_state_new' => 'published',
    );
    $data[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $this->community = $this->drupalCreateNode( $data );

    // Change the path which is not correct
    $node_path = 'node/' . $this->community->nid;
    path_delete( array( 'source' => $node_path ) );
    $path = array(
      'source' => $node_path,
      'alias' => 'community/simpletest-community',
      'language' => 'en',
      );
    path_save( $path );

    // Return a loaded group entity if exists or create a new one.
    $group = og_get_group( 'node',  $this->community->nid );
    $this->community->gid = $group->gid;

    // Create a user who will have the right to create rooms
    $this->users['admin'] = $this->drupalCreateUser();

    // Give the user the administer role
    og_group( $this->community->gid, array( 'entity_type' => 'user', 'entity' => $this->users['admin'] ) );
    og_role_grant( $this->community->gid, $this->users['admin']->uid, multisite_drupal_toolbox_get_og_rid( 'administrator member' ) );

    $this->users['manager'] = $this->drupalCreateUser();
    // Give the user the role ID
    og_group( $this->community->gid, array( 'entity_type' => 'user', 'entity' => $this->users['manager'] ) );
    og_role_grant( $this->community->gid, $this->users['manager']->uid, multisite_drupal_toolbox_get_og_rid( 'community_manager' ) );

    $this->users['member'] = $this->drupalCreateUser();
    // Give the user the role ID
    og_group( $this->community->gid, array( 'entity_type' => 'user', 'entity' => $this->users['member'] ) );
    og_role_grant( $this->community->gid, $this->users['member']->uid, multisite_drupal_toolbox_get_og_rid( 'member' ) );
  }

  public function testGroupForumFeatureAdmin() {
    // Login as admin
    $this->drupalLogin($this->users['admin']);
    global $user;
    $user = user_load( $this->users['admin']->uid );

    // Connect to the community
    $path = drupal_get_path_alias( 'node/' . $this->community->nid );
    $this->drupalGet($path);

    // Check that we have the capability to
    // - See the forum link
    if ($this->_testForumAvailability()) {
      $this->clickLink(t('Forum') );
    }
    else {
      return;
    }

    // Click on the Forum link and check that we have the default text
    $this->assertText(t('There are not yet any room.'), t('Found the default message'));
    if ( $this->assertLink(t('Add a new Room'), 0, t('Found the link to accede to the creation of a Room'))) {
      $this->clickLink(t('Add a new Room'));

      // Create a room
      $edit = array(
        'title' => 'First Room',
      //  'body' => $this->randomName( 64 ),
      );
      $this->drupalPost( NULL, $edit, t('Save') );

    }
    else {
      $user_roles = og_get_user_roles($this->community->gid, $user->uid);
      $og_rid =  multisite_drupal_toolbox_get_og_rid('administrator member');
      $this->assertTrue(
        in_array($og_rid, $user_roles),
        t( 'Check if the user has the correct role' ) );

      $this->assertTrue(
        og_user_access($this->community->gid, 'create forum_room content', $user),
        t('Check if the user has the correct rights on the community')
      );
    }

    // The room should be created
    if ($this->_testForumAvailability()) {
      $this->clickLink('Forum');
      $this->assertNoText(t('There are not yet any room.'), t('Found the default message'));

      if ($this->assertLink( 'First Room', 0, t('check that I can accede to the first room' ))) {
        $this->clickLink('First Room');
        $this->assertLink(t('Add a new thread'), 0, t('Check that I can create a thread'));

        // Go to the creation of thread form
        $this->clickLink(t('Add a new thread'));

        // Create a form
        $edit = array(
          'title' => $this->randomName(32),
        );
        $this->drupalPost(NULL, $edit, t('Save'));


      }

    }

    $this->drupalLogout();
  }

  public function _testForumAvailability() {
    return $this->assertLink('Forum', 0, t('Found the link to accede to the Forum.'));
  }
}