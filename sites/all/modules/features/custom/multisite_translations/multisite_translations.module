<?php
/**
 * @file
 * Code for the multisite_translations feature.
 */

include_once 'multisite_translations.features.inc';

function multisite_translations_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'tmgmt_job_form':
      // force translator to ecweb
      /*
      $form['translator_wrapper']['translator']['#default_value'] = 'ecweb';
      */
      // hide translator options
      /*
      drupal_add_css('.hide_element {display: none;}', 'inline');
      $form['translator_wrapper']['#prefix'] = '<div class="hide_element">';
      $form['translator_wrapper']['#suffix'] = '</div>';
      */    
      break;
    case 'locale_languages_predefined_form':
      // generate translation roles after adding new languages
      $form['#submit'][] = 'create_translation_roles';
      break;
    case "views_form_tmgmt_node_source_overview_page":
      // tmgmt admin node source page : disable content that have pending job translation requests
      foreach($form['views_bulk_operations'] as $key => $value) {
        if(isset($value['#return_value'])) {
          $query = new EntityFieldQuery();
          $return = (boolean) $query
            ->entityCondition('entity_type', 'tmgmt_job_item')
            ->propertyCondition('item_type', 'node')
            ->propertyCondition('item_id', $value['#return_value'])
            ->propertyCondition('state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
            ->execute();
          if($return)
            $form['views_bulk_operations'][$key]['#disabled'] = TRUE;
        }
      }
      break;
  }
  

    
  if (substr($form_id, -9) == 'node_form') {
    // disable the language field since there are pending job translation items on this node
    if(isset($form['nid']['#value'])) {
      $query = new EntityFieldQuery();
      $return = (boolean) $query
        ->entityCondition('entity_type', 'tmgmt_job_item')
        ->propertyCondition('item_type', 'node')
        ->propertyCondition('item_id', $form['nid']['#value'])
        ->propertyCondition('state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
        ->execute();

      if($return)
        $form['language']['#disabled'] = TRUE;
    }
  }

}

/*
 * hook_views_query_alter
 */
function multisite_translations_views_query_alter(&$view, &$query) {
  // alter translation_jobs view to display only jobs related to roles translation_language of the current user
  if ($view->name == 'translation_jobs') { 
    global $user;   
    if (is_translator($user)) {
      $view->query->add_where(0, 'tmgmt_job.target_language', get_translator_languages($user), 'in');
    }
  }
}

/*
 * hook_init
 */
/*
function multisite_translations_init() {
  create_translation_roles();
}
*/

/*
 * test if a user has one or any translator roles
 */
function is_translator($account) {
  $roles = $account->roles;
  foreach ($roles as $rid => $role) {
    if (substr($role, 0, 10) == 'translator')
      return TRUE;
  }
  $result = FALSE;
}

/*
 * get all the languages that a translator is responsible for
 */
function get_translator_languages($account) {
  $language_codes = array();
  $roles = $account->roles;
  foreach ($roles as $rid => $role) {
    if (substr($role, 0, 10) == 'translator') {
      $language_codes[] = get_related_language($role);
    }
  }
  return $language_codes;
}

/*
 * get the language code related to a translation role
 */
function get_related_language($role) {
  $elt = explode("_", $role);
  $result = db_select('languages', 'l')
    ->fields('l', array('language'))
    ->condition('name', ucfirst($elt[1]), '=')
    ->execute()
    ->fetchAssoc();
    
  return ($result['language']);
}

/*
 * get the translation role related to a language code
 */
function get_related_translation_role($language_code) {
  $result = db_select('languages', 'l')
    ->fields('l', array('name'))
    ->condition('language', $language_code, '=')
    ->execute()
    ->fetchAssoc();
    
  return ('translator_' . strtolower($result['name']));  
}

/*
 * create the translation roles
 */
function create_translation_roles() {
  $languages = language_list();
  foreach ($languages as $lid => $language) {
    $role_name = 'translator_' . strtolower($language->name);
    
    $result = db_select('role', 'r')
      ->fields('r')
      ->condition('name', $role_name, '=')
      ->execute()
      ->fetchAssoc();

    if ($result == NULL) {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
      user_role_grant_permissions($role->rid, array(  
        'create translation jobs',
        'submit translation jobs',
        'accept translation jobs', 
        'access workbench',
        'administer tmgmt',
      ));     
    }
  }
}


/**
 * Implements hook_rules_action_info() on behalf of the system module.
 */
function multisite_translations_rules_action_info() {
  return array(
    'mail_to_related_translation_role' => array(
      'label' => t('Send mail to the related translation role'),
      'group' => t('Translation Management'),
      'parameter' => array(
        'subject' => array(
          'type' => 'text',
          'label' => t('Subject'),
          'description' => t("The mail's subject."),
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
          'description' => t("The mail's message body."),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t("The mail's from address. Leave it empty to use the site-wide configured address."),
          'optional' => TRUE,
        ),
      ),
      'base' => 'rules_action_mail_to_related_translation_role',
      'access callback' => 'rules_system_integration_access',
    ),
  );
}

/**
 * send mail to the translation role related to the target language of the translation job
 */
function rules_action_mail_to_related_translation_role($subject, $message, $from = NULL, $settings, RulesState $state, RulesPlugin $element) {
  $tmgmt_job = $state->variables['tmgmt_job']->value();
  
  // stop if the target language is not yet set and the job not submitted
  if($tmgmt_job->target_language == null || $tmgmt_job->state == 0)
    return;
  
  $translator_role_name = get_related_translation_role($tmgmt_job->target_language);
  $translator_role = db_query("SELECT rid FROM {role} WHERE name = :p1", array(':p1' => $translator_role_name))->fetchObject();
  $from = !empty($from) ? str_replace(array("\r", "\n"), '', $from) : NULL;

  // get all users
  $result = db_query("SELECT DISTINCT u.mail FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = :p1", array(':p1' => $translator_role->rid));

  // send the mails.
  $params = array(
    'subject' => $subject,
    'message' => $message,
  );
  // Set a unique key for this mail.
  $name = isset($element->root()->name) ? $element->root()->name : 'unnamed';
  $key = 'rules_action_mail_to_users_of_role_' . $name . '_' . $element->elementId();  $languages = language_list();

  $message = array('result' => TRUE);
  foreach ($result as $row) {
    $message = drupal_mail('rules', $key, $row->mail, language_default(), $params, $from);
    if (!$message['result']) {
      break;
    }
  }
  if ($message['result']) {
    watchdog('rules', 'Successfully sent email to the role(s) :roles.', array(':roles' => $translator_role_name));
  }
}


/**
 * hook_menu
 */
 /*
function multisite_translations_menu() {
  $items['admin/config/regional/tmgmt/buildrole'] = array(
    'title' => 'Build translation roles',
    'description' => 'Settings related to translation roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_translation_form'),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
  ); 

  return $items;
}
*/


function multisite_translation_form($form, &$form_state) {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Rebuild translation roles'));
  return $form;
}

function multisite_translation_form_submit($form, &$form_state) {
  create_translation_roles();
  drupal_set_message(t('Translation roles have been rebuild.'));
}
