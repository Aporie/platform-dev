<?php

/**
 * Implements hook_menu
 */
function multisite_cookie_consent_menu(){
    $items =  array();
    $items['admin/config/eucookie-consent'] = array(
        'title'              => 'eucookie consent settings',
        'description'        => 'Administer Eu cookie consent.',
        'page arguments' => array('multisite_cookie_consent_admin_settings'),
        'access arguments' => array('administer_eucookie_consent'),
        'file' => 'multisite_cookie_consent.admin.inc',
        'page callback' => 'drupal_get_form',
        'weight'             => -8,
        'type' => MENU_LOCAL_TASK,
    );

    $items['cookie-notice'] = array(
        'title'              => t('Cookies'),
        'description'        => 'Notice page',
        'page callback' => array('multisite_cookie_consent_notice'),
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'weight'             => -7,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_init
 */
function multisite_cookie_consent_init(){
    //notice url
    $notice_page = url('cookie-notice' , array('absolute' => TRUE));
    //add for example external
    drupal_add_js('http://ec.europa.eu/wel/like/js/likedislike.js' , 'external');
    //add js inline (example for now):
    drupal_add_js('var consent_required_cookies = {
        "a":{
            "'._multisite_cookie_consent_site_name().'":["youtube","vimeo"]}
        };
        var cookie_notice_url = {
        '._get_site_languages($notice_page).'};', 'inline');
    //external pointer to EC consent.js file
    $consent_js = variable_get('eucookie_consent_ec_consent_javascript',
    'http://ec.europa.eu/wel/cookie-consent/consent.js');

    //Consent banner
if (user_is_logged_in()){
    if (variable_get('eucookie_consent_ec_consent_loggedin') == 1){
        //inclusion of external JavaScript from EC
        drupal_add_js($consent_js , 'external');
    }
} else {
    //inclusion of external JavaScript from EC
    drupal_add_js($consent_js , 'external');
    }
}

/**
 * Implementation of hook_permission().
 */
function multisite_cookie_consent_permission() {
    return array(
        'administer_eucookie_consent' => array(
            'title' => t('Administer eucookie consent settings'),
        ),
    );
}

/**
 * creates cookie notice page passing current language
 * @return string
 */
function multisite_cookie_consent_notice(){
    global $language;
    //get all descriptions available for the cookies
    $descriptions  = multisite_cookie_consent_getcookie($language->language);
    return $descriptions;
}

/**
 * Saves cookie description to db
 * @param $cookie_id
 * @param $cookie
 */
function multisite_cookie_consent_savecookie($cookie_id, $cookie){
    //insert to db
    db_insert('eucookie_consent')
        ->fields(array(
            'cookie_id' => $cookie_id,
            'cookie_description' => drupal_json_encode($cookie),
        ))
        ->execute();
}

/**
 * Removes previous cookies stored in the database
 * @param bool $cookie_id
 */
function multisite_cookie_consent_removecookie($cookie_id = false ){
    //remove to db
    if (!$cookie_id){
        db_delete('eucookie_consent')
            ->execute();
    } else {
        if (is_numeric($cookie_id)){
        db_delete('eucookie_consent')
            ->conditions('cookie_id', $cookie_id)
            ->execute();
        }
    }
}

/**
 * Get cookie(s) description and name
 * generates notice page
 * @param string $language
 * @return string
 */
function multisite_cookie_consent_getcookie($language = 'en'){
    $output = '';
    //todo: filter by specific cookie
    $result = db_query("SELECT * FROM {eucookie_consent}");
    $cookies =  variable_get('cck_registered_cookies');

    //start creating the page output
    $output .= _multisite_cookie_statictext('header');

    foreach ($result as $record) {
        //unserialize
        $cookie_info = drupal_json_decode($record->cookie_description);

        //check if cookie exists in cookie variable
        if (in_array($cookie_info['_id'], $cookies)){
            //build output for notice page, check if language is supported
            if(!isset($cookie_info['translation'][$language])){
                //loop through out all the languages to find which one is the default
                foreach($cookie_info['translation'] as $languages => $lang){
                    if ($lang['default']){
                        $output .= '<h1>' . $lang['name'] . '</h1>';
                        $output .= '<p>' . $lang['description']  . '</p>';
                    }
                }

            } else {
                $output .= '<h1>' . $cookie_info['translation'][$language]['name'] . '</h1>';
                $output .= '<p>' . $cookie_info['translation'][$language]['description'] . '</p>';
            }
        }

    }
    //footer
    $output .= _multisite_cookie_statictext('footer');
    //javascript link
    $output .= _multisite_cookie_statictext('javascript_link');

  return $output;
}


/**
 * Generates site name
 * @return string
 */
function _multisite_cookie_consent_site_name(){
    global $base_url;
    global $base_path;
    $url = parse_url($base_url . $base_path);
    return $url['host'];
}

/**
 * Implements hook_modules_disabled().
 */
function multisite_cookie_consent_modules_disabled($modules) {
  // Go through all modules and gather cookies that can be removed.
  $cookies = _multisite_cookie_consent_cookie_list($modules);
  if (!empty($cookies)) {
    $registered_cookies = variable_get('cck_registered_cookies', array());
    foreach ($registered_cookies as $key => $registered_cookie) {
      foreach ($cookies as $cookie) {
        if($cookie == $registered_cookie) {
          unset($registered_cookies[$key]);
        }
      }
    }
    variable_set('cck_registered_cookies', $registered_cookies);
    // @TODO get things from remote
  }
}

/**
 * Implements hook_modules_enabled().
 */
function multisite_cookie_consent_modules_enabled($modules) {
  // Go through all modules and gather cookies that can be enabled.
  $cookies = _multisite_cookie_consent_cookie_list($modules);
  if (!empty($cookies)) {
    $registered_cookies = variable_get('cck_registered_cookies', array());
    $registered_cookies = array_merge($registered_cookies, $cookies);
    variable_set('cck_registered_cookies', array_unique($registered_cookies));
    // @TODO get things from remote
  }
}

/**
 * Rebuild registered cookies list.
 */
function _multisite_cookie_consent_rebuild_registered_cookies() {
  $cookies = _multisite_cookie_consent_cookie_list();
  variable_set('cck_registered_cookies', array_unique($cookies));
  // @TODO get things from remote
}

/**
 * List of cookies requred by the modules.
 */
function _multisite_cookie_consent_cookie_list($modules = NULL) {
  $cookies = array();
  // All modules and features if none given.
  if(!$modules) {
    $modules = module_list(TRUE);
  }
  foreach ($modules as $module) {
    $info = _multisite_cookie_consent_load_info($module);
    if (isset($info['cookies'])) {
      $cookies = array_merge($cookies, $info['cookies']);
    }
  }
  kpr(array_unique($cookies));
  kpr(variable_get('cck_registered_cookies', array()));
  return array_unique($cookies);
}

/**
 * Loads info file definitions for a given module.
 */
function _multisite_cookie_consent_load_info($module) {
  return drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
}

/**
 * Creates links to be added in JavaScript header for
 * CCK integration. These are links to cookie pages per language.
 * @param $notice_page
 * @return string
 */
function _get_site_languages($notice_page){
    $languages = '';
    foreach (language_list() as $lang){
        $languages .= '"'.$lang->language.'":"' . $notice_page . '"';
    }

    return $languages;
}

function _multisite_cookie_statictext($key) {
    //TODO: replace this function with more clever way
    $output_text = array(
        'header' => array(
            '#text' => '<h2>' . t('Cookies') . '</h2><p>' .
                t('To make this site work properly, we sometimes place small data files
                called cookies on your device. Most big websites do this too.') .'</p>'.
                '<h2>' . t('What are cookies?') . '</h2><p>'.
                t('A cookie is a small text file that a website saves on your computer or
                mobile device when you visit the site. It enables the website to
                remember your actions and preferences (such as login, language,
                font size and other display preferences) over a period of time,
                so you don’t have to keep re-entering them whenever
                you come back to the site or browse from one page to another.').
                '</p><h2>' . t('How do we use cookies?') . '</h2><p>',
        ),
            'footer' => array(
                '#text' => '<h2>' . t('How to control cookies') . '</h2><p>' .
                    t('You can control and/or delete cookies as you wish –
                    for details, see ') .
                    l('aboutcookies.org', url('http://aboutcookies.org' , array('external','absolute'))) .
                    t('. You can delete all cookies
                    that are already on your computer and you can set most browsers
                    to prevent them from being placed. If you do this, however,
                    you may have to manually adjust some preferences every time
                    you visit a site and some services and functionalities may not work.'),

            ),
            'javascript_link' => array(
                '#text' => t('You can easily accept or reject the cookies on this site by
                choosing one of the following links: I accept cookies / I refuse cookies.'),
            ),


    );

    return $output_text[$key]['#text'];
}