<?php

/**
 * @file
 * Tests for communities.module.
 */

/**
 * Defines a base class for testing the "communities" module.
 */
class ecas_group_syncWebTestCase extends DrupalWebTestCase {
  protected $community_user;
  protected $admin_user;
  protected $contributor_user;

  protected $profile = 'multisite_drupal_communities';

  public static function getInfo() {
    return array(
      'name' => 'ecas_group_sync',
      'description' => 'Test the synchronization between LDAP and user accounts',
      'group' => 'ECAS',
    );
  }

  function setUp() {
    parent::setUp(array(
      'ecas_env',
      'ecas_group_sync',
    ));

    $this->admin_user = $this->drupalCreateUserWithRole("administrator");
    $this->contributor_user = $this->drupalCreateUserWithRole("contributor");
    $this->editor_user = $this->drupalCreateUserWithRole("editor");
  }

  function testEcasGroupSync() {
    $this->drupalLogin($this->admin_user);

    // create mapping rule
    $id = db_insert('ecas_sync_mapping')
      ->fields(array(
        'LDAPfield' => 'dg',
        'LDAPfield_value' => 'DIGIT',
        'synctype' => 'role',
        'synctype_value' => '3',
        )
      )
      ->execute();
  
    // check the ecas_group_sync settings
    $this->drupalGet('admin/config/ecas/group_sync');    
    // OK code 200
    $this->assertResponse(200);
    
    $this->assertRaw('DIGIT', t('Mapping created.'));
    $this->assertRaw('administrator', t('Mapping created.'));



    // test the role sync process ------------------------------------------------
    $user_info = array(
      'dg' => 'DIGIT',
    );    
    module_invoke('ecas_group_sync','info_ecas_update', $this->contributor_user, $user_info, null);
    $this->assertTrue(in_array('administrator', $this->contributor_user->roles), t('Roles have been correctly affected.'));
    //$this->verbose(print_r($this->contributor_user->roles, TRUE));


    // test the group sync process -------------------------------------------------
    // create a community    
    $settings = array(
      'type' => 'community',
      'title' => 'Community test1',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
    );
    $node1 = $this->drupalCreateNode($settings);
    // add user to the group
    $membership = array(
      'type' => 'user',
      'entity' => $this->contributor_user,
      'state' => OG_STATE_ACTIVE,
    );
    og_group('node', $node1->nid, $membership);
    $membership = array(
      'type' => 'user',
      'entity' => $this->editor_user,
      'state' => OG_STATE_ACTIVE,
    );
    og_group('node', $node1->nid, $membership);

    // create mapping rule
    $id = db_insert('ecas_sync_mapping')
      ->fields(array(
        'LDAPfield' => 'dg',
        'LDAPfield_value' => 'DIGIT',
        'synctype' => 'group',
        'synctype_value' => $node1->nid,
        'synctype_value_extra' => '4',
        )
      )
      ->execute();
    $id = db_insert('ecas_sync_mapping')
      ->fields(array(
        'LDAPfield' => 'dg',
        'LDAPfield_value' => 'MARE',
        'synctype' => 'group',
        'synctype_value' => $node1->nid,
        'synctype_value_extra' => '3',
        )
      )
      ->execute();      
      
    $user_info = array(
      'dg' => 'DIGIT',
    ); 
    module_invoke('ecas_group_sync','info_ecas_update', $this->contributor_user, $user_info, null);
    $user_info = array(
      'dg' => 'MARE',
    ); 
    module_invoke('ecas_group_sync','info_ecas_update', $this->editor_user, $user_info, null);
    $this->drupalGet('group/node/' . $node1->nid . '/admin/people');
    $this->assertRaw('community_manager', t('first group role has been correctly affected.'));
    $this->assertRaw('administrator', t('second group role has been correctly affected.'));
  }


  /**
   * Creates a user with the give role.
   * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}
