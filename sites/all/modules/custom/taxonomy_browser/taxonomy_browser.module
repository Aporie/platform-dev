<?php
/**
 * @file
 * allow to filter view with a taxonomy tree
 *  
 */


/**
 * Implements hook_menu().
 */
function taxonomy_browser_menu() {
  $items['admin/config/taxonomy_browser'] = array(
    'title' => 'Taxonomy browser',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_taxonomy_browser_settings'),
    'access callback' => TRUE,
    'file' => 'taxonomy_browser.admin.inc',
  );
  $items['admin/config/taxonomy_browser/settings'] = array(
    'title' => 'Taxonomy browser settings',
    'description' => 'Configure the taxonomy browser module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_taxonomy_browser_settings'),
    'access callback' => TRUE,
    'file' => 'taxonomy_browser.admin.inc',
  ); 
  return $items;
}



function taxonomy_get_parents_tree($tid, &$parents_tree) {
  $parent = taxonomy_get_parents($tid);
  if (count($parent) > 0) {
    $keys = array_keys($parent);
    taxonomy_get_parents_tree($keys[0], $parents_tree);
  }
  $term = taxonomy_term_load($tid);
  $parents_tree[] = $term;
}

function taxonomy_get_nested_tree($terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  if (is_int($terms)) {
    $terms = taxonomy_get_tree($terms);
  }

  $return = array();

  foreach ($terms as $term) {

    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }

  return $return;
}

function output_taxonomy_nested_tree($tree, $path) {

    if (count($tree)) {

        $output = '<ul class="taxonomy-tree">';
        foreach ($tree as $term) {

            $output .= '<li id="term_' . $term->tid . '">';
            $output .= l($term->name, $path . '/' . $term->tid, array('attributes' => array('class' => array())));              

            if (isset($term->children)) {
                $output .= output_taxonomy_nested_tree($term->children, $path);
            }
            $output .= '</li>';
        }
        $output .= '</ul>';
    }

    return $output;
}

function taxonomy_create_tree($vid, $path, $ajax=FALSE, $selected=0) {
  $tree = taxonomy_get_nested_tree(intval($vid));

  $output = '<div id="tb_browser_tree">';
  $output .= output_taxonomy_nested_tree($tree, $path);
  $output .= '</div>';

  return $output;
}

function recurse_tree($parent, $tree) {
   $result = array();
   foreach ($tree as $key => $item) {
      if ($parent == $item->parents[0]) {
         $result[] = array(
            'children' => recurse_tree($item+1, $tree)
         );      
      }
   }
   return $result;
}

function taxonomy_browser_views_post_render(&$view, &$output, &$cache) {
  $displays = array();
  foreach (variable_get('taxonomy_browser_' . $view->name, array()) as $display_id => $display) {
    if ($display)
      $displays[] = $display_id;  
  }

  if (in_array($view->current_display, $displays))  {
    drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/taxonomy_browser.css');
    drupal_add_js('misc/jquery.cookie.js');
    drupal_add_js('sites/all/libraries/jstree/jquery.jstree.js');
    drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser.js');
    drupal_add_library('system', 'drupal.ajax');
 
    $view_path = $view->get_path();
 
    $vid = variable_get('taxonomy_browser_vocabulary');
    $vocabulary = taxonomy_vocabulary_load($vid);
    $parents_tree = array();
    $breadcrumb = drupal_get_breadcrumb();
    
    $selected = isset($view->args[0]) ? $view->args[0] : 0;
    $selected_term = '';
    $header = '';
    
    if ($selected > 0) {
      $selected_term = taxonomy_term_load($selected);
      taxonomy_get_parents_tree($selected, $parents_tree, TRUE);
      foreach ($parents_tree as $parent) {
        $link = l($parent->name, $view_path . '/' . $parent->tid);
        $breadcrumb[] = $link;
      }
    }
    drupal_set_breadcrumb($breadcrumb);

    if ($selected_term) {
      $header .= '<fieldset id="tb_header"><h1>' . $selected_term->name . '</h1>';
      if (isset($selected_term->description)) {
        $header .= '<p>' . $selected_term->description . '</p>';
      }
      $header .= '</fieldset><hr />';
    }    

    $output1 = '<div id="tb_wrapper" class="row ">';
      $output1 .= '<div id="tb_browser" class="col-lg-3 col-md-3 col-sm-4 col-xs-12">';
        $output1 .= '<div class="panel panel-default clearfix ">';
          $output1 .= '<div class="panel-heading">' . $vocabulary->name . '</div>';
          $output1 .= '<div class="panel-body">' . taxonomy_create_tree($vid, $view_path, FALSE, $selected) . '</div>';
        $output1 .= '</div>';
      $output1 .= '</div>';

      $output1 .= '<div class="clearfix visible-xs"></div>';

      $output1 .= '<div id="tb_view" class="col-lg-9 col-md-9 col-sm-8 col-xs-12">' . $header . $output . '</div>';
    $output .= '</div>';    

    $output = $output1;
  }
}
  
function taxonomy_browser_block_info() {
  
  $blocks['taxonomy_browser'] = array(
    'info' => t('taxonomy_browser'),     
    'weight' => 0,
  );

  return $blocks;
}  

function taxonomy_browser_block_view($delta = '') {
  
  $block = array();

  switch ($delta) {
    case 'taxonomy_browser':
      $vid = variable_get('taxonomy_browser_vocabulary');
      $vocabulary = taxonomy_vocabulary_load($vid);

      $block['subject'] = t('taxonomy_browser');
      $block['title'] = $vocabulary->name;
      $block['content'] = taxonomy_browser_create_block_content($vid, $vocabulary);
     break;
  }
  return $block;
}

function taxonomy_browser_create_block_content($vid, $vocabulary) {

    drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/taxonomy_browser.css');
    drupal_add_js('misc/jquery.cookie.js');
    drupal_add_js('sites/all/libraries/jstree/jquery.jstree.js');
    drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser.js');
    drupal_add_library('system', 'drupal.ajax');
 
    $view_path = variable_get('site_frontpage', 'node');
 
    $parents_tree = array();
    $breadcrumb = drupal_get_breadcrumb();

    $selected = isset($view->args[0]) ? $view->args[0] : 0;
    $selected_term = '';
    $header = '';
    
    if ($selected > 0) {
      $selected_term = taxonomy_term_load($selected);
      taxonomy_get_parents_tree($selected, $parents_tree, TRUE);
      foreach ($parents_tree as $parent) {
        $link = l($parent->name, $view_path . '/' . $parent->tid);
        $breadcrumb[] = $link;
      }
    }
    drupal_set_breadcrumb($breadcrumb);

    if ($selected_term) {
      $header .= '<fieldset id="tb_header"><h1>' . $selected_term->name . '</h1>';
      if (isset($selected_term->description)) {
        $header .= '<p>' . $selected_term->description . '</p>';
      }
      $header .= '</fieldset><hr />';
    }

    $output1 = '<div id="tb_wrapper">';
    $output1 .= '<div id="tb_browser">';
    $output1 .= taxonomy_create_tree($vid, $view_path, FALSE, $selected);
    $output1 .= '</div></div>';

  return array('#title' => 'test', '#markup' => $output1);
}

