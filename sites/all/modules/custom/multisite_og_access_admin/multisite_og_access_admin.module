<?php

/**
 * Group access admin field.
 */
define('OG_ACCESS_ADMIN_FIELD', 'group_access_admin');

/**
 * Define all users are allowed to edit the visibility/audience.
 */
define('OG_ACCESS_ADMIN_FIELD_USERS', 0);

/**
 * Define only admins are allowed to edit the visibility/audience.
 */
define('OG_ACCESS_ADMIN_FIELD_ADMINS', 1);

/**
 * Implement hook_og_fields_info().
 */
function multisite_og_access_admin_og_fields_info() {
  $allowed_values = array(
    0 => t('Any author/editor of the group.'),
    1 => t('This group administrators only.')
  );

  $items[OG_ACCESS_ADMIN_FIELD] = array(
    'type' => array('group content'),
    'description' => t('Determine who is authorized to change audience and visibility of a post.'),
    'entity' => array('node'),
    'field' => array(
      'field_name' => OG_ACCESS_ADMIN_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('Group admin audience/visibility'),
      'required' => TRUE,
      'default_value' => array(0 => array('value' => 0)),
      'widget_type' => 'options_select',
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function _multisite_og_access_admin_form_alter_helper($gid){
  global $user;
  
  $group = og_load($gid);
  $group_node = entity_load_single($group->entity_type, $group->etid);
  $rids = og_get_user_roles($gid);
  $roles = og_get_user_roles_name($rids);

  return (isset($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']))
   &&($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']==OG_ACCESS_ADMIN_FIELD_ADMINS)
   &&(!in_array(OG_ADMINISTRATOR_ROLE, $roles));
}

function multisite_og_access_admin_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  // Alter the node creation/edition form.
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
  
    // Node admins and og admins should never be restricted.
    if (user_access('administer nodes') || user_access('administer organic groups'))
      return;
        
    // Disable groups where user is not group admin.
    if(isset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]["#options"])){
      $audience_options = $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]["#options"];

      foreach($audience_options as $gid_or_category => $groups_or_label){
        if(is_array($groups_or_label)){
          $groups = $groups_or_label;
          foreach($groups as $gid => $label){
            if(_multisite_og_access_admin_form_alter_helper($gid)){
              // Remove from selectable options
              unset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'][$gid_or_category][$gid]);
              // If it was available as a default value remove it from default value and consider 
              // it a hidden selection
              if (in_array($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value'])) {
                $key = array_search($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value']);                
                unset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value'][$key]);
                if(!in_array($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#hidden_selected_gids'])){
                  if(isset($form['#node']->nid)){ // if node edit keep the id  
                    $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#hidden_selected_gids'][] = $gid;
                  }
                }
              }
            }
          }
          if(empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'][$gid_or_category])){
            unset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'][$gid_or_category]);
          }       
        } else {
          $gid = $gid_or_category;
          $label = $groups_or_label;
          if(_multisite_og_access_admin_form_alter_helper($gid)){
            // Remove from selectable options
            unset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'][$gid]);
            // If it was available as a default value remove it from default value and consider
            // it a hidden selection
            if (in_array($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value'])) {
              $key = array_search($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value']);
              unset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#default_value'][$key]);
              if(!in_array($gid, $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#hidden_selected_gids'])){
                if(isset($form['#node']->nid)){ // if node edit keep the id                
                  $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#hidden_selected_gids'][] = $gid;
                }
              }
            }            
          }
        }        
      }
      
      if(empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'])){
        $form[OG_AUDIENCE_FIELD]['#access'] = FALSE;
      } 
    }

    // Get default settings for visibility
    if(isset($form[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE])){  
      $node = node_load($form['nid']['#value']);
      if (is_object($node)) {
        $access = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];
      } else {
        $access = OG_CONTENT_ACCESS_DEFAULT;
      }
      $form[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE]['#default_value'] = array($access);
      
      // hide the field if we are not allowed to choose any groups
      if(empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE]['#options'])){
        // Set the default value to group default or to what is was
        $form[OG_CONTENT_ACCESS_FIELD]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function multisite_og_access_admin_node_validate($node, $form, &$form_state) {
  global $user;
 
  if(user_access('administer nodes') || user_access('administer organic groups')){
    return;
  }

  if(!isset($form_state['values'][OG_CONTENT_ACCESS_FIELD])
  || !isset($form_state['values'][OG_AUDIENCE_FIELD])
  ){
    return;
  }
  
  $visibility = $form_state['values'][OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'];
  $audiences = $form_state['values'][OG_AUDIENCE_FIELD][LANGUAGE_NONE];

  // Validate that public is checked only for groups where user
  // is group admin in a node creation.
  if($visibility==OG_CONTENT_ACCESS_PUBLIC && !$form['#node']->nid) {
    if (!empty($audiences)) {
      // Check if user is admin of at leat one of these groups.      
      $is_grp_admin = FALSE;
      $groups = array();
      foreach($audiences as $index => $value){
        $gid = $value['gid'];
        $group = og_load($gid);
        $groups[$gid]=$group->label;// store for error reporting
        
        $group_node = entity_load_single($group->entity_type, $group->etid);         
        if((isset($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']))
        &&($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']==OG_ACCESS_ADMIN_FIELD_ADMINS)){          
          $rids = og_get_user_roles($gid);
          $roles = og_get_user_roles_name($rids);        
          $is_grp_admin |= (in_array(OG_ADMINISTRATOR_ROLE, $roles));
        } else {
          $is_grp_admin |= TRUE; // there is a group where as a normal user you are allowed to post public
        }
      }
      if(!$is_grp_admin){
        form_set_error('og_public', format_plural(count($groups), 'You must be group administrator of group @groups to create a public post inside this group.', 'You must be group administrator of at least one of @groups to create a public post inside theses groups.', array('@groups' => implode(', ',$groups))));
      }   
    }
  }
  
  // Validate that if public is unchecked at least one group
  // has to be checked in a node creation.
  else if($visibility==OG_CONTENT_ACCESS_PRIVATE && !$form['#node']->nid){
    //If we have forced groups, do nothing
    //if(!hiddenselected gids)
    if(empty($audiences)){
      form_set_error('title', t('You must <a href="@join">join a group</a> before posting a %type.', array('@join' => url('og'), '%type' => node_get_types('name', $node->type))));
    } else {
      // Check if user is admin of at leat one of these groups.
      $is_grp_admin = FALSE;
      $groups = array();
      foreach($audiences as $index => $value){
        $gid = $value['gid'];
        $group = og_load($gid);
        $groups[$gid]=$group->label;
        
        $group_node = entity_load_single($group->entity_type, $group->etid);
        if((isset($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']))
        &&($group_node->{OG_ACCESS_ADMIN_FIELD}[LANGUAGE_NONE][0]['value']==OG_ACCESS_ADMIN_FIELD_ADMINS)){
          $rids = og_get_user_roles($gid);
          $roles = og_get_user_roles_name($rids);
          $is_grp_admin |= (in_array(OG_ADMINISTRATOR_ROLE, $roles));
        } else {
          $is_grp_admin |= TRUE; // there is a group where as a normal user you are allowed to post private
        }
      }
      if(!$is_grp_admin){
        form_set_error('og_public', format_plural(count($groups), 'You can only create a post inside a group, please check @groups.', 'You can only create a post inside a group, please check at least one group among @groups.', array('@groups' => implode(', ', $groups))));
      }     
    }
  }
}