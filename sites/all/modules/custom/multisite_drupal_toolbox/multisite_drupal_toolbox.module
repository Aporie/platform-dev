<?php
/*
* hook_boot
*/
function multisite_drupal_toolbox_boot() {
  global $conf;
  if(!isset($conf["language_count"])) {
	$conf["language_count"] = 2;	
  }
  else {
	if($conf["language_count"] == 1 && $conf["language_default"]->language == 'en')
	  $conf["language_count"] = 2; // set language_count to 2 to force the display of the language prefix	
  }
}
  
  
/*
* hook_feature_set_api
*/ 
function multisite_drupal_toolbox_feature_set_api() {
  return array('version' => '1.0');
}

function _disable_content_type($type) {
  $type_info = node_type_load($type);
  $type_info->module = 'node';
  $type_info->custom = 1;
  $type_info->modified = 1;
  $type_info->locked = 0;
  $type_info->disabled = 1;
  node_type_save($type_info);
}


/**
* Add block to the context
*/
function multisite_drupal_toolbox_enable(){
	
  _add_block_context('site_wide','locale-language','locale','language','highlighted');	
  _add_block_context('site_wide','system-main-menu','system','main-menu','featured');	
  _add_block_context('communities','multisite_og_button-og-contextual-links','multisite_og_button','og-contextual-links', 'sidebar_first','-9');
 
}

/**
* Utility function to add block to a context
*/
function _add_block_context($contextName,$blockTitle,$module,$delta, $region,$weight='-10'){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Make some modifications
	$blockToAdd = array(
			'module' => $module,
			'delta' =>  $delta,
			'region' => $region,
			'weight' => $weight,
					); 
	//Add modification to the context
	$context->reactions['block']['blocks'][$blockTitle]=$blockToAdd;	
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to remove block from context
*/
function _remove_block_context($contextName,$blockTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->reactions['block']['blocks'][$blockTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to add view to a context
*/
function _add_views_context($contextName,$viewTitle){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Add modification to the context
	$context->conditions['views']['values'][$viewTitle]=$viewTitle;	
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to remove block from context
*/
function _remove_views_context($contextName,$viewTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['views']['values'][$viewTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to add content type from context
*/
function _add_content_type_context($contextName, $contentType){

	//Load context
	$context=module_invoke('context','load',$contextName); 
  //Add modification to the context
	$context->conditions['node']['values'][$contentType]=$contentType;
	//Update the context
	module_invoke('context','save',$context);  
}

/**
* Utility function to remove content type from context
*/
function _remove_content_type_context($contextName,$contentType){
	
  //Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['node']['values'][$contentType]);   
	//Update the context
	module_invoke('context', 'save', $context);

}


/**
* Utility function to add path condition to a context
*/
function _add_path_context($contextName,$path){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Add modification to the context
	$context->conditions['path']['values'][$path]=$path;	
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to remove path from context
*/
function _remove_path_context($contextName,$path){
  //Load context
  $context=module_invoke('context','load',$contextName);	 
  //Remove element from the context
  unset($context->conditions['path']['values'][$path]);   
  //Update the context
  module_invoke('context', 'save', $context);
}



/*
* get the rid of a og role name
*/
function get_og_rid($role_name) {
  $r = db_select('og_role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   
  return $r['rid'];
}

/*
* get the rid of a role name
*/
function get_rid($role_name) {
  $r = db_select('role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   
  return $r['rid'];
}


/*
* add content type to newsletter related content field
*/
function add_content_type_newsletters($node_type) {
  if($field = field_info_field('field_related_contents')) {
    $field['settings']['referenceable_types'][$node_type] = $node_type;
    field_update_field($field);
  }
}


// method to switch theme

/*
* hook_menu_alter
*/	
function multisite_drupal_toolbox_menu_alter(&$items) {
  $list_pages = array(
    'admin/structure/feature-set',
    'admin/workbench',
    //'node/%/edit',
    //'user/%/edit',
    'admin/content/comment',
    'admin/content/media',
    'admin/content/webform',
    'admin/structure/block',
    'admin/structure/feature-set',
    //'admin/structure/taxonomy',
    'admin/help',
  );

  foreach($list_pages as $page) {
    $result = db_select('menu_router', 'mr')
      ->fields('mr', array('path'))
      ->condition('path', $page.'%','LIKE')
      ->execute();
    while($record = $result->fetchAssoc()) {
      $items[$record['path']]['theme callback'] = 'multisite_cce_theme';
    }
  }
}

function multisite_cce_theme() {
	return variable_get('default_theme','ec_default');
}

/**
* Hook theme 
*/
function multisite_drupal_toolbox_theme($existing, $type, $theme, $path) {
    $items = array(
        'dropdown' => array()
    );
    return $items;
}
