<?php
/*
* hook_boot
*/
function multisite_drupal_toolbox_boot() {
  global $conf;
  if(!isset($conf["language_count"])) {
	$conf["language_count"] = 2;	
  }
  else {
	if($conf["language_count"] == 1 && $conf["language_default"]->language == 'en')
	  $conf["language_count"] = 2; // set language_count to 2 to force the display of the language prefix	
  }
}

/*
* hook_init
*/
function multisite_drupal_toolbox_init() {
	if(variable_get("language_count",1) == 1) {
	  variable_set("language_count", 2); // set language_count to 2 to force the display of the language prefix and language switcher
	}
}


  

function _disable_content_type($type) {
  $type_info = node_type_load($type);
  $type_info->module = 'node';
  $type_info->custom = 1;
  $type_info->modified = 1;
  $type_info->locked = 0;
  $type_info->disabled = 1;
  node_type_save($type_info);
}


/**
* Utility function to add block to a context
*/
function _add_block_context($contextName,$blockTitle,$module,$delta, $region,$weight='-10'){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Make some modifications
	$blockToAdd = array(
			'module' => $module,
			'delta' =>  $delta,
			'region' => $region,
			'weight' => $weight,
					); 
	//Add modification to the context
	$context->reactions['block']['blocks'][$blockTitle]=$blockToAdd;	
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to remove block from context
*/
function _remove_block_context($contextName,$blockTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->reactions['block']['blocks'][$blockTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to add view to a context
*/
function _add_views_context($contextName,$viewTitle){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Add modification to the context
	$context->conditions['views']['values'][$viewTitle]=$viewTitle;	
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to remove block from context
*/
function _remove_views_context($contextName,$viewTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['views']['values'][$viewTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to add content type from context
*/
function _add_content_type_context($contextName, $contentType){

	//Load context
	$context=module_invoke('context','load',$contextName); 
  //Add modification to the context
	$context->conditions['node']['values'][$contentType]=$contentType;
	//Update the context
	module_invoke('context','save',$context);  
}

/**
* Utility function to remove content type from context
*/
function _remove_content_type_context($contextName,$contentType){
	
  //Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['node']['values'][$contentType]);   
	//Update the context
	module_invoke('context', 'save', $context);

}


/**
* Utility function to add path condition to a context
*/
function _add_path_context($contextName,$path){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Add modification to the context
	$context->conditions['path']['values'][$path]=$path;	
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to remove path from context
*/
function _remove_path_context($contextName,$path){
  //Load context
  $context=module_invoke('context','load',$contextName);	 
  //Remove element from the context
  unset($context->conditions['path']['values'][$path]);   
  //Update the context
  module_invoke('context', 'save', $context);
}



/*
* get the rid of a og role name
*/
function get_og_rid($role_name) {
  $r = db_select('og_role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   
  return $r['rid'];
}

/*
* get the rid of a role name
*/
function get_rid($role_name) {
  $r = db_select('role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   
  return $r['rid'];
}


/*
* add content type to newsletter related content field
*/
function add_content_type_newsletters($node_type) {
  if($field = field_info_field('field_related_contents')) {
    $field['settings']['referenceable_types'][$node_type] = $node_type;
    field_update_field($field);
  }
}


// method to switch theme

/*
* hook_menu_alter
*/	
function multisite_drupal_toolbox_menu_alter(&$items) {
  $list_pages = array(
    'admin/structure/feature-set',
    'admin/workbench',
    //'node/%/edit',
    //'user/%/edit',
	//'user/%',
    'admin/content/comment',
    'admin/content/media',
    'admin/content/webform',
    'admin/structure/block',
    'admin/structure/feature-set',
    //'admin/structure/taxonomy',
    'admin/help',
  );

  foreach($list_pages as $page) {
    $result = db_select('menu_router', 'mr')
      ->fields('mr', array('path'))
      ->condition('path', $page.'%','LIKE')
      ->execute();
    while($record = $result->fetchAssoc()) {
      $items[$record['path']]['theme callback'] = 'multisite_cce_theme';
    }
  }
  
  // block node import with node_export module
  $items['node/add/node_export']['access callback'] = FALSE;
}

function multisite_cce_theme() {
	return variable_get('theme_default','ec_default');
}

/**
* Hook theme 
*/
function multisite_drupal_toolbox_theme($existing, $type, $theme, $path) {
    $items = array(
        'dropdown' => array(
			'variables'=>array(
				'items'=>array(),
			),
		)
    );
    return $items;
}

/*
* helper to disable a block
*/
function _disable_block($module, $delta) {
  db_update('block')
  ->fields(array('status' => '0'))
  ->condition('module', $module, '=')
  ->condition('delta', $delta, '=')
  ->execute();
}



/*
* hook_node_view
*/
function multisite_drupal_toolbox_node_view($node, $view_mode, $langcode) {
  if(module_exists('workbench_moderation')) {
    db_update('block')
    ->fields(array('region' => ''))
    ->condition('module', 'workbench', '=')
    ->condition('delta', 'block', '=')
    ->execute();
  }
}

/*
* hook_form_alter
*/
function multisite_drupal_toolbox_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if($user->uid != 1) {
    switch ($form_id) {
      case 'system_modules':
        unset($form['modules']['Core']['php']); // prevent users to give the permission to inject PHP in input text area
        unset($form['modules']['Development']); // prevent users to give access to the devel modules
      break;

      case 'user_admin_permissions':
        unset($form['permission']['administer modules']); // prevent users to give  the permission "administer modules"
        unset($form['permission']['administer features']);
        unset($form['permission']['manage features']);

        foreach(array_keys(user_roles()) as $rid) { // hide checkboxes in the permissions admin page
          unset($form['checkboxes'][$rid]['#options']['administer modules']);
          unset($form['checkboxes'][$rid]['#options']['administer features']);
          unset($form['checkboxes'][$rid]['#options']['manage features']);
        }
      break;

      case "user_admin_account":
        unset($form['accounts']['#options'][1]); // hide admin user 1
      break;

      case "user_admin_roles":
        //unset($form['roles'][3]);
        //unset($form['roles'][4]);
      case "user_admin_role": // prevent predefined roles updated for non admin
        if(isset($form['rid'])) {
          if($form['rid']['#value'] == 3 || $form['rid']['#value'] == 4) {
            unset($form['actions']);
            $form["name"]['#disabled'] = TRUE;
          }
        }
      break;
    }
  }

  switch ($form_id) {
    case 'menu_edit_item':
      //check the "Show as expanded" box
      if (isset($form['original_item']['#value']['expanded']) && (isset($form['original_item']['#value']['mlid']) && $form['original_item']['#value']['mlid'] != 0)) {
        $form['expanded']['#default_value'] = $form['original_item']['#value']['expanded'];
      } else {
        $form['expanded']['#default_value'] = 1;
      }
    break;
  }
}


/*
* Solr config bundle
*/
function config_solr_bundle($bundle, $op) {
  switch($op) {
    case 'add':
      db_insert('apachesolr_index_bundles')->fields(array(
        'env_id' => 'solr',
        'entity_type' => 'node',
        'bundle' => $bundle,
      ))->execute();		
	  break;
	case 'delete':
	  db_delete('apachesolr_index_bundles')->condition('bundle', $bundle)->execute();
	  break;
  }	
}


/*
* add content type to notification
*/
function notification_content_type($content_type, $op) {
  switch($op) {
    case 'add':
	  if(module_exists('notification')) {
        $ct = variable_get("notifications_content_type", array());
        $ct += array($content_type => $content_type);
        variable_set("notifications_content_type", $ct);
      }
	  break;
    case 'delete':
	  if(module_exists('notification')) {
        $ct = variable_get("notifications_content_type");
		$item = array_search(array($content_type => $content_type), $ct);
		unset($ct[$item]);
        variable_set("notifications_content_type", $ct);
      }		
	  break;
  }
}


/*
* add content type to the "related-contents" field of the simplenews content type
*/
function simplenews_related_content_type($content_type, $op) {
  //if(module_exists('newsletters')) { // check if the feature newsletter is enabled
    switch($op) {
      case 'add':
        $field = field_read_fields(array('field_name' => "field_related_contents"));
        if($field) {
		  $field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type] = $content_type;
          field_update_field($field["field_related_contents"]);
		}
	    break;
	  case 'delete':
		$field = field_read_fields(array('field_name' => "field_related_contents"));  
		if($field) {
          unset($field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type]);
          field_update_field($field["field_related_contents"]);	
		}
	    break;
    }
  //}
}

/*
 * hook_alter_page 
*/
function multisite_drupal_toolbox_page_alter(&$page) {
  global $user;
  if(variable_get('alert_message_enable', FALSE) && $user->uid > 0) {
    $message = array(
      '#weight' => -1000, 
      '#type' => 'markup', 
      '#markup' => variable_get('alert_message_body', ""),
      '#prefix' => '<div id="alter_message" class="messages warning">',
      '#suffix' => '</div>',
    );	  

    $elt = array('alert_message' => $message);
    if(array_key_exists('content_top', $page))
      array_unshift($page['content_top'], $elt);
    else
      $page['content_top']['alert_message'] = $message;
  }
}

