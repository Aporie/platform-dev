<?php

/**
 * Implements hook_menu().
 */
function multisite_drupal_toolbox_menu() {

  $items['admin/workbench/comment'] = array(
      'title' => 'Comments',
      'description' => 'List and edit site comments and the comment approval queue.',
      'page callback' => 'comment_admin',
      'access arguments' => array('administer comments'),
      'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
      'file' => 'comment.admin.inc',
      'file path' => drupal_get_path('module', 'comment'),
  );
  $items['admin/workbench/comment/new'] = array(
      'title' => 'Published comments',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );
  $items['admin/workbench/comment/approval'] = array(
      'title' => 'Unapproved comments',
      'title callback' => 'comment_count_unpublished',
      'page arguments' => array('approval'),
      'access arguments' => array('administer comments'),
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/workbench/linkchecker'] = array(
      'access callback' => 'multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench',
      'description' => 'Shows a list of broken links in content.',
      'page callback' => 'linkchecker_user_report_page_workbench',
      'title' => 'Broken links',
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
  );

  $items['admin/config/security'] = array(
      'title' => 'Security settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('multisite_drupal_toolbox_form_security_settings'),
      'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/security/settings'] = array(
      'title' => 'Security settings',
      'description' => 'Configure security settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('multisite_drupal_toolbox_form_security_settings'),
      'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
* Implements hook_preprocess_html().
* Alter html code (to add js and css).
*/
function multisite_drupal_toolbox_preprocess_html(&$variables) {
  // Add icons font
  drupal_add_css(drupal_get_path('module', 'multisite_drupal_toolbox') . '/icons/style.css', array('basename' => 'icons-font'));

  // Add Fancybox
  $path = libraries_get_path('fancybox');
  if ($path) {
    drupal_add_css($path . '/jquery.fancybox.css');
    drupal_add_js($path . '/jquery.fancybox.pack.js');
    drupal_add_css($path . '/helpers/jquery.fancybox-buttons.css');
    drupal_add_js($path . '/helpers/jquery.fancybox-buttons.js');
    drupal_add_js($path . '/helpers/jquery.fancybox-media.js');
    drupal_add_css($path . '/helpers/jquery.fancybox-thumbs.css');
    drupal_add_js($path . '/helpers/jquery.fancybox-thumbs.js');
  }
}

/**
* Implements hook_boot().
*/
function multisite_drupal_toolbox_boot() {
  global $conf;
  if (!isset($conf["language_count"])) {
    $conf["language_count"] = 2;
  }
  else {
    if ($conf["language_count"] == 1 && $conf["language_default"]->language == 'en')
      $conf["language_count"] = 2; // set language_count to 2 to force the display of the language prefix
  }
}

/**
* Implements hook_init().
*/
function multisite_drupal_toolbox_init() {
  if (variable_get("language_count", 1) == 1) {
    variable_set("language_count", 2); // set language_count to 2 to force the display of the language prefix and language switcher
  }
}

/**
* Public function to disable a content type
*/
function multisite_drupal_toolbox_disable_content_type($type) {
  $type_info = node_type_load($type);
  $type_info->module = 'node';
  $type_info->custom = 1;
  $type_info->modified = 1;
  $type_info->locked = 0;
  $type_info->disabled = 1;
  node_type_save($type_info);
}
function _disable_content_type($type) {
  multisite_drupal_toolbox_disable_content_type($type);
}

/**
* Public function to add block to a context
*/
function multisite_drupal_toolbox_add_block_context($contextName, $blockTitle, $module, $delta, $region, $weight='-10') {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Make some modifications
  $blockToAdd = array(
    'module' => $module,
    'delta' =>  $delta,
    'region' => $region,
    'weight' => $weight,
  );
  //Add modification to the context
  $context->reactions['block']['blocks'][$blockTitle]=$blockToAdd;
  //Update the context
  module_invoke('context', 'save', $context);
}
function _add_block_context($contextName, $blockTitle, $module, $delta, $region, $weight='-10') {
  multisite_drupal_toolbox_add_block_context($contextName, $blockTitle, $module, $delta, $region, $weight);
}

/**
* Public function to remove block from context
*/
function multisite_drupal_toolbox_remove_block_context($contextName, $blockTitle) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Remove element from the context
  unset($context->reactions['block']['blocks'][$blockTitle]);
  //Update the context
  module_invoke('context', 'save', $context);
}
function _remove_block_context($contextName, $blockTitle) {
  multisite_drupal_toolbox_remove_block_context($contextName, $blockTitle);
}

/**
* Public function to add view to a context
*/
function multisite_drupal_toolbox_add_views_context($contextName, $viewTitle) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Add modification to the context
  $context->conditions['views']['values'][$viewTitle]=$viewTitle;
  //Update the context
  module_invoke('context', 'save', $context);
}
function _add_views_context($contextName, $viewTitle) {
  multisite_drupal_toolbox_add_views_context($contextName, $viewTitle);
}

/**
* Public function to remove block from context
*/
function multisite_drupal_toolbox_remove_views_context($contextName, $viewTitle) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Remove element from the context
  unset($context->conditions['views']['values'][$viewTitle]);
  //Update the context
  module_invoke('context', 'save', $context);
}
function _remove_views_context($contextName, $viewTitle) {
  multisite_drupal_toolbox_remove_views_context($contextName, $viewTitle);
}

/**
* Public function to add content type from context
*/
function multisite_drupal_toolbox_add_content_type_context($contextName, $contentType) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Add modification to the context
  $context->conditions['node']['values'][$contentType]=$contentType;
  //Update the context
  module_invoke('context', 'save', $context);
}
function _add_content_type_context($contextName, $contentType) {
  multisite_drupal_toolbox_add_content_type_context($contextName, $contentType);
}

/**
* Public function to remove content type from context
*/
function multisite_drupal_toolbox_remove_content_type_context($contextName, $contentType) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Remove element from the context
  unset($context->conditions['node']['values'][$contentType]);
  //Update the context
  module_invoke('context', 'save', $context);
}
function _remove_content_type_context($contextName, $contentType) {
  multisite_drupal_toolbox_remove_content_type_context($contextName, $contentType);
}

/**
* Public function to add path condition to a context
*/
function multisite_drupal_toolbox_add_path_context($contextName, $path) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Add modification to the context
  $context->conditions['path']['values'][$path]=$path;
  //Update the context
  module_invoke('context', 'save', $context);
}
function _add_path_context($contextName, $path) {
  multisite_drupal_toolbox_add_path_context($contextName, $path);
}

/**
* Public function to remove path from context
*/
function multisite_drupal_toolbox_remove_path_context($contextName, $path) {
  //Load context
  $context=module_invoke('context', 'load', $contextName);
  //Remove element from the context
  unset($context->conditions['path']['values'][$path]);
  //Update the context
  module_invoke('context', 'save', $context);
}
function _remove_path_context($contextName, $path) {
  multisite_drupal_toolbox_remove_path_context($contextName, $path);
}

/*
* get the rid of a og role name
*/
function multisite_drupal_toolbox_get_og_rid($role_name) {
  $r = db_select('og_role', 'r')
    ->condition('name', $role_name, '=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();
  return $r['rid'];
}
function get_og_rid($role_name) {
  return multisite_drupal_toolbox_get_og_rid($role_name);
}

/*
* get the rid of a role name
*/
function multisite_drupal_toolbox_get_rid($role_name) {
  $r = db_select('role', 'r')
    ->condition('name', $role_name, '=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();
  return $r['rid'];
}
/**
 * Obsolete
 */
function get_rid($role_name) {
  return multisite_drupal_toolbox_get_rid($role_name);
}

/**
 * Public function to add content type to newsletter related content fieldt
 */
function multisite_drupal_toolbox_add_content_type_newsletters($node_type) {
  if ($field = field_info_field('field_related_contents')) {
    $field['settings']['referenceable_types'][$node_type] = $node_type;
    field_update_field($field);
  }
}
/**
 * Obsolete
 */
function add_content_type_newsletters($node_type) {
  multisite_drupal_toolbox_add_content_type_newsletters($node_type);
}

/**
* Implements hook_menu_alter().
*/
function multisite_drupal_toolbox_menu_alter(&$items) {
  $list_pages = array(
    'admin/structure/feature-set',
    'admin/workbench',
    'admin/content/comment',
    'admin/content/media',
    'admin/content/webform',
    'admin/structure/block',
    'admin/structure/feature-set',
    'admin/help',
  );

  foreach ($list_pages as $page) {
    $result = db_select('menu_router', 'mr')
      ->fields('mr', array('path'))
      ->condition('path', $page . '%', 'LIKE')
      ->execute();
    while ($record = $result->fetchAssoc()) {
      $items[$record['path']]['theme callback'] = 'multisite_cce_theme';
    }
  }

  // block node import with node_export module
  $items['node/add/node_export']['access callback'] = FALSE;

  // hide broken links tab in the my account page
  $items['user/%user/linkchecker']['access callback'] = FALSE;

  // only super admin can configure apache solR
  $items['admin/config/search/apachesolr']['access callback'] = 'is_admin';
}

/**
* Check if the user is super admin
* ?not used?
*/
function multisite_drupal_toolbox_is_admin() {
  global $user;

  if($user->uid == 1)
    return TRUE;
  return FALSE;
}
/**
 * Obsolete
 */
function is_admin() {
  return multisite_drupal_toolbox_is_admin();
}

/**
* Check if current theme is ec_default theme
* ?not used?
*/
function multisite_drupal_toolbox_cce_theme() {
  return variable_get('theme_default', 'ec_default');
}
/**
 * Obsolete
 */
function multisite_cce_theme() {
  return multisite_drupal_toolbox_cce_theme();
}

/**
* Implements hook_theme().
*/
function multisite_drupal_toolbox_theme($existing, $type, $theme, $path) {
  $items = array(
    'dropdown' => array(
      'variables' => array(
         'items' => array(),
      ),
    )
  );
  return $items;
}

/**
 * Public function to disable a block
 */
function multisite_drupal_toolbox_disable_block($module, $delta) {
  db_update('block')
  ->fields(array('status' => '0'))
  ->condition('module', $module, '=')
  ->condition('delta', $delta, '=')
  ->execute();
}
/**
 * Obsolete
 */
function _disable_block($module, $delta) {
  multisite_drupal_toolbox_disable_block($module, $delta);
}

/**
* Implements hook_node_view().
*/
function multisite_drupal_toolbox_node_view($node, $view_mode, $langcode) {
  if (module_exists('workbench_moderation')) {
    db_update('block')
    ->fields(array('region' => ''))
    ->condition('module', 'workbench', '=')
    ->condition('delta', 'block', '=')
    ->execute();
  }
}

/**
* Implements hook_form_alter().
*/
function multisite_drupal_toolbox_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if ($user->uid != 1) {
    switch ($form_id) {
      case 'system_modules':
        unset($form['modules']['Core']['php']); // prevent users to give the permission to inject PHP in input text area
        unset($form['modules']['Development']); // prevent users to give access to the devel modules
      break;

      case 'user_admin_permissions':
        unset($form['permission']['administer modules']); // prevent users to give  the permission "administer modules"
        unset($form['permission']['administer features']);
        unset($form['permission']['manage features']);
        unset($form['permission']['administer software updates']);

        foreach (array_keys(user_roles()) as $rid) { // hide checkboxes in the permissions admin page
          unset($form['checkboxes'][$rid]['#options']['administer modules']);
          unset($form['checkboxes'][$rid]['#options']['administer features']);
          unset($form['checkboxes'][$rid]['#options']['manage features']);
          unset($form['checkboxes'][$rid]['#options']['administer software updates']);
        }
      break;

      case "user_admin_account":
        unset($form['accounts']['#options'][1]); // hide admin user 1
      break;

      case "user_admin_roles":
        //unset($form['roles'][3]);
        //unset($form['roles'][4]);
      case "user_admin_role": // prevent predefined roles updated for non admin
        if (isset($form['rid'])) {
          if ($form['rid']['#value'] == 3 || $form['rid']['#value'] == 4) {
            unset($form['actions']);
            $form["name"]['#disabled'] = TRUE;
          }
        }
      break;
      case "workbench_moderation_admin_states_form": // prevent administrator from changing existing workflow states
        $blocked_states = array('draft', 'validated', 'published', 'needs_review', 'archived');
        $states = $form['states'];
        foreach($states as $state_id => $state) {
          if(isset($state['delete']) && in_array($state_id, $blocked_states))
            $form['states'][$state_id]['delete']['#disabled'] = TRUE;
        }
      break;
      case "workbench_moderation_admin_transitions_form": // prevent administrator from changing existing workflow transitions
        $blocked_transitions = array('published_archived','draft_needs_review','needs_review_published','needs_review_draft','needs_review_validated','validated_published');
        $transitions = $form['transitions'];
        foreach($transitions as $transition_id => $transition) {
          if(isset($transition['delete'])) {
            $transition_name = $transition['transition']['#value']->from_name.'_'.$transition['transition']['#value']->to_name;
            if(in_array($transition_name, $blocked_transitions))
              $form['transitions'][$transition_id]['delete']['#disabled'] = TRUE;
          }
        }
      break;
    }
  }

  switch ($form_id) {
    case 'menu_edit_item':
      //check the "Show as expanded" box
      if (isset($form['original_item']['#value']['expanded']) && (isset($form['original_item']['#value']['mlid']) && $form['original_item']['#value']['mlid'] != 0)) {
        $form['expanded']['#default_value'] = $form['original_item']['#value']['expanded'];
      }
      else {
        $form['expanded']['#default_value'] = 1;
      }
      break;
    case 'comment_admin_overview':
      $form['#submit'][] = 'workbench_redirect_submit';
      break;
  }
}

/**
*
*/
function multisite_drupal_toolbox_workbench_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    'admin/workbench/comment',
  );
}
/**
 * Obsolete
 */
function workbench_redirect_submit($form, &$form_state) {
  multisite_drupal_toolbox_workbench_redirect_submit($form, $form_state);
}

/**
*
*/
function multisite_drupal_toolbox_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  // hide publish and unpublish options from the admin content form
  // publish and unpublish actions must only be done thru the workbench
  unset($form['admin']['options']['operation']['#options']['publish']);
  unset($form['admin']['options']['operation']['#options']['unpublish']);
}

/**
 * Public function to add or delete nodes from the index
 */
function multisite_drupal_toolbox_config_solr_bundle($bundle, $op) {
  switch ($op) {
    case 'add':
      db_insert('apachesolr_index_bundles')->fields(array(
        'env_id' => 'solr',
        'entity_type' => 'node',
        'bundle' => $bundle,
      ))->execute();
      break;
    case 'delete':
      db_delete('apachesolr_index_bundles')->condition('bundle', $bundle)->execute();
      break;
  }
}
/**
 * Obsolete
 */
function config_solr_bundle($bundle, $op) {
  multisite_drupal_toolbox_config_solr_bundle($bundle, $op);
}

/**
 * Public function to add content type to notification
 */
function multisite_drupal_toolbox_notification_content_type($content_type, $op) {
  switch ($op) {
    case 'add':
      if (module_exists('notification')) {
        $ct = variable_get("notifications_content_type", array());
        $ct += array($content_type => $content_type);
        variable_set("notifications_content_type", $ct);
      }
      break;
    case 'delete':
      if (module_exists('notification')) {
        $ct = variable_get("notifications_content_type");
        $item = array_search(array($content_type => $content_type), $ct);
        unset($ct[$item]);
        variable_set("notifications_content_type", $ct);
      }
      break;
  }
}
/**
 * Obsolete
 */
function notification_content_type($content_type, $op) {
  multisite_drupal_toolbox_notification_content_type($content_type, $op);
}


/**
 * Public function to add content type to the "related-contents" field of the simplenews content type
 */
function multisite_drupal_toolbox_simplenews_related_content_type($content_type, $op) {
    switch ($op) {
      case 'add':
        $field = field_read_fields(array('field_name' => "field_related_contents"));
        if ($field) {
          $field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type] = $content_type;
          field_update_field($field["field_related_contents"]);
        }
        break;
      case 'delete':
        $field = field_read_fields(array('field_name' => "field_related_contents"));
        if ($field) {
          unset($field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type]);
          field_update_field($field["field_related_contents"]);
        }
        break;
    }
}
/**
 * Obsolete
 */
function simplenews_related_content_type($content_type, $op) {
  multisite_drupal_toolbox_simplenews_related_content_type($content_type, $op);
}

/**
 * Public function to add content type to the rate widget
 */
function multisite_drupal_toolbox_rate_content_type($content_type, $op) {
  switch ($op) {
    case 'add':
      if (module_exists('rate')) {
        $rw = variable_get("rate_widgets", array());
        foreach ($rw as $key => $value) {
          if ('rate_fivestar' == $value->name) {
            $value->node_types[] = $content_type;
          }
        }
        variable_set("rate_widgets", $rw);
      }
    break;

    case 'delete':
      if (module_exists('rate')) {
        $rw = variable_get("rate_widgets", array());
        foreach ($rw as $key => $value) {
          if ('rate_fivestar' == $value->name) {
            foreach ($value->node_types as $id => $item) {
              if ($content_type == $item) {
                unset($value->node_types[$id]);
              }
            }
          }
        }
        variable_set("rate_widgets", $rw);
      }
    break;
  }
}
/**
 * Obsolete
 */
function rate_content_type($content_type, $op) {
  multisite_drupal_toolbox_rate_content_type($content_type, $op);
}

/**
* Implements hook_page_alter().
*/
function multisite_drupal_toolbox_page_alter(&$page) {
  global $user;
  if (variable_get('alert_message_enable', FALSE) && $user->uid > 0) {
    $message = array(
      '#weight' => -1000,
      '#type' => 'markup',
      '#markup' => variable_get('alert_message_body', ""),
      '#prefix' => '<div id="alter_message" class="messages warning">',
      '#suffix' => '</div>',
    );

    $elt = array('alert_message' => $message);
    if (array_key_exists('content_top', $page))
      array_unshift($page['content_top'], $elt);
    else
      $page['content_top']['alert_message'] = $message;
  }
}


/**
* Adds the linkchecked user report page to the workbench.
*/
function multisite_drupal_toolbox_linkchecker_user_report_page_workbench() {
  global $user;
  module_load_include('inc', 'linkchecker', 'linkchecker.pages');
  return linkchecker_user_report_page($user);
}
/**
 * Obsolete
 */
function linkchecker_user_report_page_workbench() {
  return multisite_drupal_toolbox_linkchecker_user_report_page_workbench();
}

/*
 *
*/
function multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench() {
  global $user;
  module_load_include('inc', 'linkchecker', 'linkchecker.pages');
  return _linkchecker_user_access_account_broken_links_report($user);
}
/**
 * Obsolete
 */
function _linkchecker_user_access_account_broken_links_report_workbench() {
  return multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench();
}

/**
 * Public function to add content type to be checked by linkchecker
 */
function multisite_drupal_toolbox_content_type_linkchecker($type, $op) {
  $node_type_scan = variable_get("linkchecker_scan_nodetypes", array());
  switch ($op) {
    case 'add':
      $node_type_scan[$type] = $type;
      break;
    case 'delete':
      unset($node_type_scan[$type]);
      break;
  }
  variable_set("linkchecker_scan_nodetypes", $node_type_scan);
}
/**
 * Obsolete
 */
function _content_type_linkchecker($type, $op) {
  multisite_drupal_toolbox_content_type_linkchecker($type, $op);
}

/*
 * security form settings
*/
function multisite_drupal_toolbox_form_security_settings($form, &$form_state) {
  $form['security_allowed_tags'] = array(
    '#type' => 'textarea',
    '#title' => t('allowed tags'),
    '#default_value' => variable_get('security_allowed_tags'),
    '#description' => t('One tag per line.'),
  );

  $form['security_bypassed_nodes'] = array(
    '#type' => 'textarea',
    '#title' => t('nodes to bypass'),
    '#default_value' => variable_get('security_bypassed_nodes'),
    '#description' => t('Insert the nid of nodes that must not be filtered to check xss attacks.<br/>One nid per line.'),
  );

  return system_settings_form($form);
}
/**
 * Obsolete
 */
function form_security_settings($form, &$form_state) {
  return multisite_drupal_toolbox_form_security_settings($form, $form_state);
}

/**
 * Implements hook_node_presave().
 */
function multisite_drupal_toolbox_node_presave($node) {
  // security process to prevent xss attack in node contents

  $nodes_bypass = explode("\n", variable_get("security_bypassed_nodes", ""));
  $tags_allowed = explode("\n", variable_get("security_allowed_tags", ""));

  foreach($tags_allowed as $id => $tag) {
    $tags_allowed[$id] = trim($tag);
  }

  // check if the node must be bypass
  if(!in_array($node->nid, $nodes_bypass)) {
    $node->body['und'][0]['value'] = filter_xss($node->body['und'][0]['value'], $tags_allowed); // use the drupal filter_xss function to filter xss attacks
  }
}

/**
 * Implements hook_url_inbound_alter(). Santizie URL inputs.
 */
function multisite_drupal_toolbox_url_inbound_alter(&$path, $original_path, $path_language) {
  if(!($path == '<front>')) $path = check_url($path);
}

/**
 * Retrieve relevant information about a URL. Specifically this function is
 * usable for internal (absolute) URL:s, but it also works for external URL:s.
 *
 * @param $url
 *   The url that should be scanned.
 *
 * @return $path_info
 *   An associative array containing:
 *   - url: The same as the argument $url, untouched.
 *   - target: Either "internal" or "external".
 *   - requested_path: If internal, the path requested relative to Drupal root.
 *     The only exception is when frontpage is referred directly, then it will
 *     be whatever the frontpage is set to.
 *   - system_path: If internal and the path is valid, the Drupal system path,
 *     e.g. "node/23".
 *   - query_fragment: If internal, the query and fragment of the url.
 *     Typically it is not needed for searching and is just reappended back
 *     when processing of the path is done. It could e.g. look like
 *     "?foo=bar#anchor".
 *   - safe_url: If external, and the protocol is http or https, this will be
 *     the original url, stripped from everything that could potentially be
 *     dangerous. E.g. "http://user:pass@example.org/settings?evilaction=true"
 *     will become "http://example.org/settings".
 */
function multisite_drupal_toolbox_linkit_scan_url($url, $field) {
//Note this function has been heavily modified: To see original see linkit.module.
  global $base_url;
  // We will not use the drupal wrapper function 'drupal_pasre_url' as that
  // function should only be used for URLs that have been generated by the
  // system, and we cant be sure that this is the case here.
  $parts['path'] = '';
  $parts = parse_url(trim($url, '/'));

  if (!isset($parts['scheme']) || !isset($parts['host'])) {
    // Not an absolute URL.
    form_set_error($field, 'Please insert a complete url. ex: http://www.myurl.com');
    return FALSE;
  }

  // Make a new array, this will hold the components from parse_url() and our
  // own "Linkit" components.
  $path_info = array();

  // Append the original components from parse_url() to our array.
  $path_info += $parts;

  // Save the whole URL.
  $path_info['url'] = $url;

  if (!isset($path_info['query'])) {
    $path_info['query'] ='';
  }

  // Convert the query string to an array as Drupal can only handle querys as
  // arrays.
  // @see http://api.drupal.org/drupal_http_build_query
  parse_str($path_info['query'], $path_info['query']);

  // The 'q' parameter contains the path of the current page if clean URLs are
  // disabled. It overrides the 'path' of the URL when present, even if clean
  // URLs are enabled, due to how Apache rewriting rules work.
  if (isset($path_info['query']['q'])) {
    $path_info['path'] = $path_info['query']['q'];
    unset($path_info['query']['q']);
  }

  // Internal URL.
  // @TODO: Handle https and other schemes here?
  if (trim($path_info['scheme'] . '://' . $path_info['host'] . base_path(), '/') == $base_url) {
    $path_info['target'] = 'internal';

    //mct:Handle Multilingual internal urls
    $langs = array();
    $lang_list = language_list();
    foreach ($lang_list as $key => $value) {
      $langs[] = '/' . $key . '/';
    }
    $path_info['path'] = str_replace($langs, '/', $path_info['path']);

    // Remove the subdirectory name from the path if the site is installed in
    // subdirectory. It will be added again by the url() function.
    if (base_path() != "/") {
      $path_info['path'] = trim(preg_replace(base_path(), '', $path_info['path'], 1), '/');
    }

    // Trim the path from slashes.
    $path_info['path'] = trim($path_info['path'], '/');

    // If we have an empty path, and an internal target, we can assume that the
    // URL should go the the frontpage.
    if (empty($path_info['path'])) {
      $path_info['frontpage'] = TRUE;
      $path_info['path'] = variable_get('site_frontpage', 'node');
    }

     // Check if the path already is an alias.
    if (!$processed_path = drupal_lookup_path('source', $path_info['path'])) {
      // Not an alias, so keep the original value. //FALSE
      //test url path alias then:

      $query = db_select('menu_router', 'mrt');
      $result = $query
          ->condition('path', '%' . $path_info['path'] . '%', 'LIKE')
          ->fields('mrt', array('path'))
          ->execute()
          ->fetchAll();

      if (isset($result[0])) {
        $processed_path = $path_info['path'];
      }
      else {
        form_set_error($field, 'Not a valid internal url');
      }
    }

    // Add the "real" system path (not the alias) if the current user have
    // access to the URL.
    $path_info['system_path'] = drupal_valid_path($processed_path) ? $processed_path : FALSE;
    //If no path returned it's an invalid SYSTEM PATH (Remark: if it's not a system path (an alias) then we cannot determine if its valid or not.
    if (!$path_info['system_path']) {
      form_set_error($field, 'Not a valid internal url');
      return FALSE;
    }
  }
  // External URL
  else {
    //$hey = drupal_http_request($url); //try to see if link is valid
    //drupal_set_message(print_r($hey,true), 'warning');
    //Clean external url: NOT used because it make youtube video or other impossible to use.
    // $path_info['target'] = 'external';
    // if (preg_match('~^https?$~', $parts['scheme'])) {
      // $path_info['safe_url'] = $parts['scheme'] . '://' . $parts['host'] . $path_info['path'];
    // }
  }

  return $path_info;
}
/**
 * Obsolete
 */
function linkit_scan_url($url, $field) {
  return multisite_drupal_toolbox_linkit_scan_url($url, $field);
}

/**
 * Implements hook_media_token_to_markup_alter(). Use fancybox for all image insert in content with the "insert media" button of the wysiwyg.
 */
function multisite_drupal_toolbox_media_token_to_markup_alter(&$element, &$tag_info, &$settings) {
  if ($element['content']['file']['#theme'] == 'image_style') {
    $element['content']['#prefix'] = '<a href="'.file_create_url($element['content']['file']['#file']->uri).'" class="fancybox">';
    $element['content']['#suffix'] = '<a/>';
  }
}

