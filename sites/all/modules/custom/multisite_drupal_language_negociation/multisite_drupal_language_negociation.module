<?php
/**
 * @file
 * multisite_drupal_language_negociation.module
 */

if(!defined('LOCALE_LANGUAGE_NEGOTIATION_URL_SUFFIX'))
  define('LOCALE_LANGUAGE_NEGOTIATION_URL_SUFFIX', 'locale-url-suffix');
/**
 * Implements hook_language_negotiation_info().
 */
function multisite_drupal_language_negociation_language_negotiation_info() {
  $file = drupal_get_path('module', 'multisite_drupal_language_negociation') . '/multisite_drupal_language_negociation.inc';
  $providers = array();
  $providers[LOCALE_LANGUAGE_NEGOTIATION_URL_SUFFIX] = array(
    'types' => array(LANGUAGE_TYPE_CONTENT, LANGUAGE_TYPE_INTERFACE, LANGUAGE_TYPE_URL),
    'callbacks' => array(
      'language' => 'multisite_language_provider_callback',
      //'url_rewrite' => 'multisite_url_rewrite_callback',
     ),
    'file' => $file,
    'weight' => -8,
    'name' => t('URL suffix'),
    'description' => t('Determine the language from the URL path suffix.'),
    'config' => 'admin/config/regional/language/configure/url-suffix',
  );
  return $providers;
}


/**
 * hook_menu
 */
function multisite_drupal_language_negociation_menu() {
  $items['admin/config/regional/language/configure/url-suffix'] = array(
    'title' => 'Language suffix delimiter',
    'description' => 'Settings to choose the language suffix delimiter in the url',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_drupal_language_negociation_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function multisite_drupal_language_negociation_form($form, &$form_state) {
  $form['language_suffix_delimiter'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
    '#title' => t('language suffix delimiter'),
    '#default_value' => variable_get('language_suffix_delimiter', '_'),
    '#description' => 'Ex : character like an underscore or hyphen..',
  );
  return system_settings_form($form);
}


/*
 * custom hook_url_custom_alter
 * handle suffix language in url
 */
function multisite_drupal_language_negociation_url_custom_alter(&$path, &$options, $original_path) {
  static $drupal_static_fast;
  if (language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL_SUFFIX)) {  // only if URL suffix provider is enabled
    if (!isset($drupal_static_fast)) {
      $drupal_static_fast['languages'] = &drupal_static(__FUNCTION__);
    }
    $languages = &$drupal_static_fast['languages'];

    if (!isset($languages)) {
      $languages = language_list('enabled');
      $languages = array_flip(array_keys($languages[1]));
    }

    // Language can be passed as an option, or we go for current URL language.
    if (!isset($options['language'])) {
      global $language_url;
      $options['language'] = $language_url;
    }
    // We allow only enabled languages here.
    elseif (!isset($languages[$options['language']->language])) {
      unset($options['language']);
      return;
    }

    if (isset($options['language'])) {
      if (!empty($options['language']->prefix)) {
        //$options['prefix'] = $options['language']->prefix . '/';
        $delimiter = variable_get('language_suffix_delimiter', '_');
        if ($path == '<front>' || $path == '') { // handle the homepage url
          $path = ($options['language']->prefix == 'en')?'':'index' . $delimiter.$options['language']->prefix; // no path and suffix for the home page in english
        }
        else
          $path .= $delimiter . $options['language']->prefix;
      }
    }
  }
}

/*
 * hook_language_types_info_alter
 */
function multisite_drupal_language_negociation_language_types_info_alter(&$language_types) {
  $defined_providers = language_negotiation_info();
  if(isset($defined_providers[LOCALE_LANGUAGE_NEGOTIATION_URL_SUFFIX])) {
    // put the locale-url-suffix as priority provider for language type url
    array_unshift($language_types[LANGUAGE_TYPE_URL]['fixed'], 'locale-url-suffix');
  }
}

/**
 * Implements hook_form_alter().
 */
function multisite_drupal_language_negociation_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
      $language_negociation = variable_get('language_negotiation_language');
      if(isset($language_negociation['locale-url-suffix'])) //  disable URL method if URL-suffix method is enabled
        $form['language']['enabled']['locale-url']['#disabled'] = TRUE;
      break;
  }
}


/**
 * Implementation of hook_query_node_access_alter().
 *
 * Rewrite node queries so language selection options are enforced.
 */

/*
 *
 * no more used
 * instead of using a hook_query_node_access_alter, we add the language filter explicitly in views
 *
 *
function multisite_drupal_language_negociation_query_node_access_alter(QueryAlterableInterface $query) {
  if (!i18n_select_mode('nodes') && i18n_select_check_query($query) && ($table_alias = i18n_select_check_table($query, 'node', 'nid'))) {
    $query->condition(db_or()->condition($table_alias . '.language', i18n_select_langcodes())->condition($table_alias . '.tnid',0));
    // Mark query as altered
    $query->addTag('i18n_select');
  }
}
*/

