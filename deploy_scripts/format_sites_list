#!/bin/bash
# Simple tool that takes a list of subsites and format them so the list can be
# easily included in a commit.
current_script="$(readlink -f $0)"
script_dir="$(dirname "${current_script}")"

source "${script_dir}/lib/functions.sh"

function usage {
	output "Usage: $0 <target> [--count|--count-unless-single]"
	output '    target is either a space-separated list of 1 to n subsites (as a single argument), or "@sites" for all known subsites'
	output '    --count will systematically output "1 subsite" or "n subsites" without ever displaying a site name.'
	output '    --count-unless-single will output "<site-name>" if there is only one site or "n subsites" if there are several.'
	output '    The default behaviour outputs a human readable list of all sites.'
}


# Simple arguments check
target="$1"
shift
[ -z "${target}" ] && usage && exit 48

# Handle "@sites"
if [ "${target}" == '@sites' ]; then
	echo "all sites"
	exit 0
fi

# Count sites
sites_list="${target}"
sites_count=$(echo "${sites_list}" | wc -w)


# --count will systematically output "1 subsite" or "n subsites" without ever
# displaying a site name.
if [[ "${1}" == '--count' || "${1}" == '--count-unless-single' ]]; then
	if [ "${sites_count}" -gt 1 ]; then
		echo "${sites_count} subsites"
	elif [ "${sites_count}" -eq 1 ]; then
		if [ "${1}" == '--count-unless-single' ]; then
			echo "${sites_list}" | sed 's, ,,g'
		else
			echo "1 subsite"
		fi
	else
		echo "no subsite"
	fi
	exit 0
fi

result=''
i=0
((no_comma_pos=sites_count-1))
for site in $sites_list; do
	result="${result}${site}"
	((i++))
	if [ "${i}" -eq "${no_comma_pos}" ]; then
		result="${result} and "
	elif [ "${i}" -lt "${no_comma_pos}" ]; then
		result="${result}, "
	fi
done
echo "${result}"

exit 0
