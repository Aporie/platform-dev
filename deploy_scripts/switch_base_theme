#!/bin/bash
current_script="$(readlink -f $0)"
script_dir="$(dirname "${current_script}")"

source "${HOME}/.bash_profile"
source "${script_dir}/lib/functions.sh"

function usage {
	output "Usage: $0 <drupal-directory> <target> <source-theme> <target-theme>"
	output '    drupal-directory is a Drupal base directory, i.e. a directory hosting the index.php file'
	output '    target is either a space-separated list of 1 to n subsites (as a single argument), or "@sites" for all known subsites'
	output '    All target sites using <source-theme> as base theme will be switched to <target-theme>'
}

# Simple arguments check
drupal_path=$1
shift
target="$1"
shift
source_theme="$1"
shift
target_theme="$1"
[ -z "${drupal_path}" ] && usage && exit 50
[ -z "${target}" ] && usage && exit 48
[ -z "${source_theme}" ] && usage && exit 46
[ -z "${target_theme}" ] && usage && exit 44

if [ "${source_theme}" = "${target_theme}" ]; then
  echo "Target and source themes are the same, aborting."
  exit 42
fi

tmp_file=$(mktemp)

function do_action {
  drupal_path="${1}"
  subsite="${2}"
  theme_name=$(drush php-eval 'print $GLOBALS["base_theme_info"][0]->name;')
  if [ -z "${theme_name}" ]; then
    echo "${subsite} has no base theme, skipping."
    return
  fi

  if [ "${theme_name}" != "${source_theme}" ]; then
    echo "Current base theme is \"${theme_name}\", leaving things untouched."
    return
  fi

  # Actual work
  echo "Current base theme is \"${theme_name}\", switching to \"${target_theme}\"..."
  # Ensure the target theme is enabled
  drush pm-enable ${target_theme}

  # Get the .info path
  theme_info_filepath=$(drush php-eval 'print $GLOBALS["theme_info"]->filename;')
  if [ -z "${theme_info_filepath}" ]; then
    echo "Unable to retrieve the .info path, aborting for site ${subsite}."
    subsite_state='nok'
    return
  fi
  theme_info_filepath="${drupal_path}/${theme_info_filepath}"

  # Ensure the .info file exists
  if [ ! -f "${theme_info_filepath}" ]; then
    echo "${theme_info_filepath} does not appear to exist, aborting."
    subsite_state='nok'
    return
  fi

  # Ensure the .info file is writable
  if [ ! -w "${theme_info_filepath}" ]; then
    echo "${theme_info_filepath} is not writable, aborting."
    subsite_state='nok'
    return
  fi

  # Display the initial "base theme" lines
  echo "About to edit ${theme_info_filepath}... "
  grep 'base theme' "${theme_info_filepath}" | sed 's,^,>>,'

  # Change the adequate "base theme" line
  echo "Editing ${theme_info_filepath}"
  if [ -n "${debug}" ]; then
    perl -pe 's,^\s*base theme\s*=\s*(\S+),base theme = '${target_theme}',' "${theme_info_filepath}"
  else
    perl -i -pe 's,^\s*base theme\s*=\s*(\S+),base theme = '${target_theme}',' "${theme_info_filepath}"
  fi
  grep 'base theme' "${theme_info_filepath}" | sed 's,^,>>,'
  echo "${subsite}" >> "${tmp_file}"
}

loop_on_target_subsites "${drupal_path}" ${target} | timestamped_output
impacted_subsites=$(perl -nle 'push(@a, $_); END { print join(q[ ], @a)}' "${tmp_file}")
if [ -n "${impacted_subsites}" ]; then
  echo ""
  echo "Impacted subsites: ${impacted_subsites}"
  echo "You may want to clear the caches for these subsites, using e.g."
  echo "run_drush ${drupal_path} '${impacted_subsites}' cc all"
fi
unlink "${tmp_file}" &> /dev/null
exit 0
