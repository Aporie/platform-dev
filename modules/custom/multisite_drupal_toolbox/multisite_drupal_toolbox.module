<?php
/*
* hook_boot
*/
function multisite_drupal_toolbox_boot() {
  global $conf;
  if(!isset($conf["language_count"])) {
	$conf["language_count"] = 2;	
  }
  else {
	if($conf["language_count"] == 1 && $conf["language_default"]->language == 'en')
	  $conf["language_count"] = 2; // set language_count to 2 to force the display of the language prefix	
  }
}
  
  
/*
* hook_feature_set_api
*/ 
function multisite_drupal_toolbox_feature_set_api() {
  return array('version' => '1.0');
}

function _disable_content_type($type) {
  $type_info = node_type_load($type);
  $type_info->module = 'node';
  $type_info->custom = 1;
  $type_info->modified = 1;
  $type_info->locked = 0;
  $type_info->disabled = 1;
  node_type_save($type_info);
}


/**
* Add block to the context
*/
function multisite_drupal_toolbox_enable(){
	
  _add_block_context('site_wide','locale-language','locale','language','highlighted');	
  _add_block_context('site_wide','system-main-menu','system','main-menu','featured');	
  _add_block_context('communities','multisite_og_button-og-contextual-links','multisite_og_button','og-contextual-links', 'sidebar_first','-9');
 
}

/**
* Utility function to add block to a context
*/
function _add_block_context($contextName,$blockTitle,$module,$delta, $region,$weight='-10'){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Make some modifications
	$blockToAdd = array(
			'module' => $module,
			'delta' =>  $delta,
			'region' => $region,
			'weight' => $weight,
					); 
	//Add modification to the context
	$context->reactions['block']['blocks'][$blockTitle]=$blockToAdd;	
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to remove block from context
*/
function _remove_block_context($contextName,$blockTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->reactions['block']['blocks'][$blockTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}


/**
* Utility function to add view to a context
*/
function _add_views_context($contextName,$viewTitle){
	//Load context
	$context=module_invoke('context','load',$contextName); 
	//Add modification to the context
	$context->conditions['views']['values'][$viewTitle]=$viewTitle;	
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to remove block from context
*/
function _remove_views_context($contextName,$viewTitle){	 
	//Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['views']['values'][$viewTitle]);   
	//Update the context
	module_invoke('context','save',$context);
}

/**
* Utility function to add content type from context
*/
function _add_content_type_context($contextName, $contentType){

	//Load context
	$context=module_invoke('context','load',$contextName); 
  //Add modification to the context
	$context->conditions['node']['values'][$contentType]=$contentType;
	//Update the context
	module_invoke('context','save',$context);
    
}

/**
* Utility function to remove content type from context
*/
function _remove_content_type_context($contextName,$contentType){
	
  //Load context
	$context=module_invoke('context','load',$contextName);	 
	//Remove element from the context
	unset($context->conditions['node']['values'][$contentType]);   
	//Update the context
	module_invoke('context', 'save', $context);
  
}

/**
 * Implementation of hook_block_info().
 */
function multisite_drupal_toolbox_block_info() {

  $blocks['createcontent'] = array(
    'info' => t('Create Content'),
  );
  return $blocks;
}
 
/**
 * Implementation of hook_block_view().
 */
function multisite_drupal_toolbox_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'createcontent':
      $block['subject'] = t('Create Content');
      $block['content'] = create_contents();
      break;
  }
  return $block;
}
 
/**
 * custom html block
 * @return string
 */
function create_contents() {
  $og = og_context();
  if ($og) {
    $addl = '<ul>';
    if (module_exists('links'))
      $addl .= '<li>' . l('Create links','node/add/links',array('query' => array('gids_node[]' => $og->etid))) . '</li>';
    if (module_exists('events'))
      $addl .= '<li>' . l('Create events','node/add/event',array('query' => array('gids_node[]' => $og->etid))) . '</li>';
    if (module_exists('wiki'))
      $addl .= '<li>' . l('Create wiki','node/add/wiki',array('query' => array('gids_node[]' => $og->etid))) . '</li>';   
    if (module_exists('survey'))
      $addl .= '<li>' . l('Create surkey','node/add/webform',array('query' => array('gids_node[]' => $og->etid))) . '</li>'; 	  
    $addl .= '</ul>';
    return $addl;
  }
}



/*
* get the rid of a og role name
*/
function get_og_rid($role_name) {
  $r = db_select('og_role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   

  return $r['rid'];
}
/*
* get the rid of a role name
*/
function get_rid($role_name) {
  $r = db_select('role', 'r')
    ->condition('name', $role_name,'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();   

  return $r['rid'];
}

