<?php
/**
 * @file
 * Code for the Events feature.
 */

include_once('events.features.inc');

/**
* Add block to the context
*/
function events_enable(){
	_add_block_context('communities','views-calendar-upcoming_events','views','calendar-upcoming_events','sidebar_first');
	_add_views_context('communities','calendar');
	_add_views_context('communities','calendar:month');
	_add_views_context('communities','calendar:week');
	_add_views_context('communities','calendar:day');
	_add_views_context('communities','calendar:year');
	_add_content_type_context('communities', 'event');
}


/**
* Remove block from the context
*/
function events_disable(){
	_remove_block_context('communities','views-calendar-upcoming_events');
	_remove_views_context('communities','calendar');
	_remove_views_context('communities','calendar:month');
	_remove_views_context('communities','calendar:week');
	_remove_views_context('communities','calendar:day');
	_remove_views_context('communities','calendar:year');
	_remove_content_type_context('communities', 'event');
	_disable_content_type('event');
}


/*
* hook_menu
*/
function events_menu() {

  $items = array();
 
  $items['community/%group_name/calendar'] = array(
    'title' => 'Events',
    'page callback' => 'views_page',
    'page arguments' => array('calendar', 'month', 1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
 
   $items['community/%group_name/calendar/week'] = array(
    'title' => 'Week',
    'page callback' => 'views_page',
    'page arguments' => array('calendar', 'week', 1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
  
   $items['community/%group_name/calendar/day'] = array(
    'title' => 'Day',
    'page callback' => 'views_page',
    'page arguments' => array('calendar', 'day', 1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
  
   $items['community/%group_name/calendar/year'] = array(
    'title' => 'Year',
    'page callback' => 'views_page',
    'page arguments' => array('calendar', 'year', 1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
 
return $items;}



/*
*setup permission
*/
function events_modules_enabled($modules){
	if(in_array('events', $modules)) { 

	  //Activation message
	  drupal_set_message('Events feature is now active on your site.');
	
	}
}
/**
*
*/
function events_modules_disabled($modules) {
  if(in_array('events', $modules)) {
  
	  // Administrator
	  $adm = db_select('role', 'r')
		->condition('name', "administrator",'=')
		->fields('r', array('rid'))
		->execute()
		->fetchAssoc();

	  user_role_revoke_permissions($adm['rid'], array(  
		'edit own events content',
		'edit any events content',
		'delete own events content',
		'delete any events content',
		'create events content',
	  ));
		
	  // Contributor
	  $contrib = db_select('role', 'r')
		->condition('name', "contributor",'=')
		->fields('r', array('rid'))
		->execute()
		->fetchAssoc();
		  
	  user_role_revoke_permissions($contrib['rid'], array(
		'edit own events content',
		'edit any events content',
		'delete own events content',
		'delete any events content',
		'create events content',
	  ));
			  
	  // Disable permissions to OG roles ---------------------------------------------------------------  
	  // Community Manager
	  $cm = db_select('og_role', 'r')
		->condition('name', "community_manager",'=')
		->fields('r', array('rid'))
		->execute()
		->fetchAssoc();

	  og_role_revoke_permissions($cm['rid'], array(
		'update own events content',
		'update any events content',
		'delete own events content',
		'delete any events content',
	  ));
		
	  // Administrator Member
	  $admm = db_select('og_role', 'r')
		->condition('name', "administrator member",'=')
		->fields('r', array('rid'))
		->execute()
		->fetchAssoc();

	  og_role_revoke_permissions($admm['rid'], array(
		'update own events content',
		'update any events content',
		'delete own events content',
		'delete any events content',
	  ));
		
	  drupal_flush_all_caches(); 
      drupal_set_message('Events feature is now disabled on your site.');
  }
}

/*
* hook_node_insert
*/

function events_node_type_insert($node) {
  if ($node->type == 'events') {
    node_types_rebuild();

    drupal_set_message("invalide cache og");
    og_invalidate_cache();
    
    // Add permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
    // Administrator
    $adm = db_select('role', 'r')
      ->condition('name', "administrator",'=')
      ->fields('r', array('rid'))
      ->execute()
      ->fetchAssoc();

    user_role_grant_permissions($adm['rid'], array(  
      'edit own events content',
      'edit any events content',
      'delete own events content',
      'delete any events content',
      'create events content',
    ));
    
    // Contributor
    $contrib = db_select('role', 'r')
      ->condition('name', "contributor",'=')
      ->fields('r', array('rid'))
      ->execute()
      ->fetchAssoc();
      
    user_role_grant_permissions($contrib['rid'], array(
      'edit own events content',
      'edit any events content',
      'delete own events content',
      'delete any events content',
      'create events content',
    ));
          
  // Add permissions to OG roles ---------------------------------------------------------------  
  // Community Manager
  $cm = db_select('og_role', 'r')
    ->condition('name', "community_manager",'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();

  og_role_grant_permissions($cm['rid'], array(
    'update own events content',
    'update any events content',
    'delete own events content',
    'delete any events content',
  ));
    
  // Administrator Member
  $admm = db_select('og_role', 'r')
    ->condition('name', "administrator member",'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();

  og_role_grant_permissions($admm['rid'], array(
    'update own events content',
    'update any events content',
    'delete own events content',
    'delete any events content',
  ));
    
  }
}