<?php
/**
 * @file
 * Code for the wiki feature.
 */

include_once('wiki.features.inc');

/*
* hook_menu
*/
function wiki_menu() {
  $items = array();
 
  $items['community/%group_name/wiki'] = array(
    'title' => 'wiki',
    'page callback' => 'views_page',
    'page arguments' => array('wiki_list', 'page_1', 1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );

  return $items;
}

/*
* hook_enable
*/
function wiki_enable() {
  _add_views_context("communities","wiki_list");
  _add_block_context('communities', 'wiki_list-block_1', 'views', 'wiki_list-block_1', 'sidebar_first');
  _add_content_type_context('communities','wiki');
}




/*
* hook_node_insert
*/

function wiki_node_type_insert($node) {
  if ($node->type == 'wiki') {
    node_types_rebuild();

    drupal_set_message("invalide cache og");
    og_invalidate_cache();
    
    // Add permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
    // Administrator
	$adm_rid = get_rid('administrator');
    user_role_grant_permissions($adm_rid, array(  
      'edit own wiki content',
      'edit any wiki content',
      'delete own wiki content',
      'delete any wiki content',
      'create wiki content',
    ));
    
    // Contributor
    $contrib_rid = get_rid('contributor');
    user_role_grant_permissions($contrib_rid, array(
      'edit own wiki content',
      'edit any wiki content',
      'delete own wiki content',
      'delete any wiki content',
      'create wiki content',
    ));
          
    // Add permissions to OG roles ---------------------------------------------------------------  
    // Community Manager
    $cm_rid = get_og_rid('community_manager');
    og_role_grant_permissions($cm_rid, array(
      'create wiki content',
      'update own wiki content',
      'update any wiki content',
      'delete own wiki content',
      'delete any wiki content',
    ));
    
    // Administrator Member
    $admm_rid = get_og_rid('administrator member');
    og_role_grant_permissions($admm_rid, array(
      'create wiki content',
      'update own wiki content',
      'update any wiki content',
      'delete own wiki content',
      'delete any wiki content',
    ));
  
  }
}



/*
 * Hook disable 
 */
function wiki_disable(){

  // Remove block
  _remove_views_context("communities", "wiki_list");
  _remove_block_context('communities', 'wiki_list-block_1');
  _remove_content_type_context('communities','links');

  /*** Remove permissions ***/
  _disable_content_type('wiki');
  
  // Administrator
  $adm_rid = get_rid('administrator');
  user_role_revoke_permissions($adm_rid, array(
    'edit own wiki content',
    'edit any wiki content',
    'delete own wiki content',
    'delete any wiki content',
    'create wiki content',
  ));
    
  // Contributor
  $contrib_rid = get_rid('contributor');
  user_role_revoke_permissions($contrib_rid, array(
    'edit own wiki content',
    'edit any wiki content',
    'delete own wiki content',
    'delete any wiki content',
    'create wiki content',
  ));
          
  // Disable permissions to OG roles ---------------------------------------------------------------  
  // Community Manager
  $cm_rid = get_og_rid('community_manager');
  og_role_revoke_permissions($cm_rid, array(
    'update own wiki content',
    'update any wiki content',
    'delete own wiki content',
    'delete any wiki content',
  ));
    
  // Administrator Member
  $admm_rid = get_og_rid('administrator member');
  og_role_revoke_permissions($admm_rid, array(
    'update own wiki content',
    'update any wiki content',
    'delete own wiki content',
    'delete any wiki content',
  ));
    
}







/**
* Implements hook_element_info_alter().
*
* Sets the text format processor to a custom callback function.
* This code is taken from the Better Formats module.
*/


function wiki_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'wiki_format_filter_process_format';
      }
    }
  }
}


/*
* hook_filter_process_format
*/

function wiki_format_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change the default text format of the 'body' field to ' wiki'.
  if ($element['#bundle'] == 'wiki' && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'wiki';
  }
  return $element;
}




/*
* hook_views_pre_render
*/
function communities_views_pre_render(&$view) {
  if($view->name == 'wiki_list') {
    if(user_access('create wiki content'))  {
      $output.= l(t('Create a new wiki'),'node/add/wiki',array('attributes' => array('type' => 'add', 'action_bar' => 'last', 'btn_group' => 'single')));
    }
    $view->header['area']->options['content'] = $output;
  }
}