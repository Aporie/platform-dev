<?php
/**
 * @file
 * Code for the communities feature.
 */

include_once('communities.features.inc');
include_once('communities_moderation.inc');

/*
* hook_disable
*/
function communities_disable() {
  _disable_content_type('community');
  
   // revoke permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
  $result = db_select('role', 'r')
    ->condition('name', "contributor",'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();

  user_role_revoke_permissions($result['rid'], array(  
    'create community content',
	'delete own community content',
	'edit own community content',  
  ));  
}


/*
* hook_enable
*/
function communities_enable() {
  // create og role -------------------------------------------------------------------------------------------------------------------------------
  $community_manager_role = og_create_global_role("community_manager");
}



/*
* hook_views_pre_render
*/
function communities_views_pre_render(&$view) {
  if($view->name == 'communities_directory') {
    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');
    
    $output = '<div class="well btn-toolbar action_bar">';
    $output .= '<div class="btn-group">';
    
    foreach($alphabet as $letter) {
	  if(count(arg()) > 1)
	    $url = arg(0)."/".arg(1)."/".$letter;
	  else
	    $url = arg(0)."/".$letter;
      $output .= l($letter,$url,array('attributes' => array('class' => array('btn btn-small action-expand'))));
    }
    
    $output .= '</div>';
    
    if(user_access('create community content'))  {
      $output.= '<div class="btn-group">';
      $output.= l('<i class="icon-plus icon-white"></i>'.t('Create a new community'),'node/add/community',array('attributes' => array('class' => array('btn btn-info')), 'html' => true));
      $output.= '</div>';    
    }
    
    $output .= '</div>';
    
    $view->header['area']->options['content'] = $output;
  }
}



/*
* hook_init
*/
function communities_init() {
  drupal_add_css(drupal_get_path('module', 'communities') . '/communities.css');
  
  // set og context on comunities views
  if(arg(0) == 'community') {
    $alias = drupal_get_normal_path("community/".str_replace(" ","-",arg(1)));
    $param = explode("/", $alias);
    $group = og_get_group('node', $param[1]);
	og_context($group);
  }
   
}


/*
* hook_modules_enabled
*/
function communities_modules_enabled($modules) {
  if(in_array('communities', $modules)) { 
	// populate users fields of dummy users
    $account = user_load_by_name("admin");
	$account1 = user_load_by_name("administrator");
	$account2 = user_load_by_name("contributor");

	$account->field_firstname['und'][0]['value'] = 'John';
    $account->field_lastname['und'][0]['value'] = 'Doe';
	user_save($account);
	
	$account1->field_firstname['und'][0]['value'] = 'John';
    $account1->field_lastname['und'][0]['value'] = 'Smith';
	user_save($account1);	
	
	$account2->field_firstname['und'][0]['value'] = 'John';
    $account2->field_lastname['und'][0]['value'] = 'Name';
	user_save($account2);	
  }
}


/*
* hook_node_type_insert
*/
function communities_node_type_insert($info) {
  if($info->type == 'community') {
	node_types_rebuild();
	  
    // add permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
	$au_rid = get_rid('authenticated user');
    user_role_grant_permissions($au_rid, array(  
      'create community content',
	  'delete own community content',
	  'edit own community content',
      'view own unpublished content',
	  'view revisions',
	  'access workbench',
      'use workbench_moderation my drafts tab',
      'use workbench_moderation needs review tab',
      'view moderation messages', 
	  'moderate content from draft to needs_review',
      'view moderation history',
    )); 	
  
    // add permissions to OG roles ----------------------------------------------------------------------------------------------------------------------------------------------  
	$cm_rid = get_og_rid('community_manager');  
    og_role_grant_permissions($cm_rid, array(  
      'add user',
      'approve and deny subscription',
      'unsubscribe',
      'update group', 
      'administer group',
    ));  
  }	
}

	
/*
* _to_arg function
*/
function group_name_to_arg($arg) {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
	  $nid = arg(1);
      $node = node_load($nid);
      if($node->type == 'community')
        return str_replace(" ","-",$node->title);
  }
  else {
    if(arg(0) == 'community') {
      return arg(1);
    }
  }
  return 'none';
}

/*
* _load function
*/
function group_name_load($arg) {
  if($arg == 'none')
    return 0;
  $alias = drupal_get_normal_path("community/".str_replace(" ","-",$arg)); // get real path to get node id
  $param = explode("/", $alias);
  $group = og_get_group('node', $param[1]); // load community
	  
  //og_context($group);
  
  return $group->gid;
}






/*
* hook_node_insert
*/
function multisite_drupal_toolbox_node_update($node) {
  if($node->type == 'community') {
    // get the group related to the node
    $group = og_get_group('node', $node->nid);
	
    $community_manager_rid = get_og_rid("community_manager");
	$administrator_member_rid = get_og_rid("administrator member");
	// grant administrator member and community manager roles to the group author
	og_role_grant($group->gid, $node->uid, $community_manager_rid);
	og_role_grant($group->gid, $node->uid, $administrator_member_rid);
  }
}



/*
* hook_menu
*/
/*
function communities_menu() {
  $items['community/%group_name/view'] = array(
    'title arguments' => array(1),
	'title callback' => '_communities_title_item',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'page callback' => 'node_page_view',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => -10,
  );
  return $items;
}
*/
	
/*
* dynalically change menu item title
*/
/*
function _communities_title_item($arg) {
  $n = $query = db_select('og', 'og')
    ->fields('og', array('etid'))
	->condition('gid', $arg, '=')
	->condition('entity_type', 'node', '=')
	->execute()
	->fetchAssoc();
  $node = node_load($n['etid']);
  return $node->title;
}
*/