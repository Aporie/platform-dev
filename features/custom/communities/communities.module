<?php
/**
 * @file
 * Code for the communities feature.
 */

include_once('communities.features.inc');


/*
* hook_disable
*/
function communities_disable() {
  _disable_content_type('community');
  
   // revoke permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
  $result = db_select('role', 'r')
    ->condition('name', "contributor",'=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();

  user_role_revoke_permissions($result['rid'], array(  
    'create community content',
	'delete own community content',
	'edit own community content',  
  ));  
}


/*
* hook_enable
*/
function communities_enable() {
  // create og role -------------------------------------------------------------------------------------------------------------------------------
  $community_manager_role = og_create_global_role("community_manager");
}



/*
* hook_views_pre_render
*/
function communities_views_pre_render(&$view) {
  if($view->name == 'communities_directory') {
    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');
    
    $output = '<div class="well btn-toolbar action_bar">';
    $output .= '<div class="btn-group">';
    
    foreach($alphabet as $letter) {
      $url = $_GET['q'].'/'.$letter;
      $output .= l($letter,$url,array('attributes' => array('class' => array('btn btn-small action-expand'))));
    }
    
    $output .= '</div>';
    
    if(user_access('create community content'))  {
      $output.= '<div class="btn-group">';
      $output.= l('<i class="icon-plus icon-white"></i>'.t('Create a new community'),'node/add/community',array('attributes' => array('class' => array('btn btn-info')), 'html' => true));
      $output.= '</div>';    
    }
    
    $output .= '</div>';
    
    $view->header['area']->options['content'] = $output;
  }
}



/*
* hook_init
*/
function communities_init() {
  drupal_add_css(drupal_get_path('module', 'communities') . '/communities.css');
}


/*
* hook_modules_enabled
*/
function communities_modules_enabled($modules) {
  if(in_array('communities', $modules)) { 
  }
}


/*
* hook_node_type_insert
*/
function communities_node_type_insert($info) {
  if($info->type == 'community') {
	node_types_rebuild();
	  
    // add permissions to roles ----------------------------------------------------------------------------------------------------------------------------------------------
    $au = db_select('role', 'r')
      ->condition('name', "authenticated user",'=')
      ->fields('r', array('rid'))
      ->execute()
      ->fetchAssoc();

    user_role_grant_permissions($au['rid'], array(  
      'create community content',
	  'delete own community content',
	  'edit own community content',
      'view own unpublished content',
	  'view revisions',
	  'access workbench',
      'use workbench_moderation my drafts tab',
      'use workbench_moderation needs review tab',
      'view moderation messages', 
	  'moderate content from draft to needs_review',
      'view moderation history',
    )); 	
  
    // add permissions to OG roles ----------------------------------------------------------------------------------------------------------------------------------------------  
    $cm = db_select('og_role', 'r')
      ->condition('name', "community_manager",'=')
      ->fields('r', array('rid'))
      ->execute()
      ->fetchAssoc();  
  
    og_role_grant_permissions($cm['rid'], array(  
      'add user',
      'approve and deny subscription',
      'unsubscribe',
      'update group', 
      'administer group',
    ));  
  }	
}


/*
* hook_workbench_moderation_transition
*/
function communities_workbench_moderation_transition($node, $previous_state, $new_state) {
  global $base_url;

  $transition_made = $previous_state."__".$new_state;  
  
  // transistions settings
  $transitions_settings = array(
    "draft__needs_review" => array(
	  "message" => get_mail_template('draft__needs_review'),
	  "subject" => "creation of community request",
	),
	"needs_review__draft" => array(
	  "message" => get_mail_template('needs_review__draft'),
	  "subject" => "community refused",	
	),
  );  
  
  if(isset($transitions_settings[$transition_made])) { // if there are settings for the transition => process send mail  
    // get all administrators
    $query = db_select('users', 'u');
    $query->join('users_roles', 'ur', 'u.uid = ur.uid');
    $query->join('role', 'r', 'r.rid = ur.rid');
    $query->condition('r.name', "administrator",'=');
    $query->fields('u', array('uid'));
    $result = $query->execute();

    while($record = $result->fetchAssoc()) {
      $admin_users[] = $record['uid'];
    }
  
    $params = array(
	  "to_creator" => $node->uid,
      "to_admin" => $admin_users,
      "nid" => $node->nid,  
    );
    $params += $transitions_settings[$transition_made];
	
    _send_mail($params); // send mail
  }
   
}

/*
* send mail function
*/
function _send_mail($params) {
  $module = 'communities';
  $key = 'workbench_moderation_workflow';

  $from = variable_get('site_mail', 'admin@example.com');

  $language = language_default();
  $send = TRUE;

  foreach($params['to_admin'] as $uid) {
    $user = user_load($uid);
    $params['admin_uid'] = $uid;
    $result = drupal_mail($module, $key, $user->mail, $language, $params, $from, $send);
  }

  if ($result['result'] == TRUE) {
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }

}


/*
* hook_mail
*/
function communities_mail($key, &$message, $params) {
  global $user, $base_url;

  $admin_user = user_load($params['admin_uid']);
  $creator_user = user_load($params['to_creator']);

  $node = node_load($params['nid']);

  $variables = array(
    '%admin_user' => $admin_user->field_firstname['und'][0]['value']." ".$admin_user->field_lastname['und'][0]['value'], 
    '%creator_user' => $creator_user->field_firstname['und'][0]['value']." ".$creator_user->field_lastname['und'][0]['value'],
    '%community_link' => l($node->title, $base_url."/en/node/".$node->nid), 
    '%site_url' => $base_url,
  );

  $message['headers']['Content-Type'] = "text/html; charset=iso-8859-1";
  $message['headers']['Mime-Version'] = "1.0";

  switch ($key) {
    case 'workbench_moderation_workflow':
      $message['subject'] = $params["subject"];
      $message['body'][] = check_plain(strtr($params['message'], $variables));
      break;
  }
}

/*
* provide the template mail
*/
function get_mail_template($key) {
  $output = "";
  switch ($key) {
	case 'draft__needs_review': 
      $output = "Dear %admin_user,<br><p>%creator_user requests a community creation : %community_link<br></p><p><a href=\"%site_url/en/admin/workbench\">Go to administration</a>.</p>";
 	  break;
	case 'needs_review__draft': 
      $output = "Dear %creator_user,<br><p>Your community %community_link has been refused.<br></p>";
	  break;
  }
  return $output;
}